- date: 2025-08-01
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 131 ~ 142
  notes: |
    第 12 章 人を助けることのむずかしさ。
    動機づけする≒人を助ける技能は生来のものと信じられているが、そうではない。
    そのせいで練習をすることもなく悪循環を引きおこす。
    助ける意思があっても、人々が助けを求めていなければ助けることはできない。
    効果的な助力には、問題の定義に相互の合意があることが必要である。
    善意の助力も、利己的なものであったり、邪魔立てだと思われることがしばしばある。
    このように必ず成功すると限らない助力は人々への気遣いを必要とし、また自分に対しての気遣いも必要とする。
    助力される側の意思がないといけないのとか、行動変容と同じやな。行動変容は助力か。
- date: 2025-08-02
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 143 ~ 154
  notes: |
    第 13 章 動機づけのできる人になるには。
    誰しも人とやり取りするためのサバイバル規則を構築してきている。
    中でもメタ規則はその規則自体のアイディアの流れを制御する。
    サバイバル規則は生き残り上の価値があって習得しているので、規則を自覚していても変えるのは難しく、変えるためには段階を踏んで規則の個別化・緩和を行う必要がある。
    そしてそのサバイバル規則の中に否定的な自己評価があれば、まずその規則を取り払うことから始める。
    お次は自己変容。誰かを動機付けるにはまず自分を評価しないと始まらないというのはなるほどな。
    読んだことないし読むか。「人を動かす」。
- date: 2025-08-03
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 155 ~ 162
  notes: |
    第 14 章 力はどこからくるか。
    自尊心があれば人を動機づけられることが受け入れられない人は、特別な力を手に入れれば突然強力になれる、と考えがちだがそれは危険な考えである。
    力は関係から生まれている。人と組織の依存関係、役割を得て組織から期待される力。
    そのため力を欲して昇進を受け入れたものの、期待された力を発揮できず、無力とみなされることもある。
    時節にあやかって得られる力。例えば情報技術は高度な情報化社会で力になる。
    絶対的な力というのがなくて、とりまく環境に左右されて相対的に力を得たり失ったりする、という感じかな。
- date: 2025-08-04
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 163 ~ 174
  notes: |
    第 15 章 力、不完全性、整合性。
    問題の殆どは情緒的・心理的な動揺なく機械的にテクニックで解決できる問題だが、実際にその様に機械的に解決されることは少ない。
    それは低い自尊心を守るための防衛反応により、行動に移さないことによる。
    このように問題はできごとに対する反応で起こっている。
    そのできごとに対する行動パターンが成熟しているか否かで、できごとを問題にしてしまったり、問題を消滅させたりする。
    単純化した説明では、それは人として成熟しているか否かであり、行動を起こす際に社会的・コミュニケーション的な技能を発揮できるかである。
    この章ちょっとわたしには難しかった。場数を踏んでなかったり成熟してなかったりでピンと来てない感じがする。
- date: 2025-08-05
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 175 ~ 184
  notes: |
    第 4 部 組織化。
    動機づけの能力だけでなくなぜ組織力が必要か、既存の力をどのように変換するか、有能な組織者になるための道筋を示す。
    第 16 章 組織上の力を手に入れる。
    人格の力以外でリーダーが使えるものに予算や人員のような資源≒組織上の力がある。
    それは平等に与えられるものではないため、新人リーダーはそれらを自分のチームのために他のチームから勝ち取る必要がある。
    その競争にそれまでの既存の力を変換する手段が使える。
    例えば、重大な仕事を担っているだとか居ること自体に理由がある様な場合、それらを媒介にして別の力を得る駆け引きができる。
    これはわたしが信頼ポイントと呼んでるものに近い。仕事を通して貯めたポイントで多少の無理を勝ち取れる。
- date: 2025-08-06
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 183 ~ 194
  notes: |
    第 17 章 問題解決チームの効果的組織法
    チームを組織する手法は個人別・投票・強力なリーダー・コンセンサスの 4 種に大別され、大抵はそれぞれの短所を補うために混合が選ばれる。
    個人別は投票の前段階といえる。また他の手法を検討するうえでの基準値としても役立つ。
    投票は概ねチームの平均的な回答に収束するため、うまく動いているチームの場合はどの手法よりも品質が劣る。また意思決定の情報がメンバーに流れず学ぶ機会がなくなる。
    強力なリーダーでは概ねリーダーの性能に品質は依存するが、知識の浅いメンバーの影響を受けて品質を落とすこともある。
    コンセンサスは、時間はかかるが高品質の決定を得られ、全ての情報も共有され学びになる。ただし専門知識が貧弱だと投げやりな議論に時間を費やしコンセンサスは崩壊する。
    いずれの手法も、解決したい問題に合わせ、状況に適した最良の手法を選択すべきである。
    数年チームを率いてないのでアレやが、状況に応じて最良の～ってのは有機的なチームの特徴と重なって見えた。
- date: 2025-08-07
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 195 ~ 204
  notes: |
    第 18 章 有効な組織づくりへの障害は？
    有効な組織は状況に合わせて有機的にリーダーを選出する。
    この有効な組織づくりへの障害は大きく 4 つ、命令する側される側に二分する、人を機械のように扱う、技術リーダー自身がやってしまう、不手際により発生した問題解消したことに報酬を与える、がある。
    技術リーダーの仕事は自分で問題解決をするのでなく、問題解決の環境を作り上げることといえる。
    だから、リーダー自身が手を下したり、問題に対処するため徹夜したメンバーを称賛して問題を未然に防いだメンバーを称賛しない等が、組織づくりに障害を与える。
    自分で手を下しがちよな。手を下してしまうから有機的な組織にならないのか、あるいはその逆か。卵と鶏の話のようやがここは手を出さないべきなんかもな。
- date: 2025-08-08
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 205 ~ 214
  notes: |
    第 19 章 組織づくりの学び方。
    チームをより良く対処させ発展するようにしむけるにはどうすればよいか。そのためのいくつかのアイディア。
    原始的な方法は、公私を問わず活動・団体・講習など組織づくりの実体験に参加して練習する。
    より近代的な方法として、組織を観察し変化を投入するような実験をしてみる。
    解決したい問題に対し不適切な組織形態をとっているような不整合を探してみる。
    組織を構成する人々の性格の傾向の個人差を知り、その違いを許容するようにしてみる。
    これらのアイディアだけでなく、観察して学び始めると学習方法がいくらでも見つかるようになると。
    組織づくりをしていくと実践者自身が組織の一部となり、自身も変容の対象になっていく。この自己変容の話は以降の章で詳しく。
- date: 2025-08-09
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 215 ~ 226
  notes: |
    第 5 部 変容。
    リーダーとして自己変容していくなかで、どのように周りからテストされ、自分自身をどのようにテストし計画的に変化に備えるか、その際の支援を得るには、という諸問題を考察する。
    第 20 章 自分はリーダーとして、どのように値踏みされるか。
    長々とエピソードが記述されるが、要は初めてのチーム(ここでは新学期)ではリーダーもメンバーも互いに信頼関係がなく不安で、そのためお互いの弱点を探り合い疲弊に陥る。
    そのようなメンバーの不安を緩和するために、リーダーから最初に情報を開示する、あるいは近い将来に信頼関係を築いた後に開示する約束をすることで、安心できる環境を提供できる。
    リーダー自身もその値踏み≒信頼関係構築の間に自己変容しチームに順応していく、といったところか。
- date: 2025-08-10
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 227 ~ 236
  notes: |
    第 21 章 自分自身のリーダーシップ試験に通るには。
    リーダーは周りから常にテストされるが、同時に自分自身をもテストしている。
    自然な状況で発生する問題に対する自身の対処を通して、周りがどの様な反応をするかをテストする。
    実際の状況でテストするのでリスクもありうるが、これらのテストはリーダー自身の成長のための基準線として役立つ。
    また自分自身のテストでしばしば失敗をしていないなら、それは自分自身を過保護してテストが機能していない可能性がある。
    自己変容の文脈なので、自身の観察をして適切な難易度のテストを行っていくというところか。
- date: 2025-08-11
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 237 ~ 246
  notes: |
    第 22 章 変わるための計画を立てる。
    自己変容のためにはまず自分の特性ととりまく環境を知る必要がある。
    そこで自分 1 人でできる安全で結果に即時性がある目標を立て実行する練習で、自身の変化のスタイルと環境の理解を深める。
    行動変容の文脈においては新しい習慣の導入は難しいので、小さな変化から始めるのは効果があろうな。
    あと技術リーダーになりたい人が実践するということもあり、いちばん重要な本人のやる気も申し分ない。
- date: 2025-08-12
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 247 ~ 256
  notes: |
    第 23 章 変わるための時間を見つける。
    変化のための時間を確保するための方法について。
    大きく 3 つ、人に任せた仕事に介入しない、自分の行動を優先順位付けして組織化する(緊急対応に頼らない)、 1 つの行動で複数の利益を得る、がある。
    また他の人の学習内容を取り込むことで時間を圧縮できる。
    わたしの場合、仕事に関連しない学習は家事育児の隙間時間に 1 人で行うことが多く、誰かの学習内容を取り込むという側面は弱い(本も blog も誰かの学習内容といえばそうだが)。
- date: 2025-08-13
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 257 ~ 266
  notes: |
    第 24 章 変化のための支援。
    個人的な支援システムを構築する。平たく言えば人的ネットワーク。
    このネットワークは互助的なもので相互に支援する。
    変化のための支援システムであれば、期待通りの回答ばかり得られるものではなく、それ自体有機的に変化できる必要がある。
    自分の業績などが支援あってのもの、は忘れがちでよく言われる話やな。
    わたしも手持ちの人的支援システムは少ないけどある。直接的というより間接的な支援を受けてるかな。
- date: 2025-08-14
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 267 ~ 274
  notes: |
    エピローグ。
    リーダーになるのは少なからず変化によって幸福を失うリスクを伴う。
    にも関わらず自分の動機を知ることなくリーダーになるという幻想に囚われることがある。
    もしそのような強迫観念に囚われたら、なぜ自分はリーダーになりたいのか、リーダーになって提供できる資産と持ち込んでしまう負債は何かを問い、自分で断ち切るしかない。
    誰かを助けたいという動機がなければ技術リーダーになれない、というのが本書の主張だし、利己的な動機だけで幻想を抱いて火傷するなよってところか。
    本編はこれで終わり。あと文献案内を残す。
- date: 2025-08-15
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 275 ~ 288
  notes: |
    文献案内。
    本書を読んだあとはまず現場に出て実践すべきだというのが著者の主張。
    リーダーシップに関してより詳しく知るべき時がきたら、掘り下げたいテーマに関する推薦する文献を読むことをお勧めする。
    テーマは組織モデル、リーダーシップ、会議、自己評価等。哲学や禅からのアプローチもある。
    輪読会で読んでる倫理学も哲学との関係が深く、リーダーシップは応用倫理と重なる部分もあって、多方面からの探求も面白い。
- date: 2025-08-16
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: i ~ xv
  notes: |
    スーパーエンジニアへの道は 1986 年、本書は 1971 年に書かれてる。
    著者のシリーズの源流が本書らしい。各章に著者の振り返りがあって答え合わせしてくれてるのもあり、読みやすい。
    当時としてはプログラミング(というかシステム開発)を人間の活動から理解しようとしたのは画期的だったらしい。
- date: 2025-08-17
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 1 ~ 3
  notes: |
    第Ⅰ部 人間の行動としてのプログラミング。
    プログラミングと機械の関わりばかりが注目されてきたが、本書はプログラミングを人間的な観点から捉える。
    初版から 25 年経った振り返り時点でも当時より膨大な金がプログラマーに投じられるようになっていた。現代もその高騰は続いている認識。
    更にいえば AI が登場しても(一部の代替可能な層を除き)プログラマー不要論が現実にならないのは、プログラマーが単にコードを書くのが仕事でなく人間的な側面がその本質だったからって感じかな(今後は知らんが)。
- date: 2025-08-18
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 4 ~ 16
  notes: |
    第 1 章 プログラムを読む。
    プログラミングを学ぶ術は、書くことと読むこと。読むときには諸々の事情がコメントに残されていることは少なく、何故そうなったか知るのは難しい。
    そうしたコードには、コンピュータ・プログラミング言語・プログラマの知識の制約、事故の応急処置、仕様に基づく必要・不要な記述が混ざっている。
    その背後には人の心理的要因があり、理解するのに人間の行動を研究する価値がある。
    サンプルコードが PL/I で時代やな～と感じる。にも関わらず現代も状況はさほど変わらない。
    コードを読め、コメントには意図を残せとか諸々の手法が発展してきても状況に大差ないのは、原因が人間の心理的要因にあるからということか。
- date: 2025-08-19
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 17 ~ 32
  notes: |
    第 2 章 良いプログラムとは何か。
    プログラムを評価するのは難しい。
    判断の絶対的な指標はなく、相対的な指標でも、仕様を満たす(動く)か・計画に間に合ったか・プラットフォーム移行の容易さ・実行効率といった複数の基準があり単純に評価できない。
    良いプログラムとは何かという問題自体が適切でないと言える。
    振り返りでは経済的指標も増えてなおさら難しくなってる。
    ここで言う「良い」は後の著者の本でいう品質みたい。
    なんかまだ「スーパーエンジニアへの道」ほど面白い感じはしないな。
- date: 2025-08-20
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 33 ~ 52
  notes: |
    第 3 章 プログラミングをどのように研究するか。
    プログラミングの人間的な活動を研究する術として、行動科学の手法を流用する話。
    その際に行動科学の研究でも陥る内省・観察・実験・計測・利用するデータなどの誤りについて触れ、さらにプログラミング固有の難しさについても言及している。
    個人でなく集団を研究すべきだというのはせやなと思ったが、まだ全体的に面白みはないかな。
    1970 年代にこの内容が書かれたという点で、その何らかの派生物の影響を自分も受けてるだろうから驚きがないのかもな。
- date: 2025-08-21
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 53 ~ 56
  notes: |
    第Ⅱ部 社会活動としてのプログラミング。
    プログラムの多くは 1 人で書かれるものではないので、誰かと一緒に仕事することで様々な人間関係が生まれる。
    この部ではグループ(別々のプログラムを開発する人々)・チーム(協力してより良い製品を開発する人々)・プロジェクトに分けて考察する。
    振り返りによればチームの定義は先述の通りに改定された。多分チームの重要さからかな。
    今のわたしはグループかな。許可をもらったり依頼する・されることはあれど、自分が学習してるのは確かだが周りがそうかは定かでない。
- date: 2025-08-22
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 57 ~ 67
  notes: |
    第 4 章 プログラミンググループ。
    公式な組織構造は往々にして機能不足であり、そのため非公式な組織がそれを補完する。
    一方で組織や物理的な構造の変更が非公式な組織を破壊し、機能を損なうこともある。
    プログラマーの自己同一性の未熟さは、書いたプログラムに対して認知的不協和を引き起こし、誤りを認められなくなる。
    スパエンのときはやる気のある人たちが高めていくような話だったので面白かったけど、本書は今のところ未熟な人たちの底上げっぽく感じている。
    自らの未熟さを知り学習するのは好きだが、未熟な人たちの底上げは興味ないから、そこが面白みを感じにくい理由かもな。
- date: 2025-08-23
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 67 ~ 82
  notes: |
    第 4 章 プログラミンググループ。
    自分をプログラムに投影してしまうことで感情的・防御的な反応を引き起こし、誤りを認められなくなる。
    正しくフィードバックを受け入れるためにも、エゴレスプログラミングが重要であるとする。
    またプログラミングの社会的環境を維持することの難しさとその弊害について。
    昔からそうなんだろうが、問題となるようなプログラムや組織にエゴを持ち込むプログラマの振る舞いは、個人の未熟な自己同一性によるものよな。
    本当に良くしようとして開発してるなら、そんなことを気にしてる暇ないと思うけどな。
- date: 2025-08-24
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 83 ~ 95
  notes: |
    第 5 章 プログラミングチーム。
    プログラミングチームを編成する際の戦略面の話。
    理論上は最低限のスキルがあればよいが実際はそうではなく、最短納期でシステム開発したい場合は最高のチームで臨む必要があるとか、メンバーの余剰を持たないと不測の事態に対応できないとか。
    チーム内で割り当てる仕事が原因で不合理な地位が生まれるので慎重に割り振らないといけないとか。
    チームの目標設定に合意していないと、不満を持って同じ目標を目指さない人がいるとか。また圧力に屈して誤った合意に至ってしまう。
    現代でもよくある話ばかり。みんな大変やなという感想。そこまでケアしてもらわないと働けないプログラマとは一体。
