- date: 2025-02-01
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 87 ~ 90
  notes: |
    第 6 章 仮想記憶。
    仮想記憶の中核となるのは、仮想アドレス空間(virtual address space)と物理アドレス空間(physical address space)を対応付けるアドレス変換(address translation)を行う機能。
    主記憶よりも大きなメモリがあるように見せかける等メモリの使い勝手を飛躍的に高める。
    この対応付けはページテーブル(page table)と呼ばれるデータ構造によって行われ、ページサイズ(page size)の単位で行われる。
    主記憶上のページテーブルから変換ルールを読み出すのをテーブルウォーク(table walk)と呼ぶ。
    このため本来のアクセスに加えテーブルウォークのため 2 回主記憶にアクセスが必要になり、無駄に長いサイクルがかかる。
    この本を読んでると、一難去ってまた一難という感じで次々に課題と緩和策の繰り返しから CPU のありがたみが沁みるよな。
- date: 2025-02-02
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 91 ~ 94
  notes: |
    第 6 章 仮想記憶。
    TLB(Translation Lookaside Buffer)はページテーブルの一部を高速に主記憶から読み込んでおくためのハードウェアで、テーブルウォークの遅さを緩和する。
    ページテーブルと TLB は主記憶とキャッシュメモリの関係に近い。
    TLB は主に 4KB のページ単位のため、空間局所性が高ければより発生しにくいが、ミスは発生しうる。これを TLB ミス(TLB miss)と呼ぶ。キャッシュミスよりその頻度は低いが、コストはより高い。 TLB ミスの要因やダメージもキャッシュと同様。
    ただしフルアソシティブ(full associtive)の TLB はキャッシュは競合性ミスが発生しない。
    TLB は流石に初めて聞いた気がする。ここでも緩和のための仕組みがさらなる複雑さを...
- date: 2025-02-03
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 94 ~ 100
  notes: |
    第 6 章 仮想記憶。
    仮想記憶のソフトウェア制御は OS の仕事なので(開発者が書く)ソフトウェアで対処できるようなものではない。
    それでも TLB ミスはキャッシュミスと共通する点(初期参照ミス・容量性ミス・競合性ミス)があり同じ手法が有効。
    仮想記憶にはアドレス変換の他に重大なダメージをもたらすページフォールト(page fault)(disk I/O が発生する)ある。
    ここまで来るとソフトウェア的な対策は一定程度可能とはいえ CPU 毎にも異なるからどうしようもない感出てくるな。
- date: 2025-02-04
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 101 ~ 106
  notes: |
    第 7 章 I/O。
    本書では CPU の外部デバイスの内主記憶を除くデバイスへの操作を I/O アクセスと呼ぶ。
    I/O アクセスはメモリのように見せかけるメモリマップド I/O(memory-mapped I/O)とデバイス専用アドレス空間を用いる I/O アドレス空間(I/O address space)を用いる I/O 専用命令がある。
    I/O アクセスにより、デバイスへの指示(I/O デバイスへの書き込み)、状態の取得(I/O デバイスからの読み込み)、ネットワークからの受信とかディスクへの書き出しといったデータ転送(I/O デバイス→レジスタ→主記憶の転送)といった操作が実現できる。
    この章は I/O bound の話なので多少イメージつきやすそう。逆に今までよく掘り下げずに来たなという自戒...
- date: 2025-02-05
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 106 ~ 111
  notes: |
    第 7 章 I/O。
    I/O デバイスはコストと消費電力の観点から CPU に比べると動作周波数が低いため CPU から見て遅い。
    I/O バスもそれ同様なのと、多数のデバイスを識別する新規デバイスへの対応、動的な着脱、バスの規格やプロトコル・複数のバスをまたぐことで、遅い。
    また I/O デバイス自体がキャッシュ・バッファ・プリフェッチといった高速化手法を使えず、遅い。
    これらの特性は汎用的な対処が難しいので CPU 的に割り込み要求(interrupt request)、 CPU を介さずメモリ間でデータ転送する DMA(Direct Memory Access) といった I/O アクセス自体を減らす仕組みがある。
    CPU によっては I/O アクセスを制御する命令、 I/O デバイスから主記憶に直接アクセス可能、 I/O デバイスと CPU が L3 キャッシュを共有するなどの工夫もある。
    I/O デバイスの遅さを緩和するためなら何でもやるなという印象。
- date: 2025-02-06
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 111 ~ 118
  notes: |
    第 7 章 I/O。
    ソフトウェア的な I/O デバイスの遅さを緩和する方法は基本的に I/O アクセスの回数を減らす方法。
    I/O デバイスへのアクセスをページキャッシュ・バッファキャッシュで減らす、また 1 回の I/O アクセスにまとめる等。
    ただし I/O デバイスへのアクセス回数の減少はそのまま応答性の劣化につながると。ここでいう応答性はリアルタイム性能？
    計測実験は RTC(Real Time Clock) と PCI Express 。
    I/O なくしてソフトウェアは成り立たないのでなくすことはできないが緩和策を使ってうまく付き合おう、というわけか。悩ましいな。
- date: 2025-02-07
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 119 ~ 122
  notes: |
    第 8 章 システムコール、例外、割り込み。
    分岐命令の他に命令流の特別な切り替えが存在する。それらの呼び方や定義は CPU によってまちまちなので、本書では例外・割り込み系と総称する。
    システムコール(内部的に特権レベルの変更命令で明示的に発生)、例外(内部的に命令実行時のエラーなどハードウェアが検知し暗黙的に発生)、割り込み(外部的要求により発生)の 3 つに分類する。
    発生頻度が比較的稀であること、ソフトウェア的な観点で対策が難しく、もっと低いレイヤでの対応が主。
    この図がわかり良いよな言葉に出来ないけど。発生する場所とか考えたことなかった。
- date: 2025-02-08
  bookTitle: 分子調理の日本食
  pages: 1 ~ 13
  readCount: 2
  notes: |
    今日は酔っ払っており、手元にある本を読んだ。
    2021 年の本だが、この本の仮想のレシピ集は気合を入れれば日常的にできそうだなという感触を掴めた(恐らく記述時点でそれを狙ってたのであろうが)。
    しかしスノードームふろふき大根、これの茹で汁を捨てるんだ～と思い、煮汁の味を凝縮して提供できないのかと思ったわたしは、教科書的には NG だろうか。
    このような読者に対しては、まず実践してからモノを言えと。酔っ払ってないときにご飯を作って実践したいと思いますんません。
- date: 2025-02-09
  bookTitle: 分子調理の日本食
  pages: 1 ~ 155
  readCount: 2
  notes: |
    素面で読み返すべきかなと思って再度読んだ。
    昨日煮汁を使ったらええんちゃうかと書いたけど、透明度の高いジェランガムを使ってスノードームを模したいので煮汁を使ったら濁るからイマイチな気がする。
    濁ると吹雪いてる感じになりそう。白濁していいなら元々寒天でも使ってるだろうに。
    ジェランガムはじめとして、他の添加物も器具も結構高くてお試しで買うにはかなりハードル高いな。そういう意味でも空想の料理なのかも。大豆レシチンは唯一手頃？
- date: 2025-02-10
  bookTitle: 家庭の低温調理 完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ 99
  pages: 1 ~ 45
  notes: |
    分子調理の延長で読んだ。
    Nomiku は潰れたけど他メーカーがポータブルな低温調理器具を販売し続けてるのも考えたらやっぱイノベータやったんやろな。
    卵の章まで読んだが、日本の場合は生卵を食すために尋常でない努力があるので安全に生卵を食べれるから、低温殺菌のところはピンときにくい。
    でも俄然興味が湧いてくる。低温調理器具ほしいな。
- date: 2025-02-11
  bookTitle: 家庭の低温調理 完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ 99
  pages: 46 ~ 121
  notes: |
    低温調理にも色々あって、そのもので一品を仕上げるのと、下ごしらえとして施してその後さっと焼き目をつけたりで＋αする方法がある。
    いずれにも同じなのが高温で調理すると実現できない手軽な方法で失敗しないジューシーな食感が得られるところか。
    マスのオイル煮とコンフィは俄然興味あるな。コンフィは Cooking for Geeks に油は熱を伝える以外に関係ないって書いてたし、あれは低温調理ならではの味わいなんやろう。
- date: 2025-02-12
  bookTitle: 家庭の低温調理 完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ 99
  pages: 122 ~ 175
  notes: |
    豚の低温調理で気になるのは菌や寄生虫だが、こういうのは本では直接的に書いてないから低温調理器具の説明書で見るのが良いか。でも 57 ℃あたりが下限になってるし大丈夫そうか。
    肉の調理がこれまででも最長時間ぽいな。実際こんなに調理に時間をかけた経験は発酵以外にない。
    しかしキュアリングソルトが使いにくいからパストラミが作れないのは残念。
    まだ低温調理器具買ってもないけど気持ちだけは高まってきた。
- date: 2025-02-13
  bookTitle: 家庭の低温調理 完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ 99
  pages: 176 ~ 205
  notes: |
    野菜のセルロースを分解するためにほとんどのレシピで 85 ℃。
    根菜の長時間調理だとボツリヌス菌とか大丈夫なんかなと思ったけど、長期保存しないメニューで調理時間もさほど長くないし 85 ℃で調理するから安心なんかな。
    調べると、中心温度 80 ℃で 30 分間の加熱で毒素が失活するというのがあったし。
    パースニップは流石に近所で手に入らんな。万能マッシュルームはめちゃうまそう。
- date: 2025-02-14
  bookTitle: 家庭の低温調理 完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ 99
  pages: 206 ~ 237
  notes: |
    卵を使ったデザートが多いのは、凝固点の 85 ℃に達さずに完璧に卵を調理するには低温調理が向いてるから。
    また風味の抽出に向いてるからアイスクリームに最適と。ただし原液を作るまでが低温調理で以降はマシンなりを使う必要がある。
    個人的には子どもに野菜ペーストを混ぜた団子が好評だったので、レンチンより低温調理の方がカボチャとかの野菜の風味が上がるなら、次作るときに応用できそうで興味あるな。
- date: 2025-02-15
  bookTitle: 家庭の低温調理 完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ 99
  pages: 238 ~ 263
  notes: |
    アルコールを蒸散させることなく適度な温度で砂糖を溶かし風味を抽出するには低温調理が向いていると(この本では 60 ℃)。
    85 ℃以上の調理になるとガラス容器が急な加熱で割れることがあるので、あらかじめ容器を入れるなど徐々に加熱するよう注意が必要。
    カクテルのことを全然知らないので調べたが、ビターズは蒸留酒に様々な材料を漬け込んで作成する苦みと香りが強いアルコール飲料のことで、カクテルに使われることが多いらしい。
    そのビターズやシロップ等を作るのに低温調理が向いているということみたい。
    甘い酒を好まないので 20 年くらいカクテルに触れてない気がするけど、ペニシリンはスコッチベースだしこれは試してもいいかも。
- date: 2025-02-16
  bookTitle: 家庭の低温調理 完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ 99
  pages: 264 ~ 292
  notes: |
    わたしの場合ピクルスは発酵で作るので参考にしないが、コンフィは気になる。また常備菜のように比較的長く保存する場合は塩や発酵に頼らないと食中毒リスクが高まるから中々難しい。
    最後に訳者注。 sous vide(スーヴィード)は真空という意味だが、真空調理より低温調理というのが主流になったのでそう訳したと。ただし「定」温調理の方がいいような気がしてると。
    低温調理ならではの食中毒のリスクを意識しろってのはそうやわなと思った。
    発酵ばかりしてると塩とか酸でリスク低減されるからうっかり忘れがちだが、低温調理の場合それらに頼れない場面もある(肉の調理のところで食感云々があったように)。
    読み終えてみて低温調理は、食材の状態を狙った調理や風味の抽出・浸透に向いてる印象で、かつ温度は自動で管理するから失敗しにくいというのが魅力かと思った。あとは実践するのみかー。
- date: 2025-02-17
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 122 ~ 127
  notes: |
    第 8 章 システムコール、例外、割り込み。
    システムコールは、デバイスへのアクセス要求・メモリ割り当て等で利用される。専用の命令で発生しレベル変更と命令流切替を行う。戻るためにも専用の命令を実行する。
    システムコールの特権レベル(privileded level, 例外レベル exception level とも)には最も制限された user level と広いアクセスが許可された supervisor level(kernel level/OS level とも)、仮想化を支援する hypervisor level 等がある。
    例外は、ゼロ除算やアクセス違反など命令を続行できないケースをハードウェアが検知して発生する。これにより異常が生じてもシステムを健全に保てるようにする。
    割り込みは CPU 外部からの要求をまとめる割り込みコントローラが割り込み要求をして CPU にとって非同期に発生する。
    教科書的に覚えるゾーン。
- date: 2025-02-18
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 127 ~ 132
  notes: |
    第 8 章 システムコール、例外、割り込み。
    これらの挙動は CPU のパイプラインの挙動に似て、事象の発生で命令フェッチが始まる。切替先命令列を handler と呼ぶ。
    handler の先頭アドレスは vector table からロードされ、 PC レジスタに書き込まれ、命令フェッチが始まる。
    命令流の切替は特権レベルも伴い、多くはユーザレベルから上位へ遷移するが、そのままの場合もある。
    これらの処理が終わると元のソフトウェアの命令に戻る。戻り先やレベルは一般的に CPU が自動的に専用のレジスタへ保存する。
    切替後の振る舞いは事象によって異なり、例えば例外では元の命令流をキャンセルする必要があり、割り込みでは要求が受け入れられなかったりする。
    これらは、一般的に分岐予測の対象しない、特権レベルの変更と handler から戻るときに逐次的実行が必要になる(アウトオブオーダー実行できない、パイプラインを空にする(pipeline flush))、 vector table , handler の分岐予測ミス・キャッシュミス・ TLB ミス、といった通常の分岐命令との違いで遅くなる。
    どんだけ遅くなる要素があるねんという気がしてきた...
- date: 2025-02-19
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 133 ~ 140
  notes: |
    第 8 章 システムコール、例外、割り込み。
    頻度が稀であるのと、 CPU 毎による差異、対処にシステムレベルの対応が必要なためソフトウェア的にできることは少ない。
    システムコールの呼出回数を減らすためのバッファリングや一部の命令をユーザーレベルで実行。
    例外では性能課題になりうるページフォールトがあるが、命令流切替と相対して小さいので割り切ってもよい。
    割り込みは発生頻度を抑えることで改善できるが、その場合デバイスの応答性を下げるトレードオフになる。
    最後は実験。ゼロ除算が Linux の場合整数と浮動小数点を SIGFPE 荷集約して区別しない場合があるの初めて知った。
- date: 2025-02-20
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 141 ~ 149
  notes: |
    第 9 章 マルチプロセッサ。
    multiprocessor は 2 つ以上の CPU を持つハードウェア形態。 CPU パイプライン観点では命令流を増やすことで命令流の密度を高める。
    ざっくり様々な形式がある。異種・同種の CPU による構成、 SIMD 型・ MIMD 型、集中共有メモリ型(UMA 型)・分散共有メモリ型(NUMA 型)。
    つまり最近の Ryzen AI 9 HX 370 なんかは異種の構成か。heterogeneous multiprocessor という。
    MIMD(Multiple Instruction stream, Multiple Data stream)型 は各 CPU が個別の命令流を、 SIMD(Single Instruction stream, Multiple Data stream)型は同じ 1 つの命令流を処理する(SIMD 命令とは別)。
    SIMD 型は PC レジスタを共有し命令制御のハードウェアを共通化できるため規則的な大量データ処理に向き、 GPU で使われる。
    共有メモリ型(Shared Memory Architecture)は各 CPU でメモリアドレスを共有する。
    集中 UMA(Uniform Memory Access)と SMP(Symmetric Multiprocessing)はメモリアクセス時間が一定で、分散 NUMA(Non-Uniform Memory Access)はメモリアクセス時間に差が出る。
    メモリアドレスを共有しない構成は、メッセージ交換型(Message Passing System)、私有メモリ型(Private Memory)、 NORMA(NO Remote Memory Access)、分散メモリ(Distributed Memory)型等。
    近年主流の MIMD 型かつ共有メモリ型の採用は、ハードウェアの実装効率や性能向上よりもソフトウェアの実装が容易な構成に寄せてると。なるほどなー、それだけソフトウェア実装も大変なんやろう。
- date: 2025-02-21
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 149 ~ 156
  notes: |
    第 9 章 マルチプロセッサ。
    自動並列化コンパイラは研究されているが、現状では開発者がソフトウェアを並列・並行化しなければマルチプロセッサを活かせない。
    並列化は OpenMP, MPI, oneTBB 等のライブラリ、並行化は pthread(native thread),  goroutine(M:N mapping), Erlang のプロセス(これは何分類？)等。
    各 CPU で動くソフトウェアを「協調」させるために、
    mutex, semaphore, バリア同期、条件変数、 event, signal 等の「タイミング調整(同期)」、
    mailbox, channel, 共有変数等の「データ送受信」のを利用する必要がある。
    プロセッサ的には同期もデータ送受信で実現している。
    共有メモリ型・メッセージ交換型で仕組みが異なり、後者はつまるところ CPU 同士の I/O であり、使い勝手が良い前者の共有メモリを利用する方法が現代では一般的。
    ただし協調のための仕組みがキャッシュコヒーレンス、メモリ順序付け、不可分操作に関係する性能劣化を引き起こす。
    ソフトウェア周りは概ね分かるがバリア同期、条件変数は何のことかわからなかったので宿題。地味に並列化もやったことない。
    いずれにせよ共有メモリ型のプロセッサは代償を払ってるのねというのを知れた。
- date: 2025-02-22
  bookTitle: 世界の作りおき野菜 みんなに愛される味付けの魔法
  pages: 1 ~ 71
  notes: |
    毎年初夏に辣韮を乳酸発酵で漬けるので、それまでに他に何を漬けようかと思ってパラパラと読んだ。
    キャベツや白菜で作るザワークラウトもどきが手軽で定番だが、今とても高いので他の野菜で漬けたいのでアイデアを集めている。
    からし菜・茄子、オクラ、あとイタリア風ピクルスのマッシュルームが気になる。お値段次第で。
    でも生食できるくらい新鮮なマッシュルームてその辺のスーパーで手に入るのかな。
    このままだと無難な玉ねぎになりそうなのでなんかチャレンジしたいな。
- date: 2025-02-23
  bookTitle: 世界の作りおき野菜 みんなに愛される味付けの魔法
  pages: 72 ~ 144
  notes: |
    後半は漬物を利用した料理のレシピか発酵飲料が主なのであくまで参考程度に。
    ニシンはこれハーリングもどきなわけやがやってみたいけど生ニシンが手に入らないからな。
    仮に別の魚で新鮮で冷凍で寄生虫対策してそっから漬け込むとなると試行錯誤のレベル高いな。
    ジンジャービールはノンアルなら日本でも違法じゃないので作れるか。
    ピクルス液のカクテルもちょっと気になるが、スコッチを飲むときにピックルバックはたまにやる乳酸発酵のやつだと塩分やばいので、なかなかな。
    もう一冊くらい発酵関連の書籍を読んでイメージ高める必要がある感じした。
- date: 2025-02-24
  bookTitle: ピクルスと漬物の歴史
  pages: 1 ~ 47
  notes: |
    気候に合わせた塩漬け、酢漬けの使い分けの歴史。アジアの醗酵の歴史。
    ロマンはあるが酢漬けは好かんので今回も発酵塩漬けかな。
    夏の発酵が激しい頃には塩漬けと酢漬けの中間のやつを作っても面白いかもなと思った。
    セロリの浅漬を見て思い出したが、セロリのピクルスは美味い。
    今も比較的安いし。けど産膜酵母が湧くので味が落ちがちなのよな。他の野菜は高い。
    ただキムチの頁を見て、複数の野菜を混ぜて漬けるのもアリかなと思えてきた。安く買える野菜を組み合わせるてはどうか。
- date: 2025-02-25
  bookTitle: ピクルスと漬物の歴史
  pages: 48 ~ 72
  notes: |
    古代エジプトでは煮詰めた海水に鳥を漬けて生食していた。
    トールシという漬物は現代でも見られる素材で作られていた。
    ニンジン・キュウリ・カリフラワー・タマネギ・ピーマン・トウガラシ・オリーブ・カブ。
    モロッコの塩レモン。ギリシア・ローマの魚醤。ブドウ果汁につけるモスタルダ・ディ・フルッタ。
    オリーブのオレウロペインが醗酵を阻害する。オスマン帝国のトールシ。漬け汁の清涼飲料水。
    トールシは参考になった気がする。食感が楽しい野菜にしようか。
- date: 2025-02-26
  bookTitle: ピクルスと漬物の歴史
  pages: 73 ~ 92
  notes: |
    古代メソポタミア・ペルシアからヨーロッパ・北アフリカを経由して北アメリカへ漬物が伝わった。
    ここでもカブが人気。中東は酸味の効いた酢漬けを好む。肉を漬けるのはエジプトでも見られたが虫は中東の特徴的な点か。
    チミチュリは浅漬けなのか...浅漬けもいいよな。
    ただ仕込むアイデアがほしいのは塩野付汁で醗酵させるやつなのでまたの機会。
    トールシのように複数種類漬け込むのが良さそう。スパイスやハーブを入れるかは置いといたとしてて。
