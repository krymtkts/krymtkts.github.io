- date: 2025-03-01
  bookTitle: ピクルスと漬物の歴史
  pages: 127 ~ 133
  notes: |
    南アジアの漬物はイギリス・アメリカといった大西洋の国々に強く影響を与えた。
    インドのアーユルベーダが酸味≒漬物の価値を確立。
    アチャールで特徴的なのはごま油やマスタードオイルで漬ける点。火の代わりに強烈な太陽光で細菌やカビを殺し腐敗を防ぐ。
    チャツネもインドから大西洋を渡った。
    油で漬けるのはちょっと容器的な意味でハードル高いが覚えておく。
- date: 2025-03-02
  bookTitle: ピクルスと漬物の歴史
  pages: 134 ~ 157
  notes: |
    イギリス人は漬物の象徴のような存在だった。
    家庭菜園から保存の必要で始まり、インドとの交易で風変わりな漬物に発展。ゆで卵の酢漬けもこの頃文献に現れる。
    ただ色鮮やかな漬物への愛が銅の添加による緑青中毒にまでつながる。肉・鳥・魚の漬物も積極的に行われた。
    イギリスとチャツネとの出会い、レシピ考案者のメジャー・グレイの名は今も残る。
    そしてウスターソース。タマリンド・アンチョビを樽熟成することで生まれた。
    しかしケチャップははじめきのこの漬物から染み出す茶色い漬け汁キャチャップだった。
    トマトの可能性に気づきトマトケチャップを生んだのはイギリスからの流行を受けたアメリカだった。
    アメリカのピクルスで名を馳せたハインツもトマトケチャップ製造に参入。他にはアメリカ・ルイジアナではタバスコが生まれた。
    歴史としては面白くもっと探求したいが、喫緊の漬物テーマにはちょっとソースの話題過ぎて沿わないかなｗ
- date: 2025-03-03
  bookTitle: ピクルスと漬物の歴史
  pages: 158 ~ 169
  notes: |
    現代の漬物は非醗酵と古き良き醗酵の二手に分かれている。特にアメリカは非醗酵の漬物が市場を占める。
    健康への利点・自然食品の流行で自然醗酵の漬物も再評価されている。
    ピクルス液の飲料やアイスキャンディー、ピックルバックといった新しい使い方も現れた。
    しかし漬物の食べ過ぎが癌のリスクを高めるという報告もある。また塩分過多も問題。
    漬物の、傷みやすい食材を長期保存可能にする自然技術という側面は、食糧問題でも注目されている。
    これで本編は終わり。最後はまとめに入ってきたから漬物アイデアには特になかったが流れは興味深かった。
    醗酵リバイバルの話もあるし、減り続ける「家庭の漬物」を細々と続けるのもいいもんや。
- date: 2025-03-04
  bookTitle: ピクルスと漬物の歴史
  pages: 170 ~ 192
  notes: |
    訳者あとがきにある通り、何か漬けたくなる気持ちは増幅した。読む前から漬けるアイデア探してたのもあって。
    とりあえず今回は茄子・ピーマン・キュウリ・セロリあたりの組み合わせで漬けてみる。ニンニクモ添えて。
    キムチやトールシを見て複数の野菜を混ぜたくなった。ただし味付けは純粋に塩と前の漬け汁。鷹の爪くらいはいれるか？
    あと近い内に塩レモンはいつか漬けてみたい。ノーワックスのレモンを仕入れるしかないよな。
- date: 2025-03-05
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 157 ~ 169
  notes: |
    第 10 章 キャッシュコヒーレンス。
    共有メモリ型のマルチプロセッサシステムで個々の CPU が持つキャッシュに書き込んだ値を適切に他の CPU に伝える仕組みがキャッシュコヒーレンス制御。 coherence とは「最新の値が読み出されること」。
    ハードウェア的に解決する方法としては CPU の状態を除き見する snoop 方式と共通のテーブルで管理する directory 方式がある。プロセッサ数が多いと後者が用いられる傾向があるが 1 回あたりの処理性能は前者が優る。
    スヌープ方式には書き込み時に他のキャッシュを無効化する write invalidate と他のキャッシュにも書き込む write update があり、前者が主流。
    write invalidate の主流プロトコル MSI では無効化されたキャッシュの次に他の CPU のキャッシュを取得するため CPU 間の通信が発生する。
    キャッシュが無効化されることで他の CPU で必ずキャッシュミスを起こす。これを coherence miss という。
    また false sharing と呼ばれる、異なる CPU が同じキャッシュラインを使うことで本来は関係ない箇所でキャッシュミスが発生する問題もある。
    false sharing やばいな...こんなん padding で回避とか？限界がある気がするけど。
- date: 2025-03-06
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 170 ~ 176
  notes: |
    第 10 章 キャッシュコヒーレンス。
    ソフトウェア的には汎用的な対策は難しい。
    送受信の頻度を下げる、キャッシュライン配置の工夫、 write combine, write gather といったハードウェア的な支援、 NUMA 構成のような CPU のグループ内の通信コストが低くなるような構成がある。
    コヒーレンスミスの実験では POSIX thread 間で同一のキャッシュラインに書き込み false sharing を再現。実行する CPU が 1 つの方が速くなる。
    低レベルまで降りないと中々実感で来ないけど恐ろしい話や。
- date: 2025-03-07
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 177 ~ 181
  notes: |
    第 11 章 メモリ順序付け。
    共有メモリ型のマルチプロセッサに於いて、主にメモリアクセスの高速化のために 1 つの CPU から見たメモリアクセスの順序が入れ替わることがある。
    この対象となるのは一般的には異なるアドレスへの複数のメモリアクセスのみ。同一のアドレスの場合はデータ依存関係を壊す可能性があるため。
    メモリアクセス順序の入れ替えを許可する・しない状況は CPU 各社によって違う。 x86 は控えめで Arm RISC-V は積極的。
    メモリアクセスが 1 つの CPU からどう見える化を memory consistency と呼び、いくつかのモデルが定式化されている。
    x86 は Total Store Ordering 、 Arm や RISC-V は release consistency 、他にも sequential consistency 、 weak ordering 等がある。
    実際のところ、各 CPU のメモリアクセス仕様は定式化されたモデルよりも複雑。
    GCC の最適化で命令の並び替えがあったと思うが、アレの CPU 実行時レベルでのやつかな？
- date: 2025-03-08
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 181 ~ 187
  notes: |
    第 11 章 メモリ順序付け。
    メモリアクセス順序が変わるメカニズム。
    バンク構成≒メモリアクセスを同時処理する領域で待ちが発生したとき。
    ストアバッファ(store buffer, store queue, write buffer)の先行処理の滞留。
    先行する処理でキャッシュミス、後続する処理でキャッシュがあるようなとき。
    複数の CPU の組み合わせで異なるメモリアクセス順序になると偶発的なソフトウェアの不具合の原因になる。
    この不具合となり得る状態は非同期なプログラムでもよくあるから感覚はつかめるよな。
- date: 2025-03-09
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 188 ~ 194
  notes: |
    第 11 章 メモリ順序付け。
    メモリ順序付け命令で memory ordering instruction (memory barrier instruction, memory fence instruction とも) で必要な箇所でメモリアクセスの順序を強制する
    双方向(ロードのみ、ストアのみ、全て)・単方向の種類がある。 x86 には単方向がない。
    単方向では acquire release があり、これにより保護したい区間の順序を保持しつつ、区間外からの入れ替えを許容してある程度性能劣化を抑制できる利点がある。
    ただし順序の強制によって入れ替えが抑制され、命令実行の機会を失うことになる。
    はじめの方で学んだ高速化のツケが回ってきてるなという感じがしなくもないが高速化しないと意味ないしなあ。難し。
- date: 2025-03-10
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 195 ~ 202
  notes: |
    第 11 章 メモリ順序付け。
    性能対策が必要な場合はまずソフトウェア的に正しく動作する前提で、 CPU 命令レベルで対処せず、メモリ順序付けを隠蔽するチャネルなどのソフトウェア機構で対処すべき。
    その上で、データ送受信の頻度を下げ CPU 間の送受信を減らす、影響範囲を狭める適切な CPU 命令の選択する。
    また x86 はメモリ順序の入れ替えに慎重なため、ソフトウェアを ARM や RISC-V にポーティングする際には注意が必要。
    最後にメモリ順序入れ替わりの再現。
    Linux Kernel のメモリ順序付けのドキュメントにハードウェア設計者宛の助言(苦言)が書いてるらしいので後で読も。
    いわゆる高級言語を使ってると下位 layer に投げっぱなしで触れることないが知れてよかった。
- date: 2025-03-11
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 203 ~ 221
  notes: |
    第 12 章 不可分操作。
    共有メモリ型のマルチプロセッサでは同一アドレスに対する Read Modify Write で競合が発生、
    カウンタのインクリメントや状態の書き換え等でデータの不整合を引き起こす。
    この競合を避けるために不可分操作、アトミック操作(atomic operation)で複数のメモリ操作を 1 つの操作として扱う。
    不可分操作により、バリア同期(barrier synchronization)、排他制御(mutual exclusion)といった CPU のタイミング調整が可能になる。
    かつての CPU はバスロック方式で実現していたが、現在はキャッシュコヒーレンスプロトコルにより実現されている。
    不可分命令には、交換(swap)・比較付き交換(compare and swap)・演算()・LL/SC(load linked/store conditional) がある。
    このへんは低いレイヤにおける非同期なプログラムの問題そのものという印象。
- date: 2025-03-12
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 221 ~ 230
  notes: |
    第 12 章 不可分操作。
    不可分操作は共有メモリの同一アドレスへのアクセスを逐次化する為遅い。
    また不可分制御はメモリ書き込みを伴うためラインインバリデートが行われ、次の同一アドレスへの不可分制御でコヒーレンスミスが発生し遅くなる。
    さらに不可分制御の多くは占有権などメモリの順序関係が重要なため、メモリ順序付けを伴った命令を提供しており、これも遅い。
    必要な機構なのでソフトウェア的な緩和策は難しいが、不可分操作の頻度を下げる、協調アルゴリズムの選択(Test and test-and-set 、統計カウンタ、 Read Copy Update)、
    適切な不可分命令の利用(といった手段を取れるが、ただし CPU 挙動まで考慮した汎用的対応は非常に難しい。
    あとは不可分操作の再現実験。この本の性能劣化の分類としては最後の章なので全部盛りみたいな END GAME 感あった。
- date: 2025-03-13
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 231 ~ 236
  notes: |
    第 13 章 高速なソフトウェアを書く際には何に注目すべきか。
    ソフトウェア開発において CPU の性能劣化に関して、その発生頻度、損失サイクル、と要因を制御できるかを基準に、著者の主観で分類している。
    発生頻度の高い真のデータ依存関係・分岐命令の予測ミス・キャッシュミスは注目すべきだが、ソフトウェアによって I/O やシステムコールの頻度も重要になる。
    プログラミング言語によっては VM を介すものなど低レイヤの制御が難しいが、キャッシュミスに対してはデータ構造の設計次第で改善できる可能性がある。
    最後に著者の主観での優先順位付けで終わる。
    この章の取れる手段はソフトウェア開発で並列処理や最適なアルゴリズム・メモリ構造を選択していればある程度カバーできそう。ただ真のデータ依存関係は低レイヤまで見えるようにならないと難しそう。
    あと付録 B 以外読んだら終わり。
- date: 2025-03-14
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 237 ~ 246
  notes: |
    付録 A CPU についてさらに広く深く知るには。
    書籍・論文・特許・ オープンソースハードウェア・講義資料・特定の CPU の資料などを利用できる。
    書籍でいうと、パタヘネが入門、ヘネパタが中級。オープンソースソフトウェアだと RISC-V 。
    ヘネパタは積んだまま読めてないけどアレで中級か...とりあえずこの本で多少ハードル下がった気はする。
- date: 2025-03-15
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 257 ~ 262
  notes: |
    付録 C 現代的な CPU の実装例(BOOM)。
    現代的な CPU 実装例として RISC-V 実装の BOOM(Berkley Out-of-Order Machine)。
    最新版 BOOMv3 は MIPS 社 R10000 や DEC 社 Alpha 21264 の影響を受けてる。
    命令デコードが 4 、命令実行が 8(浮動小数点 2 、整数 4 、メモリアクセス 2) の並列度を持ち、アウトオブオーダー実行した結果をライトバックステージで並べ直す。
    ハードウェア記述言語を使わず Scala の Chisel で記述されているらしいので読んでみるのも良さそう。
- date: 2025-03-16
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 263 ~ 268
  notes: |
    付録 D マイクロオペレーション方式とその命令レイテンシ。
    CISC 系のように一つの命令をハードウェアの都合の良いように複数の命令ステージに分割するものをマイクロオペレーション方式という。
    分割した各々の命令を都合の良いタイミングで実行することを個別発行制御という。
    命令が分割されることで、パイプラインの資源不足やデータ依存関係によりレイテンシの揺れがある。
    そもそも分割された命令は真のデータ依存関係を有するため、レイテンシが短くなることはない。
    こういった複雑な命令体系に対して、 RISC 系ではシンプルな命令体系を採用していると。
    人間の把握しやすいレベルにシンプル化しないと高速化もままならんということかな。
- date: 2025-03-17
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 269 ~ 273
  notes: |
    付録 E GPU およびベクトル方式におけるパイプラインの高密度化の工夫。
    GPU とスパコンのベクトル方式では SIMD 型の命令を採用している。いずれも真のデータ依存関係による機会損失は避けられない。
    GPU では空いた機会を細粒度マルチスレッド(Fine-Grained MultiThreading)で埋めることで高速化している。
    ベクトル方式では空いた機会を同一ベクトル内の他の要素で埋めることで高速化している。
    ループアンローリング最適化で必要な多数のレジスタをベクトルの要素数を増やすことで克服したとも考えることができる。
    GPU は CPU より更によく知らんので勉強になるわ。
- date: 2025-03-18
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 274 ~ 280
  notes: |
    付録 F CPU の性能向上の物理的な難しさ。
    1 つのステージは flip-flop で囲まれた論理ゲートで作り込まれるが、 CPU の動作周期から定まるクロックサイクル内に収まるよう、利用できる論理ゲートの数に制限がある。
    また製造品質のばらつきや実行環境の変化に対応させるためにクロックサイクル丸ごとを論理ゲートに費やせない。
    また論理ゲート自体にも制限がある。大きな論理ゲート、多くの論理ゲート、遠くの論理ゲートへの信号は遅くなる等。
    論理ゲートより下位だと電子レベルの特性で遅くなるなど。
    知らないことだらけだが物理的な影響がこう繋がってくるねんなという感想。
- date: 2025-03-19
  bookTitle: プログラマーのための CPU 入門 CPU は如何にしてソフトウェアを高速に実行するか
  pages: 281 ~ 300
  notes: |
    あとがき、参考文献、索引など。
    情報処理技術者試験レベルしか把握してなかったから CPU に対する解像度が上がり、以前の何も知らなかった頃には戻れなくなった感じがする。
    この流れでパタヘネ、ヘネパタも読めればよいが。
    あとがきに出てくるラム社の本はいくつか読んだし改めて読み直すもよいか。
- date: 2025-03-20
  bookTitle: 魏武注孫子
  pages: 202 ~ 204
  notes: |
    実に 2 ヶ月ぶりだが、やっと再開。
    九地篇 第十一。
    「率然」常山の蛇「率然」は攻撃に臨機応変に反撃してくる恐ろしい蛇で、軍もそのように臨機応変でなければならないとする。
    そのためには九地の理法(重地に赴き死地とする)によって軍を一体にすること重要とする。
    デスマのプロジェクトルームの一体感みたいなやつか。常用できるものではないから注意も必要か。
- date: 2025-03-21
  bookTitle: 魏武注孫子
  pages: 204 ~ 207
  notes: |
    九地篇 第十一。
    「将軍の職務」兵を他国深く難しい戦いの地に進めるのが将の職務であり、そのために将は平生で軍事を兵に知らせず一心に進軍させる。
    「九地の変」先に挙げた九地の戦い方が正でここでは変について説く。
    散地で戦い、軽地では連携して行軍し、争地で敢えて敵より遅れ、交地で守備を固める。
    衢地・重地・圮地・囲地・死地は正の戦い方とそれほど違いはないように見えたが、変だとすれば状況に応じて敵の意表をつくことが意識されているのかも読み取れないだけで。
