- date: 2025-09-01
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 173 ~ 183
  notes: |
    第 8 章 プログラマーの性格。
    性格には変化する部分と不変の部分がある。
    性格の変化に関し、外面的な変化だけで問題を特定せず、得られる限りの情報を得るのが問題にうまく対処できる可能性を高める。健康状態や私生活の悪化が性格の悪い変化を起こしているかも知れない。
    外面を取繕っていたり、権威に弱い人が相手によって性格を変える場合もあるため、性格の内面を推測することには慎重に。
    性格の不変の部分と要求される特性とのギャップが強いストレスを引き起こすこともある。例えばテスターは信じ深い性格だったとしても疑り深くある必要がある。非難に「順応」するよう追い込まれないように、役割を持ち回るような運用が必要となる。
    プログラマーとして失敗しないタイプの性格特性としては、ストレス耐性、変化への適応、几帳面さ、謙虚、自信、ユーモアのセンス、が挙げられる。
    個人的に、ストレス耐性と変化への適応は同じ要素かな。変化のストレスに耐えられる容量がないと常に変化し続けられない。
- date: 2025-09-02
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 183 ~ 190
  notes: |
    第 8 章 プログラマーの性格。
    本書が書かれた当時はプログラマを選別する性格テストに最適なものはなかったといえるようだ。
    唯一「プログラミングが好きか」という問いだけ。
    25 年後の振り返りでは MBTI(Myers-Briggs Type Indicator)が有用であると触れられている。 16 Personalities のやつか。
    性格テストは偽装することができるので注意が必要だが、偽装するだけの能力があるということは向いているというのは面白いな。
    SPI も同じ印象。転職に慣れてると出がらしの問題ばかりで高得点になるし、性格特性の調整もお手の物やからな。
- date: 2025-09-03
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 191 ~ 200
  notes: |
    第 9 章 知能―問題解決の能力。
    プログラミングに影響する知能とはなにか。
    心理的「構え」がある種の間違いを引き起こす。それは誤字・ leet のような判別しにくい記号の利用・間違ったコメントなどからコード読解の誤りにつながる。
    正しく問題解決の知能を測るには問題回避についても同様の測定が必要だが、起こっていない現象を評価するのが難しい。他に記憶力。
    「構え」は認知バイアスのことみたい。
    昔 4GL のエディタがフォント変えれなくて本書に書いてるような `0` と `O` の間違いをしてバカにされたのを思い出したわ。そういう「気を付ける」問題じゃないねんよな。
    今は気合で認知バイアスを回避するような時代ではないから、どう誤りうるかを知り、フォント変える等の誤りが発生しにくい習慣を身につける方が重要やろうな。
- date: 2025-09-04
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 202 ~ 212
  notes: |
    第 9 章 知能―問題解決の能力。
    プログラミングに必要な知能を測る適性検査(PAT)とその効果がないことについて。
    振り返りによれば本書のレビュワに適性検査の事業に関わる人がいたため出版社を満足させるために適性検査について書いたらしい。
    現代であればはコーディングテストやディスカッションがプログラマを「オーディション」する術になるのかな。
    とはいえわたしはそれらも苦手で嫌いだし、何より値踏みされるのが嫌なので、なるべくそういうのに関わらずに生きたい。
- date: 2025-09-05
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 213 ~ 227
  notes: |
    第 10 章 動機づけ・訓練・経験。
    すべての訓練・経験の要素を計測に含んでもプログラマの成績を説明できない部分が動機づけ。
    動機づけが過剰すぎてもプレッシャーとなっていけない。金銭などの外的動機づけよりプログラマーの好きにやらせる内的動機づけの重要性。
    教育は一般原則とスキルを身につけるため、訓練は具体的なスキルを身につけるためだが、訓練を前提にしないと教育できないものもある。
    学習を妨げる力。失敗を見られることを恐れる。「行き止まり手法」に固執して新しいものに対する恐怖。弱さを認められない。
    動機づけはスパエンへの道で十二分に見たので、本書の初期の動機づけに関するアイディアからは目新しく得るものはないかな。
- date: 2025-09-06
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 227 ~ 236
  notes: |
    第 10 章 動機づけ・訓練・経験。
    プログラミング学習における独学。自分の好みの学習スタイルを知っている人は稀である。
    独学においては計算機が提供するエラーなどの情報を余すことなく利用することが必要となる。
    また業務においては実務を優先するだけでなく学習で得た見識を反映していくバランスが重要。
    思うに、昔であればマニュアルから学ぶしかなかったが、今は計算機が身近になり、エディタのサジェストや AI を教師にすることで独学を追求する術が増えている。
    となればあとは本書でも触れられている自身の動機づけと学習スタイルの理解さえあれば、効果的に独習できる。
    時代の移り変わりの影響が大きい部分だし、著者は既に亡くなられているので実現しないが、 50 周年記念版の振り返りも見てみたかったな。
- date: 2025-09-07
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 237 ~ 240
  notes: |
    第 Ⅳ 部 プログラミングの道具。
    腕の良い職人でも欠陥があったり悪い道具を使うと二流の仕事しかできず職人も二流になる。
    プログラミングでも同様に言語のような道具を正しく利用することで良い仕事ができる。
    個人的に、この話題が出ると必ず弘法大師も実際には筆を選んでいた話をするが、案外伝わらない。それ以前に仕事で関わるプログラマには道具の特性を意識しない人も多い。
    仕事ではプログラミング言語等の技術スタックを選べないこともままあるが、道具の欠点を知っていれば後付のツールで補完できることもある。当然道具自身の特性をカバーするのは楽ではないけど。
- date: 2025-09-08
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 241 ~ 254
  notes: |
    第 11 章 プログラミング言語。
    心理学的な意味で人間向けに設計されていないプログラミング言語が人間と機械のコミュニケーションエラーを引き起こすというような内容。
    あと習得済み言語のサンクコストが新しい言語へ移行する心理的なハードルになるという話。
    なんとなくだが、本書の執筆当時だと機械語・アセンブリ・原初の高級言語という感じだったので、自然言語でプログラミングすることへの憧れがあったのではないかな。
    生成 AI が自然言語を受けて代わりにプログラミングする時代になって、文字通り自然言語でプログラミングする時代になってきているが、自然言語のような曖昧化しやすい言語でプログラミングするのにどうにも違和感がある。
    具体的な指示を詳しく自然言語で書くより、形式化された DSL としてのプログラミング言語を利用することの方が効率的でない？
    逆パターンもある。今多くのプログラマは AI に書き散らしてもらった大量のコードをレビューしてるけど、自然言語だと中々レビューも難しいんじゃないかな？どうだろう。
    達人が道具を選ぶ際に汎用的な道具を選ばずに特化した道具を使うのと同じ気がするのだけど、わたしの先見性がないだけなのかな。
- date: 2025-09-09
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 255 ~ 263
  notes: |
    第 12 章 プログラミング言語の設計原則。
    統一性がある構文でなければ、ヒトは例外パターンを記憶しきれず自分の能力に不安を感じる。
    その心理的曖昧さのため、探索的にいろんな機能を使えなくなり、過剰なカッコを使う等の防御的な行動を起こす。
    ただし統一性に関する責任の多くはプログラマー個人の仕事(名付けやスタイルの非統一性)にある。
    この章の話題はプログラマー脳で触れられていたものと同じか。
    やろうと思えば構文ルールの統一性は何らかのメタな検査器で検査しうるだろうけど、名付けの統一性を測る術はプ脳でも命名の雛形を作るとかのヒトの頑張り次第な印象だった。
    人がプログラミングし続ける限りずっと付きまとう課題なんやろな。
- date: 2025-09-10
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 263 ~ 273
  notes: |
    第 12 章 プログラミング言語の設計原則。
    チャンキングによってプログラミングの理解をコンパクトにできる。これはデータ構造を定義して使うこと等でも同様。
    プログラムの局所性・線形性はヒトの記憶でいう共感覚記憶・逐次記憶に対応する。
    局所性を高めることはコードそのものの理解を助け、線形性を高めることは順序立てた処理の理解を助ける。
    やっぱプ脳と重なる分野の話。共感覚記憶・逐次記憶は触れられてなかった記憶だが。
    時代を考えると相当進んでるな。
- date: 2025-09-11
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 273 ~ 288
  notes: |
    第 12 章 プログラミング言語の設計原則。
    執筆当時はプログラミング言語が自然言語らしければ良いという考えだったみたい。
    言語のターゲットに利用者の思考が捕われると多言語への移行が難しくなるというのは思考の硬直化みたいな感じ。
    振り返りにも反省らしきことが書いてるがこの章は所謂「ぼくのかんがえたさいきょうの言語」なんやろな。
    そのせいか、プ脳にもあるような心理学的観点をプログラミングに持ち込むのは興味があるけど、なんかこの章はおもんなかった。
- date: 2025-09-12
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 289 ~ 295
  notes: |
    第 13 章 他のプログラミングの道具。
    プログラムテストツールが、自信過剰なコードを信頼してしまうとか見当違いの所でバグを探しまうとかの心理的偏り外すをサポートをするのではないかという話。
    これはもう時代的に静的解析も進んでるし TDD なり自動テストが普通だし何なら PBT のような人間の心理的な偏りの関わらないテスト手法があるようになった。
    ただ現代を見ていると、そういった品質向上の一般的な手法だとかを導入することをチームと文化が許容できるかどうかというところが、問題なんやろな。
    普遍的な話じゃなくツールの話なので、時代のギャップが特に大きくちょっと読むのが退屈。飽き気味なので早く最後まで読み終えてしまいたい。
- date: 2025-09-13
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 295 ~ 307
  notes: |
    第 13 章 他のプログラミングの道具。
    オペレーティングシステム・タイムシェアリングシステムの仕組みによって生じる作業負荷・心理的負荷について。
    OS 付きのデバッガて gdb みたいな話か？ほぼ使わずに来た。今どきは言語のデバッガを使うことが多かろうが 10 年近く使ってないのでよくわからない。
    個人的にログや REPL しか見てないのだけど、これも立場は言語側かな。
    今の時代は一度コンパイルエラーすると再試行の順番待ちに何日もかかるようなことはないし、この章で想定された負荷はかなり低かろうな。
    逆に大規模なシステムでログを適切に出力していなくて、エラー発生時に即座に原因特定できず、取り敢えずログを増やして時間だけ過ぎてしまうというのは何度か見た。
    そういう意味では開発の負荷は下がって運用の負荷が上がってるのかも知れんな。
- date: 2025-09-14
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 307 ~ 322
  notes: |
    第 13 章 他のプログラミングの道具。
    ドキュメンテーション。
    若干何のためのドキュメントが曖昧にしたまま文句をつけている風に見えるが、ドキュメンテーションがプログラミングのコストでないという考えがあるのは現代も変わらないな。
    プロンプトを通じて AI と協業するようになり文書が人間だけのものでなくなったことで重要さが増しており、その結果誰のためのドキュメントかを考えて書き分ける必要が出てきているのが難しいところだと感じている。
    AI に生成させるのも、コードから設計書を出すような自動化も同様。生成したドキュメントを人間の手で仕上げる状況が現状かなと。
    振り返りの時点でも開発ツールの普及が課題であったようだけど、現状もあまり変わりない。
    また AI agent にめちゃくちゃにさせないための開発ツールによるガードレールの役割が必須となり、まだまだツール類は発展の途上なんやろなと。
    筆者とわたしで意見が異なるのは、こういうツールを多数用意しないためにより強い言語を使うべきという考えかな。
- date: 2025-09-15
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 323 ~ 327
  notes: |
    第 V 部 エピローグ。
    本書を読み終えた読者は行動観察のきっかけを得ている。コンピュータの黄金時代が人間にとって価値があるものになるよう努力し続けることを願う、という締め。
    本書はこれで終わり。あとは細かい参考文献の紹介を読むのと解説もどきの解説者持論。
    50 周年記念版が実現しないのは実に残念やな。 AI 時代のプログラミングを見たらさぞ思うところがあったろうに。
