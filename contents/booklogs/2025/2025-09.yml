- date: 2025-09-01
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 173 ~ 183
  notes: |
    第 8 章 プログラマーの性格。
    性格には変化する部分と不変の部分がある。
    性格の変化に関し、外面的な変化だけで問題を特定せず、得られる限りの情報を得るのが問題にうまく対処できる可能性を高める。健康状態や私生活の悪化が性格の悪い変化を起こしているかも知れない。
    外面を取繕っていたり、権威に弱い人が相手によって性格を変える場合もあるため、性格の内面を推測することには慎重に。
    性格の不変の部分と要求される特性とのギャップが強いストレスを引き起こすこともある。例えばテスターは信じ深い性格だったとしても疑り深くある必要がある。非難に「順応」するよう追い込まれないように、役割を持ち回るような運用が必要となる。
    プログラマーとして失敗しないタイプの性格特性としては、ストレス耐性、変化への適応、几帳面さ、謙虚、自信、ユーモアのセンス、が挙げられる。
    個人的に、ストレス耐性と変化への適応は同じ要素かな。変化のストレスに耐えられる容量がないと常に変化し続けられない。
- date: 2025-09-02
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 183 ~ 190
  notes: |
    第 8 章 プログラマーの性格。
    本書が書かれた当時はプログラマを選別する性格テストに最適なものはなかったといえるようだ。
    唯一「プログラミングが好きか」という問いだけ。
    25 年後の振り返りでは MBTI(Myers-Briggs Type Indicator)が有用であると触れられている。 16 Personalities のやつか。
    性格テストは偽装することができるので注意が必要だが、偽装するだけの能力があるということは向いているというのは面白いな。
    SPI も同じ印象。転職に慣れてると出がらしの問題ばかりで高得点になるし、性格特性の調整もお手の物やからな。
- date: 2025-09-03
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 191 ~ 200
  notes: |
    第 9 章 知能―問題解決の能力。
    プログラミングに影響する知能とはなにか。
    心理的「構え」がある種の間違いを引き起こす。それは誤字・ leet のような判別しにくい記号の利用・間違ったコメントなどからコード読解の誤りにつながる。
    正しく問題解決の知能を測るには問題回避についても同様の測定が必要だが、起こっていない現象を評価するのが難しい。他に記憶力。
    「構え」は認知バイアスのことみたい。
    昔 4GL のエディタがフォント変えれなくて本書に書いてるような `0` と `O` の間違いをしてバカにされたのを思い出したわ。そういう「気を付ける」問題じゃないねんよな。
    今は気合で認知バイアスを回避するような時代ではないから、どう誤りうるかを知り、フォント変える等の誤りが発生しにくい習慣を身につける方が重要やろうな。
- date: 2025-09-04
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 202 ~ 212
  notes: |
    第 9 章 知能―問題解決の能力。
    プログラミングに必要な知能を測る適性検査(PAT)とその効果がないことについて。
    振り返りによれば本書のレビュワに適性検査の事業に関わる人がいたため出版社を満足させるために適性検査について書いたらしい。
    現代であればはコーディングテストやディスカッションがプログラマを「オーディション」する術になるのかな。
    とはいえわたしはそれらも苦手で嫌いだし、何より値踏みされるのが嫌なので、なるべくそういうのに関わらずに生きたい。
- date: 2025-09-05
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 213 ~ 227
  notes: |
    第 10 章 動機づけ・訓練・経験。
    すべての訓練・経験の要素を計測に含んでもプログラマの成績を説明できない部分が動機づけ。
    動機づけが過剰すぎてもプレッシャーとなっていけない。金銭などの外的動機づけよりプログラマーの好きにやらせる内的動機づけの重要性。
    教育は一般原則とスキルを身につけるため、訓練は具体的なスキルを身につけるためだが、訓練を前提にしないと教育できないものもある。
    学習を妨げる力。失敗を見られることを恐れる。「行き止まり手法」に固執して新しいものに対する恐怖。弱さを認められない。
    動機づけはスパエンへの道で十二分に見たので、本書の初期の動機づけに関するアイディアからは目新しく得るものはないかな。
- date: 2025-09-06
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 227 ~ 236
  notes: |
    第 10 章 動機づけ・訓練・経験。
    プログラミング学習における独学。自分の好みの学習スタイルを知っている人は稀である。
    独学においては計算機が提供するエラーなどの情報を余すことなく利用することが必要となる。
    また業務においては実務を優先するだけでなく学習で得た見識を反映していくバランスが重要。
    思うに、昔であればマニュアルから学ぶしかなかったが、今は計算機が身近になり、エディタのサジェストや AI を教師にすることで独学を追求する術が増えている。
    となればあとは本書でも触れられている自身の動機づけと学習スタイルの理解さえあれば、効果的に独習できる。
    時代の移り変わりの影響が大きい部分だし、著者は既に亡くなられているので実現しないが、 50 周年記念版の振り返りも見てみたかったな。
- date: 2025-09-07
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 237 ~ 240
  notes: |
    第 Ⅳ 部 プログラミングの道具。
    腕の良い職人でも欠陥があったり悪い道具を使うと二流の仕事しかできず職人も二流になる。
    プログラミングでも同様に言語のような道具を正しく利用することで良い仕事ができる。
    個人的に、この話題が出ると必ず弘法大師も実際には筆を選んでいた話をするが、案外伝わらない。それ以前に仕事で関わるプログラマには道具の特性を意識しない人も多い。
    仕事ではプログラミング言語等の技術スタックを選べないこともままあるが、道具の欠点を知っていれば後付のツールで補完できることもある。当然道具自身の特性をカバーするのは楽ではないけど。
- date: 2025-09-08
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 241 ~ 254
  notes: |
    第 11 章 プログラミング言語。
    心理学的な意味で人間向けに設計されていないプログラミング言語が人間と機械のコミュニケーションエラーを引き起こすというような内容。
    あと習得済み言語のサンクコストが新しい言語へ移行する心理的なハードルになるという話。
    なんとなくだが、本書の執筆当時だと機械語・アセンブリ・原初の高級言語という感じだったので、自然言語でプログラミングすることへの憧れがあったのではないかな。
    生成 AI が自然言語を受けて代わりにプログラミングする時代になって、文字通り自然言語でプログラミングする時代になってきているが、自然言語のような曖昧化しやすい言語でプログラミングするのにどうにも違和感がある。
    具体的な指示を詳しく自然言語で書くより、形式化された DSL としてのプログラミング言語を利用することの方が効率的でない？
    逆パターンもある。今多くのプログラマは AI に書き散らしてもらった大量のコードをレビューしてるけど、自然言語だと中々レビューも難しいんじゃないかな？どうだろう。
    達人が道具を選ぶ際に汎用的な道具を選ばずに特化した道具を使うのと同じ気がするのだけど、わたしの先見性がないだけなのかな。
- date: 2025-09-09
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 255 ~ 263
  notes: |
    第 12 章 プログラミング言語の設計原則。
    統一性がある構文でなければ、ヒトは例外パターンを記憶しきれず自分の能力に不安を感じる。
    その心理的曖昧さのため、探索的にいろんな機能を使えなくなり、過剰なカッコを使う等の防御的な行動を起こす。
    ただし統一性に関する責任の多くはプログラマー個人の仕事(名付けやスタイルの非統一性)にある。
    この章の話題はプログラマー脳で触れられていたものと同じか。
    やろうと思えば構文ルールの統一性は何らかのメタな検査器で検査しうるだろうけど、名付けの統一性を測る術はプ脳でも命名の雛形を作るとかのヒトの頑張り次第な印象だった。
    人がプログラミングし続ける限りずっと付きまとう課題なんやろな。
- date: 2025-09-10
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 263 ~ 273
  notes: |
    第 12 章 プログラミング言語の設計原則。
    チャンキングによってプログラミングの理解をコンパクトにできる。これはデータ構造を定義して使うこと等でも同様。
    プログラムの局所性・線形性はヒトの記憶でいう共感覚記憶・逐次記憶に対応する。
    局所性を高めることはコードそのものの理解を助け、線形性を高めることは順序立てた処理の理解を助ける。
    やっぱプ脳と重なる分野の話。共感覚記憶・逐次記憶は触れられてなかった記憶だが。
    時代を考えると相当進んでるな。
- date: 2025-09-11
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 273 ~ 288
  notes: |
    第 12 章 プログラミング言語の設計原則。
    執筆当時はプログラミング言語が自然言語らしければ良いという考えだったみたい。
    言語のターゲットに利用者の思考が捕われると多言語への移行が難しくなるというのは思考の硬直化みたいな感じ。
    振り返りにも反省らしきことが書いてるがこの章は所謂「ぼくのかんがえたさいきょうの言語」なんやろな。
    そのせいか、プ脳にもあるような心理学的観点をプログラミングに持ち込むのは興味があるけど、なんかこの章はおもんなかった。
- date: 2025-09-12
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 289 ~ 295
  notes: |
    第 13 章 他のプログラミングの道具。
    プログラムテストツールが、自信過剰なコードを信頼してしまうとか見当違いの所でバグを探しまうとかの心理的偏り外すをサポートをするのではないかという話。
    これはもう時代的に静的解析も進んでるし TDD なり自動テストが普通だし何なら PBT のような人間の心理的な偏りの関わらないテスト手法があるようになった。
    ただ現代を見ていると、そういった品質向上の一般的な手法だとかを導入することをチームと文化が許容できるかどうかというところが、問題なんやろな。
    普遍的な話じゃなくツールの話なので、時代のギャップが特に大きくちょっと読むのが退屈。飽き気味なので早く最後まで読み終えてしまいたい。
- date: 2025-09-13
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 295 ~ 307
  notes: |
    第 13 章 他のプログラミングの道具。
    オペレーティングシステム・タイムシェアリングシステムの仕組みによって生じる作業負荷・心理的負荷について。
    OS 付きのデバッガて gdb みたいな話か？ほぼ使わずに来た。今どきは言語のデバッガを使うことが多かろうが 10 年近く使ってないのでよくわからない。
    個人的にログや REPL しか見てないのだけど、これも立場は言語側かな。
    今の時代は一度コンパイルエラーすると再試行の順番待ちに何日もかかるようなことはないし、この章で想定された負荷はかなり低かろうな。
    逆に大規模なシステムでログを適切に出力していなくて、エラー発生時に即座に原因特定できず、取り敢えずログを増やして時間だけ過ぎてしまうというのは何度か見た。
    そういう意味では開発の負荷は下がって運用の負荷が上がってるのかも知れんな。
- date: 2025-09-14
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 307 ~ 322
  notes: |
    第 13 章 他のプログラミングの道具。
    ドキュメンテーション。
    若干何のためのドキュメントが曖昧にしたまま文句をつけている風に見えるが、ドキュメンテーションがプログラミングのコストでないという考えがあるのは現代も変わらないな。
    プロンプトを通じて AI と協業するようになり文書が人間だけのものでなくなったことで重要さが増しており、その結果誰のためのドキュメントかを考えて書き分ける必要が出てきているのが難しいところだと感じている。
    AI に生成させるのも、コードから設計書を出すような自動化も同様。生成したドキュメントを人間の手で仕上げる状況が現状かなと。
    振り返りの時点でも開発ツールの普及が課題であったようだけど、現状もあまり変わりない。
    また AI agent にめちゃくちゃにさせないための開発ツールによるガードレールの役割が必須となり、まだまだツール類は発展の途上なんやろなと。
    筆者とわたしで意見が異なるのは、こういうツールを多数用意しないためにより強い言語を使うべきという考えかな。
- date: 2025-09-15
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 323 ~ 327
  notes: |
    第 V 部 エピローグ。
    本書を読み終えた読者は行動観察のきっかけを得ている。コンピュータの黄金時代が人間にとって価値があるものになるよう努力し続けることを願う、という締め。
    本書はこれで終わり。あとは細かい参考文献の紹介を読むのと解説もどきの解説者持論。
    50 周年記念版が実現しないのは実に残念やな。 AI 時代のプログラミングを見たらさぞ思うところがあったろうに。
- date: 2025-09-16
  bookTitle: プログラミングの心理学 25 周年記念版
  pages: 328 ~ 358
  notes: |
    参考文献と解説。
    参考文献の多くは日本語で読めないし年代から現代の状況と合わない可能性も高いが、どういった分野を調べれば良いか AI に聞いたり道筋を立てるのには十分意味がありそう。
    解説は独自のまとめブログな感じで、最後に付け加えた用語集のような時代背景を補完するようなものだけに絞ればよかったのに、解説じゃないから本書をより深く理解するのには一切役立たない。
    参考文献で一箇所だけ第四世代言語の文献があったが、人間中心の言語を目指した多くが消え去ったのを考えると筋は良くなかったのだろうなと。
    実際 2000 年代に少し関わったが言語の表現力が低くてきつかった。
- date: 2025-09-17
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: i ~ xx
  notes: |
    まえがきと目次。
    本書ではシステムの仕事の社会学的な側面を考察する。
    目次を見るに、人・環境・チームみたいな軸の話みたい。
    解説もつまみ読みしたがちゃんと解説していて良い。
    版を重ねるごとに内容も増えていて、第 3 版が 2013 。あと数年で 4 版が出てもいい頃合いか。
    本書ではウェアじゃなくてウエアが正式名称なのでそれに倣う。
- date: 2025-09-18
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 1 ~ 20
  notes: |
    第Ⅰ部 人材を活用する。部品と違って交換不能な人的資源の扱い方について。
    第 1 ~ 3 章。
    ピープルウエアプロジェクトの調査対象のプロジェクトの 15% 、大規模プロジェクトだと 25% が完成しなかった。
    いずれも失敗の原因を技術的要因と片付け、人に関する問題を軽視していた。マネージャーの多くはこういった人の問題に対処するすべを学んでいない。
    システム開発のプロジェクトのように頭脳的な労働はチーズバーガー生産販売哲学のように何も考えずにとにかくマニュアル通り手を動かして解決できるものではない。
    メンバーの個性を活かす・チームの結束を高めたり考える時間を確保する必要がある。
    人の創造性を活かして生産性を生むのでなく、人から生産性を搾り取る方法だと、過度の残業からワーカホリックにつながり、プロジェクトを追えた暁にはメンバの離脱という付けを払うことになる。
    平均的なソフトウェア開発者は読書しない、ってのも含め今も変わらないことが散りばめられてるな。時代を超えて変わってないのが笑える。
    これは面白くて良いわ。
- date: 2025-09-19
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 21 ~ 38
  notes: |
    第 4 ~ 6 章。
    提供する品質を顧客の要求レベルに応じて下げることがヤル気を削ぐ要因になる。
    パーキンソンの法則に従ってスケジュールを切り詰めるといった誤った目標設定はヤル気を削ぎ生産性を下げる。
    生産性を渇望するあまり証拠に基づかない手法に飛びつくのはマネージャの仕事ではない。やるべきなのはメンバーを働く気にさせること。
    日本が高品質で生産性が高いって話が載ってるが、わたしの 2000 年代の SES 経験では全くそんなことはなかったな。 20 年近く空いてるから時代が違うのかな。
    無茶なスケジュールで走るより目標を設定しない方が生産性が高いというのは、経験上メンバーに自律性がないと上手くいかないけど、同意できる。
- date: 2025-09-20
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 39 ~ 56
  notes: |
    第Ⅱ部 オフィス環境と生産性。
    第 7 ~ 8 章。
    環境がプログラマーの作業効率に与える影響について。
    集中を途切れさせて作業を中断しうる要素が作業効率を下げる。
    往々にしてマネージャーは環境の改善に無頓着。
    プログラマー個人の能力差より、良い環境を提供する文化に属していることが、生産性の高さにつながる可能性がある。
    リモートワークで快適な作業環境を得るまでは、洒落たフリーアドレス、電話当番兼務、折りたたみ机とパイプ椅子、と色々体験してきた。
    その経験から、リモートワークは緊急対応や密なコラボのような祭りには向かないけど、平常時の作業効率は段違いに高くできると実感している。
- date: 2025-09-21
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 57 ~ 77
  notes: |
    第 9 ~ 10 章。
    オフィス投資をケチって開放型オフィスにプログラマーを鮨詰めにすると、騒音レベルが上昇し、作業能率を著しく阻害する。
    環境と作業能率の関係に気づかないのは、そもそも真面目に計測したことがないから。
    フロー状態≒頭脳労働時間を計測することが重要。割り込みのない時間の係数を求めることで、環境を評価できる。
    また頭脳労働時間でなく勤務時間≒肉体労働時間でプロジェクト進捗を分析した場合、それは意味のない危険なものになる。
    時代の変化もあろうけど、なんとなく目的なしに異種交流を狙った開放型オフィスや出社強制が多い。
    本当に集中すべき時とイノベーションにつなげたい時を区別するのに難あるのかな。
- date: 2025-09-22
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 78 ~ 91
  notes: |
    第 11 ~ 12 章。
    中断の最も多い理由は電話。メールなら受信側がいつ見るか選べるが、反面メッセージがいつ伝わるかという点で信頼性に劣る。
    ケチって開放型のオフィスにしたとか見せかけの活気を求めて BGM を流すとかの画一的なオフィスよりも、目的ごとに区画が分かれたオフィスの方が良い意味で独創的なアイディアがでるだろう。
    人それぞれ快適なオフィスが違うのだから、好きにさせておくのがマネージャの仕事。
    現代なら電話以外にも音声チャットやビデオチャットというところか。
    わたしは音声通話も mention も自分のタイミングでしか応答しない(というかミュートしてて気づかない)ので表明しててかつ許されてる方なのだろうな。
- date: 2025-09-23
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 92 ~ 104
  notes: |
    第 13 章。
    活気のあふれるオフィスを作る手段として、アレグザンダーのパターンに基づく手段がある。
    本書では基本のパターンを補うオフィス設計の 4 つの失敗を是正するパターンを提案する。
    過度の個室を避ける・窓を多くする・屋内と屋外スペースの調和・共有スペースといった具合に。
    画一的なオフィスから抜け出して、個性的なオフィスを作ることが活力につながりプロジェクト成功の可能性を高める。
    本書で言うようなうまく設計されたオフィスで働いたことがないのでなんとも実感がわかない。
    ただ画一的で窓がなくてしかも天井が低くトイレも少ない現代的なオフィスは経験がある。
    すし詰めでかなり苦しかったので、そこを抜け出すのは妥当な気がする。
- date: 2025-09-24
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 105 ~ 117
  notes: |
    第Ⅲ部 人材を揃える。
    第 14 ~ 15 章。
    無個性な駒で机上の戦争ゲームを考える戦略家としてのマネージャーの役割ではなく、人材を揃え辞めないようにする原則に基づく手法を紹介する。
    親が子供を何年もかけて育てるのと違い、マネージャーは人材を選ぶ必要がある。
    企業文化にあう均質な人材を選ぶのは不健全で、標準から外れても優秀な人材を選び、彼らの力を発揮させる必要がある。
    リーダーシップは、権力による後押しで仕事をさせるのではなく、率先してリードし周りの触媒となるのが主たる役割。
    人材の選択やリーダーシップに関しては、まだ本書で言うような有機的な組織の特徴をうまく取り入れれるところは多くなさそう。
    不言実行のところ、表明する暇があれば手を動かした方が速いという点でも同意できる。許可さえ貰えばあとはやる的な。
- date: 2025-09-25
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 118 ~ 130
  notes: |
    第 16 ~ 18 章。
    ヒトを雇う際に何ができるか実際に見ずに話だけで決めるのがおかしいという話。
    また適性検査についても自己評価に利用するなら良いが採用で使うようなものではないとのこと。
    これはプログラミングの心理学でも似た話があって時代を感じさせる。
    人材の多様化によってチームで上手くやっていくためのランチ会などの tips 等。
    あと所謂「若い世代」の注意の分散と仕事でのフロー状態の相性と仕事での注意の向け方に馴染むための話。
    この世代をまたいだチームの話は最近の事情を酌んでいて面白い。似たような違いを動画で勉強するか否かでも感じる(わたしは動画を使わない)。
- date: 2025-09-26
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 131 ~ 148
  notes: |
    第 19 ~ 20 章。
    退職は見えるコストも見えないコストも含め無駄である。オフィスの移転も従業員に負荷を課すだけで無意味。
    社内にコミュニティができることで長く続けることに繋がり、教育によって良い組織になりうる。
    人的資産への投資は勘定科目上経費になるため軽く見がちだが、そうではない。
    ベテランが抜けた穴を新人で埋めると生産性が回復するまでに非常にコストがかかることからも、人材への投資を回収するのが非常に難しいことがわかる。
    移転の件は日本なら忌まわしき転勤も同じ悪影響があるなと思った。
    ただ長く居続けられると、自律的に変化を注入することができる人も組織もそうないし、それだけ人材が均質化するから両刃の剣ではあるよな。
- date: 2025-09-27
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 149 ~ 160
  notes: |
    第Ⅳ部 生産性の高いチームを育てる。
    第 21 ~ 22 章。
    仕事の楽しい思い出は往々にして仕事自体ではなく結束して取り組んだチームによるところが大きい。うまく結束したチームとは何か、その作り方について。
    結束したチームは共通の目標を持ち、その実現に向けて協力しあう。その勢いがあるので管理は必要ない。
    結束したチームは、退職率の低さ・強い一体感・選抜された意識・成果物の共有意識・明らかな楽しさといった特徴を持つ。
    チームが自律的に成長し、メンバーが入れ替わってもチームのエネルギーと個性が生き続けた例として、ブラックチームを挙げる。
    「結束感」みたいな感覚はもう随分感じてないな。
    自分の経験では、できたてのチームというのは祭りみたいなものでそれだけで結束力があるのだけど、徐々に待遇の違いといった外圧や互いの不信で勢いが落ちていく。
    チームメンバー間の信頼関係が強固ならその勢いを削がないようにできるのかなと思っている。特に根拠があるわけでない。
- date: 2025-09-28
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 161 ~ 169
  notes: |
    第 23 章。
    チームの育成は農業にて完全に制御できるものではない。そこで本章ではチームが自然に育つのを阻害する 7 つの要素を挙げられている。
    部下の能力を信用しない守りのマネジメント。
    部下に頭を使わない書類仕事させる≒官僚主義では目標の大切さは伝わらない。
    チームの作業場所を分散すると日常会話から結束を育む機会が失われる。
    複数のプロジェクトを掛け持ちさせるとチームとの時間も細分化され結束できなくなる。
    コスト削減のために短期で製品を仕上げ品質を落とすと、チームの喜びが奪われ一体感が失われる。
    マネージャーがチームにはっぱをかけるためハッタリの納期を設定すると、チームの信頼を失う。
    経営陣のチームへの恐ろしく低い興味から、プロジェクト毎にチームを解散させてしまう。
    妙に解像度高いのは、それだけどこでもある問題ということやろな。自分でもよくある話ばかりと感じた。
- date: 2025-09-29
  bookTitle: ピープルウエア ヤル気こそプロジェクト成功の鍵 第 3 版
  pages: 170 ~ 180
  notes: |
    第 24 ~ 25 章。
    チームが自然に育つのを阻害するさらに 2 つの要素。
    忌々しいポスターや会社のスローガン入り動機づけグッズは経営層の不勉強差を明らかにする。
    残業で分担できない痛みが上手くいっていたチームに不和をもたらす。ワインバーグ流に言うと仕事が期限通りにいかない場合に避難から身を守る手段として人は残業する。
    競争は調和の取れたチーム内のコミュニケーションを阻害する。例えば年次評価や目標管理が競争を煽る。
    随分昔から評価制度と目標管理の問題点が指摘されてたのか。
    なくならないのは単に経営層の興味の無さと不勉強だけのせいでなく組織的に表面的な統制が必要だからやろな。個人的に要らない派やけど。
