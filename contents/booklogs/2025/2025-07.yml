- date: 2025-07-01
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: i ~ ix, 1 ~ 7
  notes: |
    型システムの背景にある数学的に証明された理論を小型の型検査器を実装して体感し、型システムを学ぶためのきっかけを作るのが本書の目的。
    ステップとしては本書 → TAPL(Types and Programming Languages) → TypeScript の型システム(Gradual Typing)。
    第 1 章 型システムとは、プログラムの未定義動作に対処する手段の一つ。
    プログラムを操作的意味論で定義し、型検査器が OK と判定したプログラムは未定義動作を起こさない性質、型安全性が証明される。
    型安全性を意識した型システムが設計された OCaml や Haskell と違い、 TypeScript は JavaScript に後付で型システムが導入されているため、 JavaScript としては未定義動作がない。このため型安全性はそれほど重要視されてない様子。
    TAPL 積読状態なので、まずは本書を読み進めていく。
- date: 2025-07-02
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 8 ~ 22
  notes: |
    第 2 章 真偽値の型と数値の型
    まず真偽値と数値のリテラル、条件・加算の演算子を持つ言語を作る。 TAPL の型無算術式・型付き算術式に相当する。
    型検査器の判定基準と抽象構文木(Abstract Syntax Tree)の設計。
    プログラムを読み込んで AST を生成するパーサーの実装。
    型検査器を実装して動かす。エラー時の挙動もここで決める。
    TypeScript での実装なので型と AST は discriminated union での実装になってる。
    TypeScript が OK/NG にした設計意図の話も面白い。
- date: 2025-07-03
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 23 ~ 39
  notes: |
    第 3 章 関数型
    関数の型の実装。この章は変数参照・無名関数・関数呼び出しをやる。 TAPL の単純型付きラムダ式に相当する。
    変数参照では定義済み変数を管理する型環境(型付け文脈)を実装する。型環境に見つからない＝未定義変数のエラー。
    型環境を更新する際は破壊的更新を行うと静的スコープ外の変数が参照できてしまうので、非破壊的更新を行う。
    関数の型の等価判定で仮引数の名前を比較すると仮引数の名前が違う実引数を渡せなくなるので、この実装では比較しない。
    argument 実引数と parameter 仮引数の使い分けの経緯おもしろ。
- date: 2025-07-04
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 40 ~ 56
  notes: |
    第 4 章 逐次実行と変数定義
    関数の型の続き。 TAPL の単純な拡張の中の派生形式・ let 束縛に相当する。
    本書では TAPL にならい変数の再定義を許す。 shadowing は同一 block での再定義を禁じて下位 block で許可するやつ。
    逐次実行と変数定義の AST が再帰的なのは ML 風で配列での実装もできる。
    ここまでで作った型システムは必ず停止する正規化可能性が保証されるので、発散コンビネータ・ omega のようなコードは書けない。
    また前方参照は許可していない。
    型設計として発生しうるパターンでも parser で生成しないようにしてるってのはちょっと目からウロコ。実装の簡便さのためかな。
- date: 2025-07-05
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 57 ~ 67
  notes: |
    第 5 章 オブジェクト型
    ここで対応するのは構造体とか record と呼ばれる複数の値にラベルをつけてまとめるデータ型。
    TAPL の単純な拡張の中のレコードに相当する。
    なので AST でオブジェクト生成の構文は複数の値を持てるように定義する。 record の実装自体は難しくない。
    等価判定の時間計算量が気になったけど今気にするところじゃないのかな。
    variant のひとつ union を実装するのは TAPL の範囲を超えてしまい難しいが、 TypeScript の tagged union ならまだましなので演習問題ではそれに挑戦するようになってる(それでも難しい)。
    なるほど読み終えてから見直してみるかあ。
- date: 2025-07-06
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 68 ~ 78
  notes: |
    第 6 章 再帰関数
    本書の再帰関数は ML 流の型推論の実装が難しいので戻り値の型を明示する。そのため宣言文も専用のものを用意する。
    TAPL の単純な拡張の中の一般的再帰に相当する。
    型検査器では戻り値の型の検査、また後続処理では再帰関数自身のみを含む型環境での型検査を行う。
    このような特別な構文を用いなくても不動点コンビネータ(発散コンビネータの発展型)を利用すれば再帰関数が書ける。
    ここで特別な構文を用いたのは抽象度が上がって説明が難しくなるためとのこと。
    章の内容はわかったが用語がわからんの後追いで勉強が必要だわ。
- date: 2025-07-07
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 79 ~ 91
  notes: |
    第 7 章 部分型付け
    TAPL の部分型付けと部分型付けのメタ理論の一部に相当する。
    TypeScript でできるような部分型付け(subtyping) という型システムの拡張。
    この章ではオブジェクト型の部分型付けを実装するが、文脈によっては異なる型の間や関数の型の部分型付けも可能。
    型の代入可能性、共変(covariant)と反変(contravariant)の概念。
    条件演算子の型を実装すると join(型の結び)・ meet(型の交わり) で実装が冗長になるので本書は除外。
    variance support の波が F# に迫って来そうなので共変・反変ちゃんと覚えようと思ってたらこんなところでばったり出会うとは。
- date: 2025-07-08
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 92 ~ 101
  notes: |
    第 8 章 再帰型
    木構造や無限リストのような再帰的なデータ構造を定義するための型。
    本書では TAPL の流儀で形式的な表現に置き換える方法で実装をする。
    実際にはわかりやすい型エラーのために型エイリアスの遅延評価のような実装の方が採用されることが多い。
    本書では型エイリアスの AST への追加は省略。 parser が必要とする箇所に直に埋め込んでくる。
    型の定義は型変数と再帰型を追加。面倒さがわかるほど解像度ないのであとで勉強が必要やな。
    空腹関数は F# では DU が必要やが TypeScript は直でいけるのか。
- date: 2025-07-09
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 101 ~ 116
  notes: |
    本書の再帰化型の型検査器の実装では、再帰型のデータ型の展開前後が一致していれば OK とする必要がある。
    等価判定では型変数の名前の違いは無視し、また無限に再帰しないように、比較中の型変数を覚えておく必要がある。
    TAPL の再帰型には同型再帰と同値再帰があり、本書では TypeScript でも採用されている同値再帰を実装した。
    同型再帰の方がユーザに注釈を求める代わりに循環検出の実装が不要になると。
    また同値再帰は発展的な言語機能との相性の悪さから ML 系では同型再帰が採用されているらしい。
    まだぼんやりとしかわからんがキーワードは覚えた。
- date: 2025-07-10
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 117 ~ 121
  notes: |
    第 9 章 ジェネリクス
    ジェネリクス(総称型)の同期は異なる型に対して同じ処理をさせる再利用。
    ジェネリクスの実装でも型変数を使用する。再帰型のときは再帰型自身で、ジェネリクスではユーザが指定した型で置き換える。
    TAPL では、型変数を用いた抽象化を型抽象、型変数を具体化することを型適用と呼ぶ。
    ジェネリクスの実装は複雑。 Java や Go が当初はジェネリクスをサポートしていなかった理由では？とのこと。
    次 TypeScript のジェネリクスを紐解くところがひとまとまりなのでここで終えておく。
- date: 2025-07-11
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 121 ~ 130
  notes: |
    TypeScript のジェネリクスを紐解く。
    型抽象された形を持つ関数に具体的な型を与えることはできない。
    型抽象された型は型変数の名前が違っていても一貫して読み替えできるなら同じ型として扱える。
    これは変数捕獲のために型変数の名前の衝突を避けるため。
    型変数も shadowing の対象となる。型変数を具体的な型ですべて置き換えることを型代入という。
    あと型適用が実行時には全く影響しないという話。
    例のコードを `" ... " | deno run --check -` で検査しながらじゃないと理解が危なかった。
    実行時に～は `deno` で interactive に検査せずやればいい。
- date: 2025-07-12
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 131 ~ 140
  notes: |
    型抽象と型変数を型と構文木に追加する。型抽象では型変数と本体の型を持つ。
    TypeScript では型抽象が無名関数の一部として実装されているが、本書は TAPL 流で任意の項に型抽象を書ける。
    TypeScript 4.7 で型適用構文が導入されたが、実質的に型適用も関数呼び出しの一部になっている。
    ここまでの型代入の実装は間違ってて先で直すらしい。理解が浅いから復習が必要やな。
    章のはじめに複雑だといってた通りか、本書の中でも実装量多いな。
- date: 2025-07-13
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 140 ~ 154
  notes: |
    型検査器の実装。
    型抽象と型適用に該当する処理を追加するだけだが、 shadowing が正しく扱われない問題と変数捕獲による問題のコーナーケースに対応する必要がある。
    それらの問題はこれまでで敢えて間違った実装をしていた型適用に関する部分。
    変数捕獲に於いては型変数の名前が衝突しないようにするため全く新しい名前を与える。これはフレッシュな変数と呼ばれる。
    ここまでの内容が TAPL の全称型に相当する。 TAPL では有界量化の章で全称型と部分型を組み合わせ、指定した型の部分型なら置き換え可能な制約付きの型変数を導入している。これが TypeScript の `extends` に相当する。
    難しいね。何度か練習しないと一回ではピンとこんな。
- date: 2025-07-14
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 155 ~ 173
  notes: |
    おわりに、演習問題の解答、参考文献、索引。
    型システムは型付け規則の集合で、その規則を機械的に判定できるようプログラムにしたのが型検査器といえる。
    型システムは証明のしやすさに念頭を置いて作られるので、型検査器で実装しやすくないものもあり、どの規則を選ぶべきかという問題を考える必要がある。
    次の step は TAPL に挑戦する、 TypeScript の漸進的型付けの論文を読む、自身を解析できる型解析器を作るとか。
    型システムではある型を作る・使う構文を型理論の背景にある論理学の用語からそれぞれ導入形式・除去形式と呼ぶ事がある。 TAPL の Curry-Howard 対応参照。
    これで終わり。ページ数少ないしサクサク読めた。でも parser を実装してないのもあって頭の中を素通りしてる箇所もあろうし、まるっと自分で書いてみる必要ありそうかなあ。
    一度で習得できたらかっこいいけど中々な。
- date: 2025-07-15
  bookTitle: サンダー・キャッツの発酵教室
  pages: 1 ~ 43
  notes: |
    過去にも読んだが気晴らしにまた読む。前読んだ発酵の旅よりレシピ本感ある。原著はもう 25 年も前みたい。
    改めて見てみるとメニューの順番とかなんか自由な感じがする。
    天然発酵の世界、発酵の技法(わたしはここから入った)が気軽に手に取れるのはこの本だ。
    自分でザワークラウト作るときは汁が出るのを待つのが面倒で水を足してる。
    氏の味噌の色は薄いよな。家で作ると 1 年でも温度が高いのかかなり色が濃くなる。
- date: 2025-07-16
  bookTitle: サンダー・キャッツの発酵教室
  pages: 44 ~ 87
  notes: |
    サワードウ・ブレッド、インジェラ、エチオピアの蜂蜜酒、ビネガー、ヨーグルト、タラとケフィア、バターミルク、サワークリーム、チーズ。
    なるべく自然発酵に任せるのが氏のスタイルだがサワードウの発酵がイマイチならイーストも使うんだ。
    発酵乳は最近ヴィーリを始めてみた。市販の種菌を使ってるが、本書でも書いてる通りバックスロッピングを重ねると元気がなくなる。
    純粋培養の菌だと自然にさらされたときに周りの菌が入ってきてバランスが崩れるせいかな。
- date: 2025-07-17
  bookTitle: サンダー・キャッツの発酵教室
  pages: 88 ~ 123
  notes: |
    テンペ、塩水で発酵させたピクルス、ケイパーとミルクウィード(オオトウワタ)、キムチ。
    あとポエミーな発酵の話。発酵＝扇動の話はメタファーとしての発酵でもあったし、改めてずっと続けてる考え方なのだとわかる。
    発酵の文化史のところも、発酵の旅にその要素を感じられるかな。著書のつながりが見えるようで感慨深い。
- date: 2025-07-18
  bookTitle: サンダー・キャッツの発酵教室
  pages: 124 ~ 142
  notes: |
    氏が日本に来たときのすんき旅行の話。すんきのレシピ。
    このすんき旅行は発酵の旅の中でも印象深い話だった。バックスロッピングで行う無縁の乳酸発酵。
    本書では氏の視点でないので 2 冊で 2 つの視点からすんきの話が読めるというわけ。
    日本に住んでいてもこの本を読むまで知らなかった。味噌に大豆以外を使う自由さも同じく。
    これで本書は終わり。また読み返そう。
- date: 2025-07-19
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: i ~ v
  notes: |
    長らく積んでたので読むことにした。
    まえがき。
    成功するプロジェクトにいた傑出した少数の技術労働者を、技術的能力とリーダーシップが結合した技術リーダーと呼び、講習を行った。
    これらの人々は技術と関係なく問題解決型リーダーとして変容する。
    彼らは講習をきっかけにして自身がそうなることを選択したのであって、講習でそうなったわけではない。本書がそのきっかけとなることを願う。というもの。
- date: 2025-07-20
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: vi ~ xxi
  notes: |
    推薦の辞、訳者まえがき。
    問題解決型のリーダーシップ≒技術革新の力、動機づけ、組織化の能力を併せ持つこと。
    アメとムチのリーダシップを直線的として、システム開発のような問題解決型の状況では役に立たないので、問題解決型のリーダーシップが必要と。
    原著の出版 40 年近く前で同世代レベルだが、この直線的なリーダシップが現在も見られるのは笑えるな。
    本書はリーダシップの定義、技術革新、(他社に対する)動機づけ、組織化、(自身のリーダーへの)変容、で構成されてる。
    コンサルタントの秘密も積読しておこう。世間的には先にあっちを読むべきようだが、逆行してても良い。
- date: 2025-07-21
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 1 ~ 14
  notes: |
    第 1 部 定義。
    リーダシップありふれた話題であるが理解されておらず神話や誤解がある。
    この部でそれらを取り除き、リーダーシップのモデルを構築する。
    第 1 章 リーダーシップとは、結局のところなんなのか。
    一つの原因に一つの結果が伴うようなものを直線的なモデル、それに対し有機的なモデルはシステム思考的な複雑な要素の絡み合いで結果が導かれたと考える。
    直線的なモデルは謂わば人を型にはめて変化を拒む。有機的なモデルは人を個人として捉え、変化を受け入れる。
    氏の言うリーダーシップは自律的に道を選ぶことか。挿絵が種から育つぶどうか。示唆的やな。
- date: 2025-07-22
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 15 ~ 24
  notes: |
    第 2 章 リーダーシップ様式に関するモデル。
    MOI(Motivation, Organization, Idea ないし Innovation) モデルは自分がどのようなリーダシップの様式を持っているか理解するのに役立つ。
    関係する人を突き動かすもの、アイデアを実現することを可能にする構造・組織化、実現されるもののイメージ。
    それぞれのリーダーで好みはあれど、これらがバランスよく機能することが求められる。
    さらに技術リーダーは問題の理解・アイディアの流れを調整する・品質を保持するといった要素を問題解決で重視する(これは次の章で詳しく)。
    問題解決型のリーダーが必ず「もっとよいやりかたは必ずある」という信仰を備えている。
    組織化は人の統率だけでなくその人の行動を整えるみたいな文脈があるみたい？
    自分の子供の頃にアイデアによる成功体験なかったので、いつ「もっとよいやりかたは必ずある」という信仰を持つようになったのか定かではないな。
- date: 2025-07-23
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 25 ~ 34
  notes: |
    第 3 章 技術リーダーの問題解決様式。
    技術リーダーシップと呼ぶ技術革新のやりかたは 3 つの行動様式に分けられる。
    問題の理解、アイディアの流れを調整する、品質を保持する。
    問題の肝要となる細部に注意を払い、問題の本質を理解するために何度も繰り返し考える。チームにもそれを奨励する。
    (多くは繰り返されよく知られた)うまいアイデアを提供・模倣し、チームのアイデアを引き出し練り上げる。アイデアを批判しヒトを批判しない。
    アイデアは問題解決のためのツールであり、いつまでもアイデア出しに浪費しない。またアイデアを捨てたり再利用することも厭わない。
    問題解決の品質にこだわり、常に品質を計測し計画と比較する。遂行のためには計画の変更も辞さない。
    失敗を失敗のままにせず次のアイデア生成周期に活かす。
    Team Geek の様なチーム作りの本に通ずるものがある。こっちの方が古いし同じことが言葉を変えて繰り返されてるのか。アイデアと同じく。
- date: 2025-07-24
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 35 ~ 46
  notes: |
    第 4 章 リーダーはどう育つか。
    リーダーというかヒトの成長曲線を高原谷間モデルで表現する。
    成長は線形でなく、躍進の高原と停滞・後退の谷間を繰り返す。
    谷間の停滞・後退の間に積み重ね、ブレークスルーの試行錯誤をし、飛躍する。
    高原谷間モデルのサイクルを繰り返すことで学び方を学び、飛躍のためのコストも下がっていく。
    すべての谷間が高原に繋がる保証はないが、着実に成長していく。
    よく分かる。転職や経験のない技術やタスクなんかも同じで、何度か経験したあとは、多少しんどくてもどうせできるしなという実力と自信が醸成されてくる。
- date: 2025-07-25
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 47 ~ 58
  notes: |
    第 5 章 でも私は……
    リーダーになることに伴う痛みを避けるためによく使われる口実、及びそれらを棄却する説明。
    有機的なチームではそれぞれがリーダーシップをうまく発揮し機能するので「任命された」マネージャーだけが重要な訳では無い。
    リーダーになることで最新の技術のような特定の技術能力を失うのは確かだが、それは問題解決のメタ技術を獲得するのとのトレードオフ。
    同時に成長痛を伴う。その機会を遅らせることもできるがいつかは避けられない。
    リーダーシップを大き過ぎる力と思うかも知れないが、みな特殊技能を持った普通の人であって、アプローチを習得すれば周囲の人でもできる。
    本書が書かれた頃よりも技術的アイデアが大きく影響力を持つ様になった今でも、リーダーシップは特別なものではないかなという感じはするな。一部の BigTech に求められる影響力や倫理を除けば。
- date: 2025-07-26
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 59 ~ 72
  notes: |
    第 2 部 技術革新。
    リーダーの技術革新において、リーダー自身のメタ認知の欠如が障害となる可能性がある。
    これら主要な障害とその克服の方法を学ぶ。
    第 6 章 技術革新への三大障害。
    自己盲目性。自身の振る舞いを驚くほど覚えていないことが自己の改善の障害となる。
    問題ない症候群。問題を軽視し解決方法ありきで考えることが、問題の理解と解決をするうえで障害となる。
    答えが 1 つであるという信仰。「 1 つの正しい答え」のみを信じて取るべき選択肢を見失うことが障害となる。
    基本的にメタ認知の欠如よな。自分が特別とか「正しい答え」が特別とかのバイアスがある。
    あるがままを受け入れるのが良やが難しいんやろな。
- date: 2025-07-27
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 73 ~ 82
  notes: |
    第 7 章 自分自身への気づきを高める法。
    MOI モデルの技術革新の力・動機づけ・組織化の能力のうち動機づけだけは、リーダー自身が変わりたいと思っていない限り得られない。
    本書では動機づけのテストとして、個人的な日誌をつけるために 3 ヶ月間毎日 5 分使うことを提案する。
    仮に日誌に使う 5 分を無駄と思う場合は、変化のリスクを許容できずに時間の無駄として取り組まないだろう。
    日誌に記した内容を読み返してみて自身へのメタ認知を高める。
    わたしも 10 年以上仕事の日誌を習慣にしている。休日はつけてないが、それでも自分の思考の偏りやそのとき何を大切に思っていたかは読み取れるところがよいと感じている。
    稀に誰かに勧めてみても殆どの人はやらないのだが、本書でいうところの変化を切望するリーダーのような人でもない限りやらないというのがリアリティがある。
- date: 2025-07-28
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 83 ~ 92
  notes: |
    第 8 章 アイディアの力を育てる。
    自身への気付き同様に問題解決型リーダーシップではアイディアの力を育てる戦略も不可欠。
    問題解決型リーダーは「正しい一つの答え」の他にまだ発見していない答えがあると信じていて、それが技術革新につながる。
    創造的な間違い、盗んだ(そして間違った)アイディア、アイディアの結合、がアイディア生成の三大戦略。
    いずれの戦略も「アメとムチ」の「正しい一つの答え」の信仰のもとでは「正しい答え」を「知っている」ので、アイディアを誤ったり盗んだり組み合わせたりしてアイディアを生み出せる可能性を摘んでしまう。
    音楽等の芸術も模倣から得るものは多いしそれと同じよな。
- date: 2025-07-29
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 93 ~ 103
  notes: |
    第 9 章 ビジョン。
    著者の経験では問題解決型のリーダーには必ずビジョンがある。
    彼らは敗北を新たな成功への跳躍に使う能力がある。普通のビジョンを個人的な特別なビジョンに結びつける。
    そのビジョンが仕事を自分の延長部にし、品質への強迫観念をもたらす。
    ビジョンに基づく行動が人々とのやり取りにも影響を与え、共有されたビジョンは人々の行動につながる。
    大教訓の第二なくね？見つかんない気が...
    ビジョンというとふわっとしてるが、金銭や名声のような対外的な価値と違った内的な信念に動機づけされてると強いというのはそう思う。
- date: 2025-07-30
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 104 ~ 120
  notes: |
    第 3 部 動機づけ。
    多くのビジョンは他の人々を助けるものだが、それでも他の人達は動かない。その障害が何か、それに対し何が出きるかを学ぶ。
    第 9 章 人に動機づけを与えることについての、第 1 の障害。
    動機づけにおける第 1 の障害は、他人から見るように自分自身を見ることができない、というもう 1 つの自己盲目性。
    コミュニケーションに顕在部分と潜在部分がある。潜在部分を理解するのにバージニア・サティアのやり取りのモデルが使える。
    プロセスは知覚入力・解釈・感情・感情についての感情・防御・発言に関する規則・結果で構成され、それぞれのプロセスで認知の歪みが生じる。
    この他人の認知に筋道をつけるために、自分自身の潜在部分を率直に伝えることが、認知の助けになる。
    自分の弱みを見せるため、攻撃を受ける多少のリスクはあるし、ときには谷間に落ちる勇気も必要になる。
    これ自己開示の話よな。これも学びのメタサイクルと同じで慣れればそのコストは大したものじゃなくなる印象。
- date: 2025-07-31
  bookTitle: スーパーエンジニアへの道 技術リーダーシップの人間学
  pages: 121 ~ 130
  notes: |
    第 10 章 人に動機づけを与えることについての、第 2 の障害。
    仕事が複雑である限り人と仕事を分けて考えることはできない。これが第 2 の障害。
    仕事の成否が怪しくなったチームでは仕事と人のどちら取るべきか？というような典型的な二律背反を信じるのは、人に動機づけを与えるうえで障害となる。
    仕事のあるところには人があり、仕事の対象は人である。
    過去に計画を落とすと色んな人が傷つくということで開発者自身の超過勤務は黙認されるようなことを見てきたし体験もしたが、あれは人を優先してると見せかけた仕事優先型なわけか。
    ではこの場合技術リーダーなら具体的にどうするんやろな。失敗や部分的な未達を許容するってことかな。
