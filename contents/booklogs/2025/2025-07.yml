- date: 2025-07-01
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: i ~ ix, 1 ~ 7
  notes: |
    型システムの背景にある数学的に証明された理論を小型の型検査器を実装して体感し、型システムを学ぶためのきっかけを作るのが本書の目的。
    ステップとしては本書 → TAPL(Types and Programming Languages) → TypeScript の型システム(Gradual Typing)。
    第 1 章 型システムとは、プログラムの未定義動作に対処する手段の一つ。
    プログラムを操作的意味論で定義し、型検査器が OK と判定したプログラムは未定義動作を起こさない性質、型安全性が証明される。
    型安全性を意識した型システムが設計された OCaml や Haskell と違い、 TypeScript は JavaScript に後付で型システムが導入されているため、 JavaScript としては未定義動作がない。このため型安全性はそれほど重要視されてない様子。
    TAPL 積読状態なので、まずは本書を読み進めていく。
- date: 2025-07-02
  bookTitle: 型システムのしくみ TypeScript で実装しながら学ぶ型とプログラミング言語
  pages: 8 ~ 22
  notes: |
    第 2 章 真偽値の型と数値の型
    まず真偽値と数値のリテラル、条件・加算の演算子を持つ言語を作る。 TAPL の型無算術式・型付き算術式に相当する。
    型検査器の判定基準と抽象構文木(Abstract Syntax Tree)の設計。
    プログラムを読み込んで AST を生成するパーサーの実装。
    型検査器を実装して動かす。エラー時の挙動もここで決める。
    TypeScript での実装なので型と AST は discriminated union での実装になってる。
    TypeScript が OK/NG にした設計意図の話も面白い。
