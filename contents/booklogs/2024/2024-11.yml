- date: 2024-11-01
  bookTitle: 本を読む本
  pages: 235   ~ 241
  notes: |
    14 シントピカル読書―読書の第 4 レベル。
    シントピカル読書の実例。同じ言葉でも意味を違えた使い方をしている著者のグループがあり、
    読者の問に即した方をより意味を明確にした読者の言葉で表現したグループとしてとらえ、その中での論争に注目する。
    そしてシントピカル読書の手引としてのシントピコン(The Great Books of the Western World)。これ和訳ないのが残念よな。
    西欧の思想というか概念の索引ぽいし、現代的な思想の源流を知るのに絶対いいやろ。
- date: 2024-11-02
  bookTitle: 本を読む本
  pages: 241 ~ 246
  notes: |
    14 シントピカル読書―読書の第 4 レベル。
    著者の言葉を読者の言葉に翻訳することを良しとしない反対派への反論みたいな感じ。
    書籍が正確で読者によって翻訳可能あれば書籍同士は「語り合う」ことができ理性的なコミュニケーションは可能だというのを「原理」と指しているぽい。
    なんとなく、書籍は著者・その時代背景や言語の違いがあろうが誤読のない限りは読者の言葉で表現されて然るべきだろうから、反対派の方が的外れな気はするな。
    そしてシントピカル読書の段階のまとめの便利な一覧。
- date: 2024-11-03
  bookTitle: 本を読む本
  pages: 247 ~ 255
  notes: |
    15 読書と精神の成長。残すはあとがきのフリしたエッセイぽいので、実質この章で終わり。
    良書は読者に多くを求め、積極的な読者も自身に多くを求める。良書は多少難しかろうが脳が衰えない限り読者の成長に寄与する。
    そのような本は希少であり、読むたびに新しい発見がある。この限られた良書がシントピコンにつながるわけやな。
    個人的に定期的に読み返す本はあるが、それがシントピコンになるかはわからんな。
    アカデミックな読み方を修練するしないに関わらず、本を読み続ける習慣の後押しになった気がする。
- date: 2024-11-04
  bookTitle: 本を読む本
  pages: 256 ~ 265
  notes: |
    日本人の読書 - 訳者あとがきにかえて。あとがきのフリしたエッセイ。
    短編を行ったり来たりして読む、訳書が悪文でも何度も読み込む。そのため読書技術が発展しなかったといった日本的な読書の特徴について触れられてた。
    ただ時代の変化でそのような技術が有用であろう、という締め。なんか感想文チック。読書技術が発展しなかった背景でどう向き合うかみたいな話ではないんか。
    読後の感覚的には、(まともな)技術書やビジネス書に限れば読書技術が活かせる気もするので、独学で実践するしかないか。
- date: 2024-11-05
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: i ~ xii, 目次, 索引
  notes: |
    前から FsCheck を使いたいと考えてたが手探りすぎたのでなんか手引が欲しく、ちょうど良さそうな本が出たので積読してた。
    少なくとも和書だと PBT について書いてるのがこの本しかないっぽいし。
    はじめ PBT 基礎を習って、その後は演習等実践を通して理解を進めていくみたい。良さそうや。
- date: 2024-11-06
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 1 ~ 11
  notes: |
    第 1 章 プロパティベーステストの基礎。
    プロパティベーステストは従来のテストと根本的にアプローチが異なる。
    従来のテストは事例を並べるが、プロパティベーステストは「どのような入力を与えても常に同じであるような振る舞い」≒プロパティを定義する。
    プロパティベーステストが適さないケースもあり、従来のテストより考えることが多くなり技能も必要だが、素晴らしい結果をもたらしてくれるって感じか。
    事例ベースのテストは想像の範囲の仕様を記述するが、プロパティベーステストは想像の失敗をあぶり出す。そうそう、それこそ求めてるものよ。
- date: 2024-11-07
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 11 ~ 18
  notes: |
    第 1 章 プロパティベーステストの基礎。
    従来のテストは単純なツールと多くのコード。 PBT は強力なツールと少しのコード化されたルール。
    そのためツールの支援がなければ話にならんということで本で使うツールの紹介。
    .NET もテストプロジェクトを分離するし FsCheck も同じ感じでやれそうやな。
- date: 2024-11-08
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 19 ~ 25
  notes: |
    第 2 章 プロパティを書く。
    コード化されたルール、ジェネレータ、フレームワークが揃ってプロパティが得られる。
    PBT には基礎的なステートレスプロパティとより複雑なステートフルプロパティがある。
    あとは PropEr の使い方とか。後ほど FsCheck ではというあたりも自習しておく。
- date: 2024-11-09
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 25 ~ 36
  notes: |
    第 2 章 プロパティを書く。
    備え付けジェネレータとコード化したルールを組み合わせてどテストを書くかってところ。
    最初はサクッと書いてその結果からジェネレータを変える等プロパティを調整してく。
    結構試行錯誤な印象。あとこの段階では組み込みのジェネレータ知らんことにはどうにもならなそう。
    使うツールに習熟する必要あるって話の片鱗かな。
- date: 2024-11-10
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 36 ~ 46
  notes: |
    第 3 章 プロパティで考える。
    優れたプロパティの実装は標準的なテストよりも難しいが、習熟するためのテクニックはある。
    まずモデル化。単純で正しいと信用できる代替の実装。実行速度に問題があったとしても初手としては意味がある。
    複数の実装パターンがない場合には従来のテストケースの汎化をする。どこまでを信頼するかは開発者の判断。
    次に小さく分解した部分で常に真となるはずの不変条件を使う。単一の不変条件だと役に立たなくても他の部分の不変条件と組み合わせで信用を高められる。
    テクニックがあるとはいえこの辺は実装しつつ習熟するしかないやろな。
- date: 2024-11-11
  bookTitle: 入門・倫理学
  pages: 27 ~ 35
  notes: |
    輪読会のやつ。Ⅰ倫理学の基礎 第 2 章 倫理理論。
    倫理理論というツールを使うことで直観的に難しい場面での合理的な判断を補助する。
    規範倫理学→帰結主義→功利主義。
    帰結主義は良い結果で良し悪しを判断する立場であり、功利主義の良い結果とは関係者の幸福。
    功利の原理と結果で判断する行為功利主義の限界を修正するために道徳規則を追加した規則原理主義。
    二層理論では直観レベルと批判レベルの二段階で判断する。
    多分ザクッと理解する意図の章なので用語を覚えるのからスタートかな。
- date: 2024-11-11
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 46 ~ 53
  notes: |
    第 3 章 プロパティで考える。
    正順の処理に対して逆順の処理を書ける場合はそれが対称プロパティとなる。
    対称プロパティそれだけでは整合性を保証するのみだが、不変条件を組み合わせることで強固なプロパティが得られる。
    コツとして、複雑な処理をプロパティ 1 つだけで信頼性を高めようとせず、複数のプロパティに分けて段階的に検証していくのが望ましい。
    この辺は従来のテストと同じかな。
- date: 2024-11-12
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 54 ~ 64
  notes: |
    第 4 章 カスタムジェネレーター。
    まんべんなくランダムなデータでは発見できると限らない。
    限られたエッジケースに焦点を絞るようなテストに最適なデータを、カスタムジェネレータで生成する。
    まず統計情報をとりデフォルトジェネレータで生成された値がテストに十分か見極め、不十分ならカスタムジェネレータを利用する。
    カスタムのデータ生成はそら欲しくなるよなという印象。
- date: 2024-11-13
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 65 ~ 76
  notes: |
    第 4 章 カスタムジェネレーター。
    リサイズジェネレーター。生成される値の範囲を狭める。ただし狭めた分ばらつきが得られなくなる点に注意する。
    変換ジェネレーター。データの生成と変換がジェネレーターとプロパティに分かれてしまうようなケースをジェネレーターにまとめられる。
    またフィルタとして働く制約条件を設けるジェネレータもある。ただし除外されるデータの量が大量だと変換で賄う方が速いケースもあるので注意する。
    生成・変換のいずれにしても効率的に欲しいデータを生成するには十分でなく、その場合確率を調整して狙いのデータに近づけることもできる。
    ただし CSV や XML のような構造化データの生成には十分でないため更にテクニックがいる。
    ここまできたら実際にテスト対象に必要なデータを試行錯誤するのが実践的で良さそうやな。勘所は練習しないとつかめなさげ。
- date: 2024-11-14
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 76 ~ 84
  notes: |
    第 4 章 カスタムジェネレーター。
    再帰ジェネレーター。 繰り返しで作れるデータは概ね可能。
    ただし正格評価で呼び出し階層が深くなりすぎる場合があり、そのときは遅延評価することで回避する。
    確率的に再帰の終了条件を設定する場合、確率が固定されたり異常なサイズのデータが生成されることもある。
    その場合繰り返し回数だけランダムに生成して、データの生成を通常の関数で記述することで軽くできる。
    Erlang 力低くてピンとこんが正確評価は FsCheck も同じだし、他のエッセンスも似たようなもんだろうと推測する。
- date: 2024-11-15
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 84 ~ 92
  notes: |
    第 4 章 カスタムジェネレーター。
    シンボリックコール。失敗したプロパティの出力が解読不能なバイト列などのデータ形式の場合に使える。
    関数呼び出しやその引数をシンボルとして記録し、失敗時にその履歴が追跡できる感じ。
    FsCheck にはシンボリックコールそのものはないみたい。それっぽいものを代替手段で実装することはできそうなので参考にはなるか。
- date: 2024-11-16
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 93 ~ 111
  notes: |
    第 5 章 信頼できるテスト。
    これまで学んだ内容を実践する。
    モデル化、事例テストの汎用化、不変条件、対象プロパティと事例テストによる固定化(anchor 錨)。
    ここでは CSV のプロパティを書くためにまずジェネレータからかいてるが、仕様のコード化という点で TDD に通じる。
    プロパティを定義するとその仕様の曖昧さが生み出すというのもいいな。
    避けられない既知のバグを正解ケースとして、またプロパティの実装上避けられない暗黙の仕様のテストも事例テストが向いてる。
    こういう事例テストの用途はリグレッションテストも該当する。
- date: 2024-11-17
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 111 ~ 121
  notes: |
    第 5 章 信頼できるテスト。
    PBT のアイデアを使った事例テスト。
    総当たりの範囲が狭く実行時間も許容できる場合は PBT より事例を列挙するほうが良いケースもある。
    この場合原因の追跡のしやすさは劣るが、実例が網羅されるためランダム性は必要なくより信頼性も高くなる。
- date: 2024-11-18
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 121 ~ 136
  notes: |
    第 5 章 信頼できるテスト。
    ココまでで出尽くしてるかのようで特に気づく点なかった。
    FsCheck で同じような実習してみるのが練習になりそうやけどまだやってない。
- date: 2024-11-19
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 137 ~ 144
  notes: |
    第 6 章 プロパティ駆動開発。
    TDD と同じように PDD する。
    ポジティブテスト(テストがスべきことの検証)とネガティブテスト(プログラムが処理できないことのテスト)の技法を探っていく。
    最初に簡単なプロパティを書き、それを green にするために最小実装、実装後統計を見て妥当性のチェック。
    プロパティ書いてジェネレータを書いて実装してって流れは F# だとコンパイルエラーうざそうで先に空実装しちゃいそう。 TDD もなんか苦手やし。
- date: 2024-11-20
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 144 ~ 151
  notes: |
    第 6 章 プロパティ駆動開発。
    1つ目のプロパティでカバーできなかったケースのテストを新たに作る。複雑化しないように小分けにする。
    これはジェネレーターも同じで、テストしたいパターンを構成する最小の要素のジェネレーターを作る。
    それらを組み合わせて複雑なパターンを網羅する。
    ここまでは想像の範囲で期待の挙動をするかテストするポジティブテスト(ハッピーテスト)。次節からネガティブテスト。
    単純で本実装とは違う形で実装ってのが結構むずそうよなーやり方は色々あるってのはわかるんやけどバイアスかかりそう。
