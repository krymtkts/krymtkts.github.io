- date: 2024-11-01
  bookTitle: 本を読む本
  pages: 235   ~ 241
  notes: |
    14 シントピカル読書―読書の第 4 レベル。
    シントピカル読書の実例。同じ言葉でも意味を違えた使い方をしている著者のグループがあり、
    読者の問に即した方をより意味を明確にした読者の言葉で表現したグループとしてとらえ、その中での論争に注目する。
    そしてシントピカル読書の手引としてのシントピコン(The Great Books of the Western World)。これ和訳ないのが残念よな。
    西欧の思想というか概念の索引ぽいし、現代的な思想の源流を知るのに絶対いいやろ。
- date: 2024-11-02
  bookTitle: 本を読む本
  pages: 241 ~ 246
  notes: |
    14 シントピカル読書―読書の第 4 レベル。
    著者の言葉を読者の言葉に翻訳することを良しとしない反対派への反論みたいな感じ。
    書籍が正確で読者によって翻訳可能あれば書籍同士は「語り合う」ことができ理性的なコミュニケーションは可能だというのを「原理」と指しているぽい。
    なんとなく、書籍は著者・その時代背景や言語の違いがあろうが誤読のない限りは読者の言葉で表現されて然るべきだろうから、反対派の方が的外れな気はするな。
    そしてシントピカル読書の段階のまとめの便利な一覧。
- date: 2024-11-03
  bookTitle: 本を読む本
  pages: 247 ~ 255
  notes: |
    15 読書と精神の成長。残すはあとがきのフリしたエッセイぽいので、実質この章で終わり。
    良書は読者に多くを求め、積極的な読者も自身に多くを求める。良書は多少難しかろうが脳が衰えない限り読者の成長に寄与する。
    そのような本は希少であり、読むたびに新しい発見がある。この限られた良書がシントピコンにつながるわけやな。
    個人的に定期的に読み返す本はあるが、それがシントピコンになるかはわからんな。
    アカデミックな読み方を修練するしないに関わらず、本を読み続ける習慣の後押しになった気がする。
- date: 2024-11-04
  bookTitle: 本を読む本
  pages: 256 ~ 265
  notes: |
    日本人の読書 - 訳者あとがきにかえて。あとがきのフリしたエッセイ。
    短編を行ったり来たりして読む、訳書が悪文でも何度も読み込む。そのため読書技術が発展しなかったといった日本的な読書の特徴について触れられてた。
    ただ時代の変化でそのような技術が有用であろう、という締め。なんか感想文チック。読書技術が発展しなかった背景でどう向き合うかみたいな話ではないんか。
    読後の感覚的には、(まともな)技術書やビジネス書に限れば読書技術が活かせる気もするので、独学で実践するしかないか。
- date: 2024-11-05
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: i ~ xii, 目次, 索引
  notes: |
    前から FsCheck を使いたいと考えてたが手探りすぎたのでなんか手引が欲しく、ちょうど良さそうな本が出たので積読してた。
    少なくとも和書だと PBT について書いてるのがこの本しかないっぽいし。
    はじめ PBT 基礎を習って、その後は演習等実践を通して理解を進めていくみたい。良さそうや。
- date: 2024-11-06
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 1 ~ 11
  notes: |
    第 1 章 プロパティベーステストの基礎。
    プロパティベーステストは従来のテストと根本的にアプローチが異なる。
    従来のテストは事例を並べるが、プロパティベーステストは「どのような入力を与えても常に同じであるような振る舞い」≒プロパティを定義する。
    プロパティベーステストが適さないケースもあり、従来のテストより考えることが多くなり技能も必要だが、素晴らしい結果をもたらしてくれるって感じか。
    事例ベースのテストは想像の範囲の仕様を記述するが、プロパティベーステストは想像の失敗をあぶり出す。そうそう、それこそ求めてるものよ。
- date: 2024-11-07
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 11 ~ 18
  notes: |
    第 1 章 プロパティベーステストの基礎。
    従来のテストは単純なツールと多くのコード。 PBT は強力なツールと少しのコード化されたルール。
    そのためツールの支援がなければ話にならんということで本で使うツールの紹介。
    .NET もテストプロジェクトを分離するし FsCheck も同じ感じでやれそうやな。
- date: 2024-11-08
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 19 ~ 25
  notes: |
    第 2 章 プロパティを書く。
    コード化されたルール、ジェネレータ、フレームワークが揃ってプロパティが得られる。
    PBT には基礎的なステートレスプロパティとより複雑なステートフルプロパティがある。
    あとは PropEr の使い方とか。後ほど FsCheck ではというあたりも自習しておく。
- date: 2024-11-09
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 25 ~ 36
  notes: |
    第 2 章 プロパティを書く。
    備え付けジェネレータとコード化したルールを組み合わせてどテストを書くかってところ。
    最初はサクッと書いてその結果からジェネレータを変える等プロパティを調整してく。
    結構試行錯誤な印象。あとこの段階では組み込みのジェネレータ知らんことにはどうにもならなそう。
    使うツールに習熟する必要あるって話の片鱗かな。
- date: 2024-11-10
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 36 ~ 46
  notes: |
    第 3 章 プロパティで考える。
    優れたプロパティの実装は標準的なテストよりも難しいが、習熟するためのテクニックはある。
    まずモデル化。単純で正しいと信用できる代替の実装。実行速度に問題があったとしても初手としては意味がある。
    複数の実装パターンがない場合には従来のテストケースの汎化をする。どこまでを信頼するかは開発者の判断。
    次に小さく分解した部分で常に真となるはずの不変条件を使う。単一の不変条件だと役に立たなくても他の部分の不変条件と組み合わせで信用を高められる。
    テクニックがあるとはいえこの辺は実装しつつ習熟するしかないやろな。
- date: 2024-11-11
  bookTitle: 入門・倫理学
  pages: 27 ~ 35
  notes: |
    輪読会のやつ。Ⅰ倫理学の基礎 第 2 章 倫理理論。
    倫理理論というツールを使うことで直観的に難しい場面での合理的な判断を補助する。
    規範倫理学→帰結主義→功利主義。
    帰結主義は良い結果で良し悪しを判断する立場であり、功利主義の良い結果とは関係者の幸福。
    功利の原理と結果で判断する行為功利主義の限界を修正するために道徳規則を追加した規則原理主義。
    二層理論では直観レベルと批判レベルの二段階で判断する。
    多分ザクッと理解する意図の章なので用語を覚えるのからスタートかな。
- date: 2024-11-11
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 46 ~ 53
  notes: |
    第 3 章 プロパティで考える。
    正順の処理に対して逆順の処理を書ける場合はそれが対称プロパティとなる。
    対称プロパティそれだけでは整合性を保証するのみだが、不変条件を組み合わせることで強固なプロパティが得られる。
    コツとして、複雑な処理をプロパティ 1 つだけで信頼性を高めようとせず、複数のプロパティに分けて段階的に検証していくのが望ましい。
    この辺は従来のテストと同じかな。
- date: 2024-11-12
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 54 ~ 64
  notes: |
    第 4 章 カスタムジェネレーター。
    まんべんなくランダムなデータでは発見できると限らない。
    限られたエッジケースに焦点を絞るようなテストに最適なデータを、カスタムジェネレータで生成する。
    まず統計情報をとりデフォルトジェネレータで生成された値がテストに十分か見極め、不十分ならカスタムジェネレータを利用する。
    カスタムのデータ生成はそら欲しくなるよなという印象。
- date: 2024-11-13
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 65 ~ 76
  notes: |
    第 4 章 カスタムジェネレーター。
    リサイズジェネレーター。生成される値の範囲を狭める。ただし狭めた分ばらつきが得られなくなる点に注意する。
    変換ジェネレーター。データの生成と変換がジェネレーターとプロパティに分かれてしまうようなケースをジェネレーターにまとめられる。
    またフィルタとして働く制約条件を設けるジェネレータもある。ただし除外されるデータの量が大量だと変換で賄う方が速いケースもあるので注意する。
    生成・変換のいずれにしても効率的に欲しいデータを生成するには十分でなく、その場合確率を調整して狙いのデータに近づけることもできる。
    ただし CSV や XML のような構造化データの生成には十分でないため更にテクニックがいる。
    ここまできたら実際にテスト対象に必要なデータを試行錯誤するのが実践的で良さそうやな。勘所は練習しないとつかめなさげ。
- date: 2024-11-14
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 76 ~ 84
  notes: |
    第 4 章 カスタムジェネレーター。
    再帰ジェネレーター。 繰り返しで作れるデータは概ね可能。
    ただし正格評価で呼び出し階層が深くなりすぎる場合があり、そのときは遅延評価することで回避する。
    確率的に再帰の終了条件を設定する場合、確率が固定されたり異常なサイズのデータが生成されることもある。
    その場合繰り返し回数だけランダムに生成して、データの生成を通常の関数で記述することで軽くできる。
    Erlang 力低くてピンとこんが正確評価は FsCheck も同じだし、他のエッセンスも似たようなもんだろうと推測する。
- date: 2024-11-15
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 84 ~ 92
  notes: |
    第 4 章 カスタムジェネレーター。
    シンボリックコール。失敗したプロパティの出力が解読不能なバイト列などのデータ形式の場合に使える。
    関数呼び出しやその引数をシンボルとして記録し、失敗時にその履歴が追跡できる感じ。
    FsCheck にはシンボリックコールそのものはないみたい。それっぽいものを代替手段で実装することはできそうなので参考にはなるか。
- date: 2024-11-16
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 93 ~ 111
  notes: |
    第 5 章 信頼できるテスト。
    これまで学んだ内容を実践する。
    モデル化、事例テストの汎用化、不変条件、対象プロパティと事例テストによる固定化(anchor 錨)。
    ここでは CSV のプロパティを書くためにまずジェネレータからかいてるが、仕様のコード化という点で TDD に通じる。
    プロパティを定義するとその仕様の曖昧さが生み出すというのもいいな。
    避けられない既知のバグを正解ケースとして、またプロパティの実装上避けられない暗黙の仕様のテストも事例テストが向いてる。
    こういう事例テストの用途はリグレッションテストも該当する。
- date: 2024-11-17
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 111 ~ 121
  notes: |
    第 5 章 信頼できるテスト。
    PBT のアイデアを使った事例テスト。
    総当たりの範囲が狭く実行時間も許容できる場合は PBT より事例を列挙するほうが良いケースもある。
    この場合原因の追跡のしやすさは劣るが、実例が網羅されるためランダム性は必要なくより信頼性も高くなる。
- date: 2024-11-18
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 121 ~ 136
  notes: |
    第 5 章 信頼できるテスト。
    ココまでで出尽くしてるかのようで特に気づく点なかった。
    FsCheck で同じような実習してみるのが練習になりそうやけどまだやってない。
- date: 2024-11-19
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 137 ~ 144
  notes: |
    第 6 章 プロパティ駆動開発。
    TDD と同じように PDD する。
    ポジティブテスト(テストがスべきことの検証)とネガティブテスト(プログラムが処理できないことのテスト)の技法を探っていく。
    最初に簡単なプロパティを書き、それを green にするために最小実装、実装後統計を見て妥当性のチェック。
    プロパティ書いてジェネレータを書いて実装してって流れは F# だとコンパイルエラーうざそうで先に空実装しちゃいそう。 TDD もなんか苦手やし。
- date: 2024-11-20
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 144 ~ 156
  notes: |
    第 6 章 プロパティ駆動開発。
    1つ目のプロパティでカバーできなかったケースのテストを新たに作る。複雑化しないように小分けにする。
    これはジェネレーターも同じで、テストしたいパターンを構成する最小の要素のジェネレーターを作る。
    それらを組み合わせて複雑なパターンを網羅する。
    ここまでは想像の範囲で期待の挙動をするかテストするポジティブテスト(ハッピーテスト)。次節からネガティブテスト。
    単純で本実装とは違う形で実装ってのが結構むずそうよなーやり方は色々あるってのはわかるんやけどバイアスかかりそう。
- date: 2024-11-21
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 156 ~ 169
  notes: |
    第 6 章 プロパティ駆動開発。
    ネガティブテスト。不測のケースを探るのには広範囲を対称とする曖昧なプロパティが適している。
    完全にランダムだと満遍なく事例をカバーしにくいので、意図的に予測可能なデータを混ぜていき、ばらつきが狙い通りかは統計情報で評価していく。
    またポジティブテストの制約を緩めることで不測のケースを探索するのも良い。
    この不測のケースの中には動的型付け言語だから起こり得るものがあり、静的型付け言語の場合だと厳しく型で制約しているから起こり得ないものもある。
    とはいえちょいちょい制約子忘れるのでそういった漏れを発見できるかもしれないのは大きそうな。
- date: 2024-11-22
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 170 ~ 184
  notes: |
    第 7 章 収縮。
    失敗したケースを再現する最も簡単な形を探す機構が収縮(shrinking)。
    最も簡単な形はジェネレーターにとってのゼロ点、概ね空を指す値だったり中間点を指す。
    特殊なケースは例えば初期位置が定まっているデータ。 Unix タイムスタンプであれば 1970 年 1 月 1 日。
    このようなデータ構造が複雑な場合は簡単な形が得られないこともあり、その場合は収縮機能を制御する機構を使う。
    PropEr はマクロだけど FsCheck だと shrinker という `seq` を返す関数で表現してるみたい(まだ試してない)
- date: 2024-11-23
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 185 ~ 192
  notes: |
    第 8 章 標的型プロパティ。
    通常のプロパティは各ケースが独立しているが標的型プロパティは後続のケースのデータ生成に影響を与えることができる。
    それにより特別なジェネレータを作ることなく標準的なジェネレータで狙ったデータを生成できる。
    標準的型プロパティは焼きなまし法(Simulated Annealing)という統計的な手法で値を探す。
    初期は山登り法(Hill Climbibg)が利用された。元は探索マクロとして追加された機能。
    PropEr の進んだ昨日だけあって FsCheck には Targeted Property なさそうなのでそういう手法もあるのかという程度の理解。
- date: 2024-11-24
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 192 ~ 200
  notes: |
    第 8 章 標的型プロパティ。
    標的型プロパティで狙いたいのはエッジケース、例えば木構造が片方に偏ってるとかがあってる。
    焼きなまし法の計算時間で明らかに通常のジェネレータより遅くなる。
    独自に近傍関数を定義することでより効果的な選択をさせることができる。
    ただしカスタムジェネレータで狙いのデータを生成するのと同様、ランダムさは狭まる。
    このことからも満遍なく多様なデータのプロパティとは分けて考えるべきところなんかな。
- date: 2024-11-25
  bookTitle: 魏武注孫子
  pages: 1 ~ 10
  notes: |
    面白そうだったんで買った。孫子を複数のテキストから定本したのは曹操だという。
    そのため曹操の軍事思想を理解しなければ孫子を真に理解するのは難しい。
    その思想の背景を知ることは、当時の人がどのように理解し実践していたかを知ること。
    曹操はあくまで訓詁学に基づいた注釈を行っていたというのも興味深いな。読書家なんや。
- date: 2024-11-25
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 200 ~ 204
  notes: |
    第 8 章 標的型プロパティ。
    標的型プロパティの独創的な使い方として通常のプロパティではできない使い方がある。
    例えば計算量が爆発して実行時間が伸びるようなケースは、実行時間が最大化する方向にでー他を探す必要があり、通常脳プロパティではできない。
    標的型プロパティは仕様やロジックの穴を探すのに特に光るものがある印象。
- date: 2024-11-25
  bookTitle: 入門・倫理学
  pages: 35 ~ 44
  notes: |
    輪読会のやつ。Ⅰ倫理学の基礎 第 2 章 倫理理論。
    義務論(deontology)または義務にもとづく理論(duty-based theory)。
    正しい・正しくない行動のタイプ≒義務によって行動を制約される義務論敵制約。
    カントの倫理学では、義務にかなっているだけの行為は適法性があるだけで、道徳性はないとみなす 。
    定言命法・人間の尊厳・自立としての自由でもって義務を特定できるとした。
    ロスの倫理学は一応の義務で義務の衝突を回避できるとした。
    ロールズは功利主義の欠陥は幸福の配分に触れられていないこととし、社会契約説によって配分の原理を構築できるとした。
- date: 2024-11-26
  bookTitle: 魏武注孫子
  pages: 11 ~ 12
  notes: |
    まず孫子と始計篇 第一の概要。孫子は孫武の主張を中核とするが、それを奉ずる学派の共有テキストでもあり、整合性に欠く面もある。
    始計篇は比較的まとまっていて、本書では便宜的に段落を分けて読解を導いてくれる。
    「兵は国の大事」「五事」「七計」「将の任免」「計と勢」、ここまでが戦争は国家存亡の分かれ道であるから合理的に判断し勝利を導かねばならないという主張。
    「兵は詭道」戦争は即ち騙し合いであり人として正しいことが勝利に繋がらない。戦争を所与の条件とし敵の備えのない不意をつき必ず勝利を導かねばならないという主張。
    「廟算」戦争における勝ちを定めることの重要性を説き、勝利は合理的に導けるものであるという主張。
    2 頁しか読んでないが一旦ここで区切るが良いか。
- date: 2024-11-26
  bookTitle: 実践プロパティベーステスト PropEr と Erlang/Elixir ではじめよう
  pages: 205 ~ 212
  notes: |
    第 9 章 ステートフルプロパティ。
    ステートフルプロパティが有効なのは「コードが何をすべきかは単純だが実装が複雑」なパターン。従来の結合テストやシステムテストが該当する。
    形式手法未満のモデル検査の亜種といえる(らしいがわからん)。
    モデル・コマンドのジェネレーター・実際のシステムの 3 つのパーツで成り立つ。
    システムの振る舞いモデルと検証対象のシステムに、検証対象の操作をあらわす前提条件を与え、モデルと検証対象のシステムを事後条件により確かめる。みたいな感じか。
    こういう仕組みは、自動じゃないけど今 pocof の `SelectPocofCommand` にやってるテストと同じ感じなので、熟達したらかなりイケそうな気がしてきた。
    FsCheck 的には Model-based Testing なんかな。
- date: 2024-11-27
  bookTitle: 魏武注孫子
  pages: 12 ~ 17
  notes: |
    始計篇 第一。(本来は計篇だった可能性が高い)
    まず孫子の原則として、1.戦わずして勝つを理想とする、2.戦争の基本的性格を詭道とする、3. 戦争を合理的に解釈するの 3 つがある。
    これらにより、合理的な勝敗の予測、戦争が経済を滅ぼす実践的な説明、戦争を解明しようと試み、現代にも通づる普遍的な組織論といった特徴を持つ。
    「兵は国の大事」戦争は国の存亡を左右するので良く洞察しなければならない。五事七計でもって勝敗を予測する。
    「五事」戦力を道(民心)・天(時期)・地(地理的優位性)・将(将の能力)・法(軍事力や権力)で測る。みたいなところか？
    面白いが読み解くのがなかなか難しいな。
