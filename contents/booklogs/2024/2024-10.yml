- date: 2024-10-01
  bookTitle: プログラマー脳 優れたプログラマーになるための認知科学に基づくアプローチ
  pages: 41 ~ 56
  notes: |
    Part 1 Chapter 3 コードをより良く読むために プログラミング言語の文法を素早く習得する方法。
    現在の科学でわかっているのは、長い期間期間をかけて勉強した方が長く記憶に留まるということ。
    記憶には貯蔵強度と検索強度があり、すぐ記憶から引き出せないのは検索強度が低いから。
    この状態を web の検索とかでカバーしてしまうと検索強度が上がらないままになる。
    意図的に思い出そうとすること≒想起記憶、また覚えたての概念を他の既知の概念につなげる精緻化≒推敲が強度を高めるのに有効に働く。
    素早く習得できたことないので参考にしよ。
- date: 2024-10-02
  bookTitle: プログラマー脳 優れたプログラマーになるための認知科学に基づくアプローチ
  pages: 57 ~ 76
  notes: |
    Part 1 Chapter 4 コードをより良く読むために 複雑なコードの読み方。
    コードが複雑だとコレまでの手法は通用しない。問題の処理に用いられる短期記憶＝ワーキングメモリが 2~6 個しか同時に処理できないため。
    課題内在性負荷＝問題自身の複雑さ、課題外在性負荷＝コードの書き方や読み手の知識不足に起因する複雑さ。
    複雑で読めないコードには認知的リファクタリングを施すか、依存関係グラフ、状態遷移表といったツールで理解を深める。
    仕事なら認知的リファクタリングという選択はあるかな。趣味プロであえてやる意味ないし好きじゃないな。
    妙にリスト内包表記が槍玉に上がっててかわいそう...
- date: 2024-10-03
  bookTitle: プログラマー脳 優れたプログラマーになるための認知科学に基づくアプローチ
  pages: 77 ~ 93
  notes: |
    Part 2 Chapter 5 コードについて考える コードの深い理解に到達する。
    変数の役割フレームワークは読み解くときにマーキングの方法だけでなく書くときにも使える。
    チャールズ・シモニーのハンガリアン記法の正しい使い方にも可能性がある。
    ただいずれも強制力がないからなあ。
    どこからコードを読み始めるかという起点がフォーカルポイント。
    これってエラーログとかの外的要因で明確なら困らなさそう。
    読解するのが目的だとエントリポイントや関数の先頭からとか、より難易度高くなる選択肢しかないんやろな。
- date: 2024-10-04
  bookTitle: プログラマー脳 優れたプログラマーになるための認知科学に基づくアプローチ
  pages: 93 ~ 108
  notes: |
    Part 2 Chapter 5 コードについて考える コードの深い理解に到達する。
    コードの読解に関してクヌース先生だけ別格でわろた。 Coders at Work 家のどっかに積んでるわ。
    プログラムの読解には言語能力が強く関係しており、自然言語を読むためのテクニックがコード読解にも使える。
    過去の知識の活性化、読解の監視、コードの重要性の判断、変数から推論、コードの可視化、自問自答、コードの要約。
    こうやってキーワードを羅列するとフレームワークのようになるけど、こうなると個人的に全然やらなくなるタイプのやつ。
    特に手で表を書き出すとかが字も図も下手で苦手なのでなんかいい感じに自分のスタイルに組み込みたいな。
- date: 2024-10-05
  bookTitle: プログラマー脳 優れたプログラマーになるための認知科学に基づくアプローチ
  pages: 109 ~ 130
  notes: |
    Part 2 Chapter 6 コードについて考える プログラミングに関する問題をよりうまく解決するには。
    コードの読解にメンタルモデルを利用する。メンタルモデルはデータ構造やパターン。
    想定マシンはプログラミング言語が何をしているかを抽象化するモデル。理解の際に記憶に定着した誤ったモデルが利用されることもある。
    これらのメンタルモデルは互いに競合せずに問題に適用することもできる。長期記憶のスキーマと強く関連づくものほど有用。
    結局のところ身近な概念で振る舞いを表現するから、自身の持つ語彙力が貧弱だと貧弱になりうる。
    つまりちゃんと勉強しろよって話に聞こえるよな。メンタルモデルそれ自身もどれだけ手札があるかという話だし。
- date: 2024-10-06
  bookTitle: プログラマー脳 優れたプログラマーになるための認知科学に基づくアプローチ
  pages: 131 ~ 146
  notes: |
    Part 2 Chapter 6 コードについて考える 誤認識：思考に潜むバグ。
    学習した知識が他の分野でも役に立つのを転移(transfer)という。
    同じ領域の学習が容易になるのを学習中の転移(transfer during learning)という。
    長期記憶に格納された知識が学習に役立つのは学習の転移(transfer of learning)という。名前似過ぎてややこし...
    転移にも種類がある。
    無意識にスキルを伝達する一般道の転移(Low Road Transfer)、意識して伝達する高速道路の転移(High Road Transfer)、対象の領域の遠近で近転移、遠転移、 学習に良い影響を与える正の転移、悪い影響を与える負の転移。
    遠転移はほとんど自然発生することなく、適切に近い領域に転移することがよい学習効果につながる。
    負の転移が誤認識を生む。これを抑制するために概念変化(conceptual change)でメンタルモデルを置き換えたり、抑制によって正の転移を促す。
    ただし正しいモデルを構築しても古いモデルが邪魔をすることも常に起こり得る。
