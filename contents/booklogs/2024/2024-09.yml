- date: 2024-09-01
  bookTitle: Domain Modeling Made Functional 関数型ドメインモデリング ドメイン駆動設計と F# でソフトウェアの複雑さに立ち向かおう
  pages: 167 ~ 187
  notes: |
    FP のテクニックでドメインのパイプラインを繋ぎ終えた。 lifting してて良い。
    例外避けたいから次章出直すとのこと。Expecto と FsCheck は試せてないからそのうちやりたい(と言いつつ随分経った)。
    部分適用による依存性の注入はわたしもよくやるのだけど、多過ぎると面倒なので Record に詰め込むことをしている。
    この章のアプローチでは引数に羅列しているのが、どうなんだろ。
    この本でモナドでの実装は詳細に触れないようなので自分で考えな。
- date: 2024-09-02
  bookTitle: Domain Modeling Made Functional 関数型ドメインモデリング ドメイン駆動設計と F# でソフトウェアの複雑さに立ち向かおう
  pages: 188 ~ 218
  notes: |
    FP 的エラーの扱い。 ようやく railway oriented. 明示的エラーといえば Java の検査例外を思い出す。
    `bind`, `map` からの独自 computation って流れだがわたしはあんま使いこなせてないからなじませたいな。
    結局のところエラーの扱いがクリーン()なコードを汚すからその複雑性を DSL に寄せるという理解。
    それ自体は好きだが Go のように愚直にエラー処理書くのもわかりやすいといえばそうやと思うので流派かなあ。
- date: 2024-09-03
  bookTitle: Domain Modeling Made Functional 関数型ドメインモデリング ドメイン駆動設計と F# でソフトウェアの複雑さに立ち向かおう
  pages: 219 ~ 239
  notes: |
    シリアライズは地道に手で書く感じ。キレイな世界に出入りするための通過儀礼みたいなもんか。
    高級なモデルから平易なデータ構造に落とすため single case union すらもシリアライズ用の DTO に丁寧にマッピングする。
- date: 2024-09-04
  bookTitle: Domain Modeling Made Functional 関数型ドメインモデリング ドメイン駆動設計と F# でソフトウェアの複雑さに立ち向かおう
  pages: 240 ~ 251
  notes: |
    永続化。CQS と CQRS は違うと。モデル自体が分かれてるのが CQRS でいいかな。
    イベントソーシングのも当然触れられてるが、十分に説明できないとスルーされる。
- date: 2024-09-05
  bookTitle: Domain Modeling Made Functional 関数型ドメインモデリング ドメイン駆動設計と F# でソフトウェアの複雑さに立ち向かおう
  pages: 252 ~ 266
  notes: |
    RDB への永続化。
    少しテーブル設計に触れてるけど、元々キレイな世界とその他で分けてるのだし、テーブル設計は RDB の事情に合わせてやればいい。
    ORM 使わないのはわたしの好みなので良い。補償トランザクションは知ららなかったので調べておく。
- date: 2024-09-06
  bookTitle: Domain Modeling Made Functional 関数型ドメインモデリング ドメイン駆動設計と F# でソフトウェアの複雑さに立ち向かおう
  pages: 267 ~ 287
  notes: |
    設計を更新するのに型駆動でコンパイルエラー活用してやるって話。
    このときにはじめに作ったドメイン文書には触れないんかー。これで本は終わり。
    本を通して、 computation や active pattern の F# 機能を活用することあれど、データと処理が分割された FP の特徴を活かして静的型駆動でドメインを表現するテクニックの話だったと理解した。
    個人的に気になった F# でのパフォの改善等は触れられてない(link は多少あるか)ので自分でやれってことやろな。
- date: 2024-09-07
  bookTitle: プログラミング F#
  bookAuthor: Chris Smith
  pages: 267 ~ 287
  notes: |
    なんか降りてきてコード引用符の章を行ったり来たりして読んだ。
    古いので Microsoft Learn で code quotation のページも合わせて見る。
    pocof のクエリに code quotation 使えるよな。動的に関数生成したら速いかはわからんので試さないといけない。
    読後、訳者の人 dmmf 本のレビュワの人だと気づいた。
- date: 2024-09-08
  bookTitle: 世界一流エンジニアの思考法
  pages: 1 ~ 55
  notes: |
    メソッド屋のブログで Be Lazy 読んだころからファンなので読み始めた。とりあえず 1 章。
    目次見る感じ概ねブログや note で見た内容なのでサラッと読む。
- date: 2024-09-09
  bookTitle: 世界一流エンジニアの思考法
  pages: 56 ~ 95
  notes: |
    第 2 章は Be Lazy 。コレを 2016 年に読んで、その後ブログに載ってたエッセンシャル思考も読んだんだった。
    いま 100% 身についたかというとそうではないかも知れんけど、これがきっかけで自分のやり方が再構築されたのよな。
    やっぱいいな Be Lazy は。
- date: 2024-09-10
  bookTitle: 世界一流エンジニアの思考法
  pages: 96 ~ 130
  notes: |
    第 3 章。脳の負荷を減らす。
    この章の話に沿うとわたしは殆ど Level 2 で知識に対して何も制御権を持ってない。
    イラチの話はわからんでもないが悪しき大阪のせいちゃうやろｗ
    時間をかけて確実に 1 つずつ積み上げていって完全な制御権を得る。理解・記憶・反復やと。
- date: 2024-09-11
  bookTitle: 世界一流エンジニアの思考法
  pages: 131 ~ 164
  notes: |
    第 4 章。コミュニケーション。
    シンプルに伝え、知らないことを恥じずに聞き、 HRT で以て議論する。
    特別なことはないが、楽しんだもの勝ちってのはホントよくわかるわ。
- date: 2024-09-12
  bookTitle: 世界一流エンジニアの思考法
  pages: 165 ~ 202
  notes: |
    第 5 章。自己組織化されたチーム。
    自己組織化されたチームは結構勉強したのでせやなってかんじ。良くない組織だと従業員も子供扱いを求めてるフシあってやな。
    「自分以外のものになる」ことは期待されないの、マッコールさんみあるわ。こういう信頼で機能するの、みんなやる気があって真摯に取り組むからやねんよな。
- date: 2024-09-13
  bookTitle: 世界一流エンジニアの思考法
  pages: 203 ~ 233
  notes: |
    第 6 章。所謂ライフハック。昔 MIND HACKS を読んで以降色々試行錯誤してるのでかなり浅く読む。
    休息時間を作るためのタイムボックスとか、エネルギーロスの縮小、フィジカル強化みたいなところ。
    氏はテスト値上げるのにサプリ使ってるけどわたしはサプリはなんとなくアダプトゲンしかやらない。
    実際にギター弾いたり自重トレしたり読書したりで気分切り替えていくと効果あるよな。
    家族いると家事育児で必然的に仕事の枠決まるしある意味生産性は上げざるを得なくなる。
- date: 2024-09-14
  bookTitle: 世界一流エンジニアの思考法
  pages: 234 ~ 270
  notes: |
    第 7 章とあとがき。コレでこの本は終わり。
    わたしは生成 AI の出現で何も不安感じなかったのであんまこの感覚わからんのよな。
    実際に仕事でシステムに組み込んだり日常的に ChatGPT や Github Copilot 使って楽させてもらってるが、それ以上のものを感じたことはないな。
    中盤のエモいところも、そういうのとは距離を取ったらいいってだけだとアラフォー入る頃知ったわ。
    総じてパラダイムシフトに遭っても自分が楽しんで進める道を行こうって話だと認識した。自分の人生は自分で決めろってやつ。
    最後に、氏はラッキーという言葉を何度も書いてるが、 Luck is what happens when preparation meets opportunity. と言われるようにそれも積み重ねがあってのことなので見習いたい。
- date: 2024-09-15
  bookTitle: ユーザーの問題解決とプロダクトの成功を導く エンジニアのためのドキュメントライティング
  pages: 1 ~ 28
  notes: |
    前回が軽かったので今回は積読消化回。積み過ぎて日があたってたところのオレンジが褪せてる。
    わたしは仕事でサブシステムを作ったら文書や障害対応の手引なんかを書くのは結構好きだ。
    それに対し称賛されることもあるけど、逆にしょーもないことすんなと批判されることもある。
    書いてもコイツラ読まへんなーという状況も常にあるので、なんかきっかけを掴めたらいいな。
    「ドキュメントは機能の 1 つ」、いいなあ。はじめに、は入門 Kubernetes の人。
    この本はツールになるべく触れてないらしく、良い。ツールで解決できたら誰も困ってないもんな。
- date: 2024-09-16
  bookTitle: ユーザーの問題解決とプロダクトの成功を導く エンジニアのためのドキュメントライティング
  pages: 29 ~ 46
  notes: |
    chapter 1 終わり。
    この本でも届けたい相手のペルソナを作る。「遠くへ行きたければ、みんなで行け」でも「インディゲームサバイバルガイド」でもそんな感じだった。
    仕事ではガチでやるのは当然として趣味レベルでサクッと始めるには重いな。呼吸をするようにペルソナを作れるようになれってことなのか。
    社内向けにはあえて知識の呪いにかかったまま文書を書くこともあるけど、どうなんやろね。ペルソナにそぐうならいいのかな。
- date: 2024-09-17
  bookTitle: ユーザーの問題解決とプロダクトの成功を導く エンジニアのためのドキュメントライティング
  pages: 47 ~ 68
  notes: |
    chapter 2 終わり。
    ドキュメントのタイプとパターンというのは意識して考えたことなかったので学びになった。
    届けたい先に合わせて提供するパターンが変わる。ここは何度か噛みしめるように読もう。
- date: 2024-09-18
  bookTitle: ユーザーの問題解決とプロダクトの成功を導く エンジニアのためのドキュメントライティング
  pages: 69 ~ 92
  notes: |
    chapter 3 ドラフト。
    ドキュメントの構成要素を使い分け、流し読み上等で簡潔に、重要なことははじめに書く。
    完璧を目指さず満たすべき要素を網羅してるか注意して初版を書き上げたら一歩踏み出せたと。
    なかなか普段ここまで考えて書いてないなって気がするわ。
    