<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://krymtkts.github.io/' rel='self' type='application/rss+xml'/>
<title>
krymtkts
</title>
<link>
http://krymtkts.github.io/
</link>
<description>
krymtkts's personal blog
</description>
<lastBuildDate>
Sun, 11 Jul 2021 15:17:54 +0900
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://krymtkts.github.io/posts/2021-07-11-my-terminal-icons
</guid>
<link>
http://krymtkts.github.io/posts/2021-07-11-my-terminal-icons
</link>
<title>
Terminal-Icons のアイコングリフのコードポイントを変えたい
</title>
<description>
&lt;p&gt;先日、&lt;a href='/posts/2021-07-01-i-want-to-change-codepoint'&gt;わたしの改造 Migu で Terminal-Icons の見栄えが悪い話&lt;/a&gt;を書いた。 あの後、チマチマ作業を行い、ある程度納得の行くものが出来上がったのでまとめておく。&lt;h2&gt;&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;まず、先日の記事に書いていた豆腐は、ありゃー Material Design Icons を改造 Migu に組み込んでいないからであった。無知蒙昧。 あと Weather Icons もいらねーだろと思ってたしてなかったが、この際なので打ち込んじまえ！と意気込み処置を行うた。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/krymtkts/fontmerger/commit/81681e6de10149ed34dda60e9b6b806374efa472'&gt;Add fonts. · krymtkts/fontmerger@81681e6&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/krymtkts/fontmerger/commit/44c72fc3cc6cbabb44d25c3268d4191f81c78fed'&gt;Update font settings. · krymtkts/fontmerger@44c72fc&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Weather Icons は、なんか知らんがサイズを調整してパッチすると結構縦長になってしまってた。 が、ちょっと前に足しといた縦比/横比だけ調整するパラメータがいい感じに使え、我ながら先見の明を感じた(何&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/krymtkts/fontmerger/commit/7653e06d1f106b8dbcc01f30dc9ea25c175a3916'&gt;Split scale option to x and y scale. Add force_narrow option that for… · krymtkts/fontmerger@7653e06&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;こうしてまたさらにイイカンジの Migu になったところで、Terminal-Icons の&lt;code&gt;glyphs.ps1&lt;/code&gt;を上書きするモンをこしらえて完成とした。 ブツは Gist に上げた → &lt;a href='https://gist.github.com/krymtkts/4457a23124b2db860a6b32eba6490b03'&gt;my Terminal-Icons glyphs.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Material Design Icons はコードポイントがわかりやすくずれるだけなので機械的にずらすだけで OK だった。 Weather Icons と Octicons あたりは Nerd Fonts ではよくわからん順番に組み替えてるようだった。 コード読むのめんどかったので、モウ泥臭くヒューマンマニピュレーションにて処置...気が遠くなるかと思いきや割とすぐできた感じではある。 あと&lt;code&gt;glyphs.ps1&lt;/code&gt;を直接上書きするパワースタイルなので、なんか後から差し込めるようにしたい気はする。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2021-07-11-terminal/icons.png&quot; alt=&quot;きれいなアイコンたち&quot; /&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;全く関係ないが最近マイ Iris がやたらとチャタリングするようになてムカつくぜぇぇぇ... ホコリが接点に侵入してるんやと思うんやけど、掃除しても掃除しても数日で再発する。 でもファミコンのカートリッジスタイルでフーッ！！すると割と改善する...そんな日々。&lt;/p&gt;
</description>
<pubDate>
Sun, 11 Jul 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-07-01-i-want-to-change-codepoint
</guid>
<link>
http://krymtkts.github.io/posts/2021-07-01-i-want-to-change-codepoint
</link>
<title>
Terminal-Icons のアイコングリフのコードポイントを変えたい
</title>
<description>
&lt;p&gt;2021 年 5 月から、法律による上限スレスレの時間外＆休日労働だったため、すっかりブログを認めるのを忘れていた。 なのでこの記事は 6 月分のつもりで書いている(言い訳)。&lt;h2&gt;&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;さて、先月に現時点自分史上最高の Migu フォントを生み出したわけだが、実用において完全に気になるポイントがないわけではない。 その実、前から抱えていた幾つかの課題がそれなのだけど。&lt;/p&gt;&lt;p&gt;fontmerger を使って日本語フォントにパッチする場合、漢字が割り当てられているコードポイントにアイコングリフが割り当てられないように、コードポイントをずらす機能がついている。 当然の如く、わたしの Migu を作るためのパッチでもコードポイントをずらしている。&lt;/p&gt;&lt;p&gt;するとですね、&lt;a href='https://github.com/devblackops/Terminal-Icons/'&gt;devblackops/Terminal-Icons&lt;/a&gt;は &lt;a href='https://github.com/devblackops/Terminal-Icons/blob/eeb5ce85d4a1882b5155bd6f06859a4b6f4b44d8/psakeFile.ps1#L28'&gt;https://www.nerdfonts.com/cheat-sheet から自動生成した標準のコードポイント&lt;/a&gt; で以てフィアルやディレクトリのアイコンを表示するので...わたしの Migu だと豆腐になるアイコンがちらほらいるわけですね。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2021-07-01-terminal/icon-tofu.png&quot; alt=&quot;豆腐アイコン&quot; /&gt;&lt;/p&gt;&lt;p&gt;偶然にも、「栗」がアイコンに割り当てられてしまっているところもあったり。この動機づけはシンクロニシティやろ！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2021-07-01-terminal/stop-is-chestnut.png&quot; alt=&quot;停止は栗&quot; /&gt;&lt;/p&gt;&lt;p&gt;前まではアイコンがぶっ壊れ気味の Migu を使っていたので、割れ窓理論的に気にならなかった豆腐が、最近妙に気になってきたわけだ。&lt;/p&gt;&lt;p&gt;Terminal-Icons のドキュメントやコードを見ても、先述の自動生成したコードポイント表(&lt;a href='https://github.com/devblackops/Terminal-Icons/blob/main/Terminal-Icons/Data/glyphs.ps1'&gt;Terminal-Icons/glyphs.ps1&lt;/a&gt;)を差し替えたりできるような仕組みはないようなので、一旦はこのスクリプト自体にパッチを当てる方向で考えよかなと考え中。&lt;/p&gt;&lt;p&gt;4000 行近くあるとはいえ、その中から普段使うアイコンに絞れば数は少ないと思うから、とりま手でﾎﾟﾘﾎﾟﾘコードポイントを変えようかなと(さっきのキャプチャだけでも 3 つ豆腐並んでてヒット率高すぎ感はあるが)。&lt;/p&gt;&lt;p&gt;とはいえ英語圏じゃない人のフォントはわたしと同じ問題を抱えてるかもしれないので、なんかグリフのコードポイント変えさせてくれや～、という機能をプルリしてもいいかもしれない。&lt;/p&gt;
</description>
<pubDate>
Thu, 01 Jul 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-05-30-maybe-completed-refining-migu-nerd-font
</guid>
<link>
http://krymtkts.github.io/posts/2021-05-30-maybe-completed-refining-migu-nerd-font
</link>
<title>
Migu Nerd Font の改善が完了したっぽい
</title>
<description>
&lt;p&gt;(2021-05-16 に書いたまま投稿するのを忘れていた)&lt;/p&gt;&lt;p&gt;&lt;a href='/posts/2021-05-07-i-want-to-resize-migu-icon'&gt;以前&lt;/a&gt;の続き。まだやってる。&lt;/p&gt;&lt;p&gt;横も縦も微妙にサイズが合わないのであれば、強制的に矯正するしかない！ということでまた fontmerger に機能追加した。&lt;a href='https://fontforge.org/docs/scripting/python/fontforge.html#fontforge.contour.boundingBox'&gt;contour.boundingBox&lt;/a&gt;は結局やめた。今のコードでもフォント設定を分ければ実現が容易だったからだ。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;フォントごとの &lt;code&gt;scale&lt;/code&gt; オプションを x,y 軸で 2 つのオプション(&lt;code&gt;scale&amp;#95;x&lt;/code&gt;, &lt;code&gt;scale&amp;#95;y&lt;/code&gt;)に分割&lt;/li&gt;&lt;li&gt;narrow 幅に矯正する &lt;code&gt;force&amp;#95;narrow&lt;/code&gt; オプションを追加&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/fontmerger/commit/690830d0842a21445d7ca4e3aa367e1bbf859c31'&gt;Split scale option to x and y scale. Add force_narrow option that for… · krymtkts/fontmerger@690830d&lt;/a&gt;&lt;/p&gt;&lt;p&gt;コードは愚直に書いただけで Cognitive Complexy が 16 を突破してしまったが、期待の通りのフォント変換ができた模様。 これにより残念だった Powerline の隙間・見切れ問題が解決したものと思う。これで現時点では完璧や...という Migu になったので当分は使用を確かめてみようと思う。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2021-05-16-terminal/mypowerline.png&quot; alt=&quot;現在のpowerline&quot; /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;[x] お亡くなりになられた fontmerger を Python3 化して動かす&lt;/li&gt;&lt;li&gt;[x] 最新の Migu に対して fontmerger で Nerd font patch する&lt;/li&gt;&lt;li&gt;[x] &lt;code&gt;0xE0B0&lt;/code&gt; を始めとした Cascadia でだけうまく表示されるグリフを Migu に移植する&lt;ul&gt;&lt;li&gt;そして効果なし！&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[x] Nerd Fonts の font-patcher で Migu にパッチしてみる&lt;ul&gt;&lt;li&gt;フォントが使い物にならなくなった&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[x] Migu のチャーミングな部分を M+に移植&lt;ul&gt;&lt;li&gt;縦横比の違いから縦長に...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[x] font-merger がパッチするグリフのみ narrow 幅にしてみる&lt;ul&gt;&lt;li&gt;おしい！右よりフォントが残念&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[x] font-merger の scale オプションを x,y で分割、強制 narrow 幅オプション追加&lt;/li&gt;&lt;li&gt;[x] 完璧な Migu の完成！&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;完&lt;/p&gt;
</description>
<pubDate>
Sun, 30 May 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-05-07-i-want-to-resize-migu-icon
</guid>
<link>
http://krymtkts.github.io/posts/2021-05-07-i-want-to-resize-migu-icon
</link>
<title>
Migu Nerd Font のアイコンフォントを narrow にしたい
</title>
<description>
&lt;p&gt;&lt;a href='/posts/2021-04-11-consideration-of-difference-between-cascadia-and-migu'&gt;以前&lt;/a&gt;、Nerd Fonts の&lt;code&gt;font-patcher&lt;/code&gt;で Migu に Narrow サイズの Symbol グリフぶちこみゃええやんけ、まで来てた。 その後を記す。&lt;/p&gt;&lt;h3 id=&quot;nerd&amp;#95;fonts&quot;&gt;Nerd Fonts&lt;/h3&gt;&lt;p&gt;Nerd Font の font-patcher を試す。事前にパッチ済みの M+を見ると完璧なので期待に胸が高ぶる。実行してみると Python モジュールに Windows のライブラリが含まれていたので WSL2 内の Ubuntu では実行できなかった。Windows で実行する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;fontforge -script font-patcher migu-1m-regular.ttf -s -l -w -c --careful --progressbars -out patched
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果、全然アカン... &lt;code&gt;-s, &amp;ndash;mono, &amp;ndash;use-single-width-glyphs&lt;/code&gt;オプションを有効にすると全グリフが single-width になってしまい日本語フォントとして使いものにならなくなる。&lt;/p&gt;&lt;p&gt;逆にこの完璧な M+が惚れ惚れする出来なので、こちらに半濁音を移植するだけでいい気がしてきた。&lt;/p&gt;&lt;h2 id=&quot;font-merger&amp;#95;再び&quot;&gt;font-merger 再び&lt;/h2&gt;&lt;p&gt;コードポイントがわからないので、取得するための関数を PowerShell で作る。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;function UC {
    &amp;#91;CmdletBinding&amp;#40;&amp;#41;&amp;#93;
    param &amp;#40;
        &amp;#91;Parameter&amp;#40;Mandatory = $true,
            Position = 0,
            ValueFromPipeline = $true,
            ValueFromPipelineByPropertyName = $true&amp;#41;&amp;#93;
        &amp;#91;ValidateNotNullOrEmpty&amp;#40;&amp;#41;&amp;#93;
        &amp;#91;String&amp;#91;&amp;#93;&amp;#93;$s
    &amp;#41;
    process {
        foreach &amp;#40;$c in $s&amp;#41; {
            &amp;#91;Convert&amp;#93;::ToInt32&amp;#40;$c -as &amp;#91;char&amp;#93;&amp;#41;.ToString&amp;#40;&amp;quot;x&amp;quot;&amp;#41;
        }
    }
}

&amp;#40;'がぎぐげござじずぜぞだぢづでどばぱびぴぶぷべぺぼぽゔ'+''+''+'ゞガギグゲゴザジズゼゾダヂヅデドバパビピブプベペボポヴヷヸヹヺ'&amp;#41;.ToCharArray&amp;#40;&amp;#41; | UC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで置き換えたい文字(Migu のチャーミングな濁音半濁音たち)のコードポイントを取れるよにした。 特定のコードポイントの移植といえば font-merger 使えるやん！というところではあるが、ほしいコードポイントは連続せず細切れになっているので、これを 1 個ずつ設定に書くのはめんどい... ということで font-merger の改造をした。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/fontmerger/commit/33c775ef4f1fd47f90b6359f5ae74529552a87a6'&gt;Add codepoint option to copy glyph from specific code points. · krymtkts/fontmerger@33c775e&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;/usr/bin/fontforge -script fontmerger/&amp;#95;&amp;#95;init&amp;#95;&amp;#95;.py -x migu-1m-regular -o patched --suffix=migu -- ./source/M+1mNerdFontCompleteWindowsCompatible.ttf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コードポイントを個別に指定できるようにしまして実行したところ、なんかそれっぽく半濁点が反映されてる。 いや待てよ...微妙に縦長になってしまった...これは M+と Migu でフォントの縦横比が異なるせいやろな。&lt;/p&gt;&lt;p&gt;もう FontForge のスクリプティング真面目にやってくしか残された将来はない気がしてきた。😰&lt;/p&gt;&lt;h2 id=&quot;font-merger&amp;#95;再び&amp;#95;再び&quot;&gt;font-merger 再び 再び&lt;/h2&gt;&lt;p&gt;Nerd Fonts の font-patcher を読んでいるときに気づいたのが、&lt;code&gt;&amp;ndash;mono&lt;/code&gt; オプションを有効にしている場合すべての glyph に narrow 幅を設定するようになっていたこと。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/ryanoasis/nerd-fonts/blob/master/font-patcher#L71-L74'&gt;nerd-fonts/font-patcher at master · ryanoasis/nerd-fonts · GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;日本語フォントの場合 wide 幅を書き換えてしまうから先述の通り Nerf Fonts はえらいことになってしまっていたので、これをパッチするグリフにのみ適用すれば良いという力技に気づく。 ということで更に font-merger を改造した。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/fontmerger/commit/25ed2b1dfd547d6599417793fb679ea9fdbe4548'&gt;Adds mono command line option that forces glyph to be single width. · krymtkts/fontmerger@25ed2b1&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;現状&quot;&gt;現状&lt;/h2&gt;&lt;p&gt;これにより全ての追加したアイコングリフが narrow 幅になることで、漸く Windows Terminal でもﾐﾆﾐﾆアイコンフォントにならずに表示できるようになった。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2021-05-07-terminal/mypowerline.png&quot; alt=&quot;現在のpowerline。左向き三角が残念&quot; /&gt;&lt;/p&gt;&lt;p&gt;しかしご覧の通り、右に寄るべきフォントの見た目が非常に残念なので、今後もちょいちょいいじらねばならない。完成はいつになるのか...😪 (幅 500 以上になってるためずれる)&lt;/p&gt;&lt;p&gt;なんとなく、次は Powerline グリフの narrow 幅を大きく超過するものを左右の align をつけて変形しないといけない気がしている。 この辺の頂点の xmax, ymax からどないか計算できんかな → &lt;a href='https://fontforge.org/docs/scripting/python/fontforge.html#fontforge.contour.boundingBox'&gt;fontforge — FontForge 20201107 documentation&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;[x] お亡くなりになられた fontmerger を Python3 化して動かす&lt;/li&gt;&lt;li&gt;[x] 最新の Migu に対して fontmerger で Nerd font patch する&lt;/li&gt;&lt;li&gt;[x] &lt;code&gt;0xE0B0&lt;/code&gt; を始めとした Cascadia でだけうまく表示されるグリフを Migu に移植する&lt;ul&gt;&lt;li&gt;そして効果なし！&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[x] Nerd Fonts の font-patcher で Migu にパッチしてみる&lt;ul&gt;&lt;li&gt;フォントが使い物にならなくなった&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[x] Migu のチャーミングな部分を M+に移植&lt;ul&gt;&lt;li&gt;縦横比の違いから縦長に...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[x] font-merger がパッチするグリフのみ narrow 幅にしてみる&lt;ul&gt;&lt;li&gt;おしい！右よりフォントが残念&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[ ] 完璧な Migu の完成！&lt;ul&gt;&lt;li&gt;To Be Continued...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Fri, 07 May 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-05-06-simple-way-to-update-pwsh-special-module
</guid>
<link>
http://krymtkts.github.io/posts/2021-05-06-simple-way-to-update-pwsh-special-module
</link>
<title>
PowerShell の特殊なモジュールを更新する方法
</title>
<description>
&lt;p&gt;&lt;code&gt;PSReadLine&lt;/code&gt; のような特殊な PowerShell モジュールを更新する術として、以下の方法を使うようにしている。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;管理者権限で起動したコマンドプロンプトから&lt;/li&gt;&lt;li&gt;非対話モードで&lt;/li&gt;&lt;li&gt;PSReadline を読み込んでるプロファイルを読み込まずに&lt;/li&gt;&lt;li&gt;プレリリース許可＆全ユーザ＆サイドバイサイド でインストール&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;REM 、かつ、-NonInteractive でPowerShell Coreを実行
pwsh -NonInteractive -NoProfile -Command &amp;quot;Install-Module PSReadLine -AllowPrerelease -Scope AllUsers -Force&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Remove-Module&lt;/code&gt; さえちゃんとできてたら更新できると思うんやけど、プロファイルとの組み合わせで意図せず&lt;code&gt;Import-Module&lt;/code&gt;してしまい、しょっちゅうエラーしてしまうので上記手順が楽。 ほんとは pwsh 内からいい感じに処理できればよいのだけどトラシューの時間をこんなとこに割きたくない関係で、更新の都度初手一発でうまくいく手順をやりがち。&lt;/p&gt;&lt;p&gt;エラーになりがちな奴ら。ワイの profile が依存してる関係でエラーになりがち。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;PSReadLine&lt;/li&gt;&lt;li&gt;PowerShellGet&lt;/li&gt;&lt;li&gt;posh-git&lt;/li&gt;&lt;li&gt;Pester&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href='https://docs.microsoft.com/ja-jp/powershell/module/microsoft.powershell.core/about/about_pwsh?view=powershell-7.1'&gt;about_Pwsh - PowerShell | Microsoft Docs&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>
Thu, 06 May 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-04-11-consideration-of-difference-between-cascadia-and-migu
</guid>
<link>
http://krymtkts.github.io/posts/2021-04-11-consideration-of-difference-between-cascadia-and-migu
</link>
<title>
Cascadia Code PL と Migu Nerd Font の違い
</title>
<description>
&lt;p&gt;注意: アイコンフォントのコピペを多用しているので、対応していないフォントを使われている豆腐が見えます。&lt;/p&gt;&lt;h3 id=&quot;tl;dr&quot;&gt;TL;DR&lt;/h3&gt;&lt;p&gt;これはズブのフォント素人による try&amp;error なので大いに間違っている可能性もある。&lt;/p&gt;&lt;p&gt;結論から言うとまだ納得の行く改造版 Migu の作成には至っていない。&lt;/p&gt;&lt;p&gt;Cascadia も Hack も Narrow な Powerline グリフが埋め込まれているっぽい。 ここに来て Migu に直接 Narrow な Powerline グリフを埋め込んだらええやんけ、という Nerd Fonts 回帰案が浮上した(うまく行った試しないのだけど)。&lt;/p&gt;&lt;p&gt;To be Continued...&lt;/p&gt;&lt;h3 id=&quot;経緯&quot;&gt;経緯&lt;/h3&gt;&lt;p&gt;長年 Migu を愛用している。&lt;/p&gt;&lt;p&gt;Migu の良さはそのスリムでシンプルな見栄えだけでなく、Proportional と Monospace で同じ字体を使えることだ。 しかし最近の開発環境で使うにはアイコンフォントが同梱されないことで不便を感じることが多い。特に Powerline を使っているとアイコンフォントは必須。 ということで 5 年ほど前から &lt;a href='https://github.com/iij/fontmerger'&gt;iij/fontmerger&lt;/a&gt; を使って Nerd fonts などを追加した自作フォントを使っている。&lt;/p&gt;&lt;p&gt;しかしこれがここ 1,2 年くらいで Windows Terminal を使い始めたことで納得いかない点が出てきた。 &quot;Ambiguous&quot;なフォントについては全部 Narrow サイズになる ≒ Certain なフォントについてはサイズが適用される？だと？&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/microsoft/terminal/pull/2928/commits'&gt;TermControl: force all ambiguous glyphs to be narrow by DHowett-MSFT · Pull Request #2928 · microsoft/terminal&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Windows Terminal とともに提供される &lt;a href='https://github.com/microsoft/cascadia-code'&gt;Cascadia&lt;/a&gt; に関してはどうもこの問題が発生しない。&lt;strong&gt;Powerline グリフに関しては完璧なのだ&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;フォント素人のわたしはこの時こう考えた。&lt;/p&gt;&lt;p&gt;改造 Migu と Cascadia でコードポイントは同じだけどフォントを切り替えるだけで表示サイズが異なってくる。 → つまり Cascadia フォントでは、コードポイント&lt;code&gt;0xE0B0&lt;/code&gt;とかになんかの情報を入れ込んでるのではないか？と...！&lt;/p&gt;&lt;p&gt;グリフのサイズを目視確認するための一覧用コード。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;# Helper function to show Unicode character
function U {
    param
    &amp;#40;
        &amp;#91;int&amp;#93; $Code
    &amp;#41;

    if &amp;#40;&amp;#40;0 -le $Code&amp;#41; -and &amp;#40;$Code -le 0xFFFF&amp;#41;&amp;#41; {
        return &amp;#91;char&amp;#93; $Code
    }

    if &amp;#40;&amp;#40;0x10000 -le $Code&amp;#41; -and &amp;#40;$Code -le 0x10FFFF&amp;#41;&amp;#41; {
        return &amp;#91;char&amp;#93;::ConvertFromUtf32&amp;#40;$Code&amp;#41;
    }

    throw &amp;quot;Invalid character code $Code&amp;quot;
}

# 数値は&amp;#91;Convert&amp;#93;::ToInt32&amp;#40;'0xE080', 16&amp;#41;でHEX変換する
&amp;#40;&amp;#40;170..61278&amp;#41; | %{U $&amp;#95;}&amp;#41; -join ''
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;全然わからない...クソむずすぎる。でも特定のグリフを移植するだけなら、元々改造 Migu を作るのに使っていた fontmerger が利用できる。とおもてたら DEPRECATED になっておった、そら Python2 やからな...&lt;/p&gt;&lt;p&gt;とりあえず最終目標までの段階的目標を立てた。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;お亡くなりになられた fontmerger を Python3 化して動かす&lt;/li&gt;&lt;li&gt;最新の Migu に対して fontmerger で Nerd font patch する&lt;/li&gt;&lt;li&gt;&lt;code&gt;0xE0B0&lt;/code&gt; を始めとした Cascadia でだけうまく表示されるグリフを Migu に移植する&lt;/li&gt;&lt;li&gt;完璧な Migu の完成！&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;2021-03-13&quot;&gt;2021-03-13&lt;/h3&gt;&lt;p&gt;Cascadia を CLI で簡単に落としてくる方法はないものか？&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Invoke-WebRequest -Uri https://github.com/microsoft/cascadia-code/releases/download/v2102.25/CascadiaCode-2102.25.zip -OutFile CascadiaCode-2102.25.zip
Expand-Archive -Path .\CascadiaCode-2102.25.zip -DestinationPath CascadiaCode-2102.25
cd .\CascadiaCode-2102.25\
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;                                                                                                                   2021-03-13 15:27
 takatoshi  &amp;#126;\.\CascadiaCode-2102.25  ll

        Directory: C:\Users\takatoshi\desktop\CascadiaCode-2102.25


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
la---        2021-03-13     15:24                  otf
la---        2021-03-13     15:24                  ttf
la---        2021-03-13     15:24                  woff2

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;フォントの拡張子がわからなくなったのでおさらい。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;otf ... Open Type Font&lt;ul&gt;&lt;li&gt;Adobe と MS で作った。MS 商標。今や一般的。リガチャ使うならこっちしか無理&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;ttf ... True Type Font&lt;ul&gt;&lt;li&gt;Apple 作った。プラットフォーム互換がない&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;woff ... Web Open Font Format 2&lt;ul&gt;&lt;li&gt;Web&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt; takatoshi  &amp;#126;\.\CascadiaCode-2102.25  ll .\otf\static\

        Directory: C:\Users\takatoshi\desktop\CascadiaCode-2102.25\otf\static


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
la---        2021-02-25     20:32         161908   CascadiaCode-Bold.otf
la---        2021-02-25     20:32         150456   CascadiaCode-ExtraLight.otf
la---        2021-02-25     20:32         158652   CascadiaCode-Light.otf
la---        2021-02-25     20:32         158244   CascadiaCode-Regular.otf
la---        2021-02-25     20:32         161960   CascadiaCode-SemiBold.otf
la---        2021-02-25     20:32         159372   CascadiaCode-SemiLight.otf
la---        2021-02-25     20:32         185320   CascadiaCodePL-Bold.otf
la---        2021-02-25     20:32         175352   CascadiaCodePL-ExtraLight.otf
la---        2021-02-25     20:32         181752   CascadiaCodePL-Light.otf
la---        2021-02-25     20:32         181376   CascadiaCodePL-Regular.otf
la---        2021-02-25     20:32         185540   CascadiaCodePL-SemiBold.otf
la---        2021-02-25     20:32         182740   CascadiaCodePL-SemiLight.otf
la---        2021-02-25     20:32         145316   CascadiaMono-Bold.otf
la---        2021-02-25     20:32         133864   CascadiaMono-ExtraLight.otf
la---        2021-02-25     20:32         142060   CascadiaMono-Light.otf
la---        2021-02-25     20:32         141652   CascadiaMono-Regular.otf
la---        2021-02-25     20:32         145368   CascadiaMono-SemiBold.otf
la---        2021-02-25     20:32         142780   CascadiaMono-SemiLight.otf
la---        2021-02-25     20:32         168588   CascadiaMonoPL-Bold.otf
la---        2021-02-25     20:32         158620   CascadiaMonoPL-ExtraLight.otf
la---        2021-02-25     20:32         165020   CascadiaMonoPL-Light.otf
la---        2021-02-25     20:32         164644   CascadiaMonoPL-Regular.otf
la---        2021-02-25     20:32         168808   CascadiaMonoPL-SemiBold.otf
la---        2021-02-25     20:32         166008   CascadiaMonoPL-SemiLight.otf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここで対象になるのは MonoPL(monospace の PowerLine 版)。まだリガチャを受け入れるだけの心のゆとりができていない。&lt;/p&gt;&lt;p&gt;次に [Migu][https://mix-mplus-ipa.osdn.jp/migu/] を落とす。OSDN のリダイレクトかまされ迂回方法がわからないので手で落とした。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt; takatoshi  &amp;#126;\desktop  cd .\migu-1m-20200307\
 takatoshi  &amp;#126;\.\migu-1m-20200307  ll .\migu-1m-20200307\

        Directory: C:\Users\takatoshi\desktop\migu-1m-20200307\migu-1m-20200307


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
la---        2021-03-13     15:39                  ipag00303
la---        2021-03-13     15:39                  mplus-TESTFLIGHT-063a
la---        2020-03-07     22:14        3401580   migu-1m-bold.ttf
la---        2020-03-07     22:12        3144556   migu-1m-regular.ttf
la---        2020-03-08     16:00           2344   migu-README.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fontmerger のスクリプトがちょっと Windows では使いにくそうに見えたので、一旦 Ubuntu(WSL2)でやる。&lt;/p&gt;&lt;p&gt;でも Ubuntu16LTS の fontforge は 2019 年までのやつで古かったので、一旦 WSL2 の Ubuntu を更新することにする。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;sudo apt update
sudo apt upgrade
sudo do-release-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;途中で sshd_config が編集されとんぞ！？と言われて新しいのとローカルのどっち使うか選ばねばいけなかった。ここは新しい方を有効化。この流れで Ubuntu20LTS まで上げた。 Ubuntu20 では fontforge はデフォルトのパッケージではなくなったので、パッケージソースを追加する必要がある。&lt;/p&gt;&lt;p&gt;&lt;a href='https://packages.ubuntu.com/focal/x11/fontforge'&gt;Ubuntu – Details of package fontforge in focal&lt;/a&gt;&lt;/p&gt;&lt;p&gt;universe にあるのがわかったので追加。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;sudo apt-add-repository universe
sudo apt update
sudo apt install fontforge
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;mkdir ./patched
./bin/fontmerger --all -o patched --suffix=with-icons -- migu-1m-regular.ttf migu-1m-bold.ttf migu-1c-regular.ttf migu-1c-bold.ttf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果、無反応。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;krymtkts@krymtkts-stealth:/mnt/c/Users/takatoshi/dev/github.com/krymtkts/fontmerger$ /usr/bin/fontforge -script fontmerger/&amp;#95;&amp;#95;init&amp;#95;&amp;#95;.py
 --all -o patched --suffix=with-icons -- migu-1m-regular.ttf migu-1m-bold.ttf migu-1c-regular.ttf migu-1c-bold.ttf
Copyright &amp;#40;c&amp;#41; 2000-2020. See AUTHORS for Contributors.
 License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
 with many parts BSD &amp;lt;http://fontforge.org/license.html&amp;gt;. Please read LICENSE.
 Version: 20190801
 Based on sources from 03:10 UTC  6-Mar-2020-ML-D-GDK3.
  File &amp;quot;fontmerger/&amp;#95;&amp;#95;init&amp;#95;&amp;#95;.py&amp;quot;, line 103
    except Exception, e:
                    &amp;#94;
SyntaxError: invalid syntax
Error in sys.excepthook:
Traceback &amp;#40;most recent call last&amp;#41;:
  File &amp;quot;/usr/lib/python3.8/subprocess.py&amp;quot;, line 64, in &amp;lt;module&amp;gt;
    import msvcrt
ModuleNotFoundError: No module named 'msvcrt'

During handling of the above exception, another exception occurred:

Traceback &amp;#40;most recent call last&amp;#41;:
  File &amp;quot;/usr/lib/python3/dist-packages/apport&amp;#95;python&amp;#95;hook.py&amp;quot;, line 72, in apport&amp;#95;excepthook
    from apport.fileutils import likely&amp;#95;packaged, get&amp;#95;recent&amp;#95;crashes
  File &amp;quot;/usr/lib/python3/dist-packages/apport/&amp;#95;&amp;#95;init&amp;#95;&amp;#95;.py&amp;quot;, line 5, in &amp;lt;module&amp;gt;
    from apport.report import Report
  File &amp;quot;/usr/lib/python3/dist-packages/apport/report.py&amp;quot;, line 12, in &amp;lt;module&amp;gt;
    import subprocess, tempfile, os.path, re, pwd, grp, os, time, io
  File &amp;quot;/usr/lib/python3.8/subprocess.py&amp;quot;, line 69, in &amp;lt;module&amp;gt;
    import &amp;#95;posixsubprocess
ModuleNotFoundError: No module named '&amp;#95;posixsubprocess'

Original exception was:
  File &amp;quot;fontmerger/&amp;#95;&amp;#95;init&amp;#95;&amp;#95;.py&amp;quot;, line 103
    except Exception, e:
                    &amp;#94;
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;あー、Python2 の構文によるエラーね。解消して再実行してみる。引数も間違ってたし。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;krymtkts@krymtkts-stealth:/mnt/c/Users/takatoshi/dev/github.com/krymtkts/fontmerger$ /usr/bin/fontforge -script fontmerger/&amp;#95;&amp;#95;init&amp;#95;&amp;#95;.py --all -o patched --suffix=with-icons -- ./source/migu-1m-regular.ttf ./source/migu-1m-bold.ttf ./source/migu-1c-regular.ttf ./source/migu-1c-bold.ttf
Copyright &amp;#40;c&amp;#41; 2000-2020. See AUTHORS for Contributors.
 License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
 with many parts BSD &amp;lt;http://fontforge.org/license.html&amp;gt;. Please read LICENSE.
 Version: 20190801
 Based on sources from 03:10 UTC  6-Mar-2020-ML-D-GDK3.
The following table&amp;#40;s&amp;#41; in the font have been ignored by FontForge
  Ignoring 'EPAR'
The glyph named asterisk is mapped to U+F069.
  But its name indicates it should be mapped to U+002A.
The glyph named plus is mapped to U+F067.
  But its name indicates it should be mapped to U+002B.
The glyph named question is mapped to U+F128.
  But its name indicates it should be mapped to U+003F.
The glyph named minus is mapped to U+F068.
  But its name indicates it should be mapped to U+2212.
The glyph named heart is mapped to U+F004.
  But its name indicates it should be mapped to U+2665.
The glyph named home is mapped to U+F015.
  But its name indicates it should be mapped to U+21B8.
The glyph named check is mapped to U+F046.
  But its name indicates it should be mapped to U+2713.
The glyph named bell is mapped to U+F0A2.
  But its name indicates it should be mapped to U+2407.
The glyph named lessequal is mapped to U+F500.
  But its name indicates it should be mapped to U+2264.
The glyph named circle is mapped to U+F111.
  But its name indicates it should be mapped to U+25CB.
The glyph named smile is mapped to U+F118.
  But its name indicates it should be mapped to U+263A.
The glyph named frown is mapped to U+F119.
  But its name indicates it should be mapped to U+2322.
The glyph named bullseye is mapped to U+F140.
  But its name indicates it should be mapped to U+25CE.
The glyph named compass is mapped to U+F14E.
  But its name indicates it should be mapped to U+263C.
The glyph named female is mapped to U+F182.
  But its name indicates it should be mapped to U+2640.
The glyph named male is mapped to U+F183.
  But its name indicates it should be mapped to U+2642.
The glyph named sun is mapped to U+F185.
  But its name indicates it should be mapped to U+263C.
The glyph named venus is mapped to U+F221.
  But its name indicates it should be mapped to U+2640.
The glyph named slash is mapped to U+E016.
  But its name indicates it should be mapped to U+002F.
The glyph named pi is mapped to U+E02C.
  But its name indicates it should be mapped to U+03C0.
The glyph named ring is mapped to U+E03D.
  But its name indicates it should be mapped to U+02DA.
The glyph named infinity is mapped to U+E055.
  But its name indicates it should be mapped to U+221E.
The glyph named equal is mapped to U+E079.
  But its name indicates it should be mapped to U+003D.
The glyph named question is mapped to U+F02C.
  But its name indicates it should be mapped to U+003F.
The glyph named check is mapped to U+F03A.
  But its name indicates it should be mapped to U+2713.
The glyph named plus is mapped to U+F05D.
  But its name indicates it should be mapped to U+002B.
The glyph named x is mapped to U+F081.
  But its name indicates it should be mapped to U+0078.
The glyph named home is mapped to U+F08D.
  But its name indicates it should be mapped to U+21B8.
The glyph named ellipsis is mapped to U+F09A.
  But its name indicates it should be mapped to U+2026.
The glyph named bell is mapped to U+F0DE.
  But its name indicates it should be mapped to U+2407.
The following table&amp;#40;s&amp;#41; in the font have been ignored by FontForge
  Ignoring 'EPAR'
The glyph named asterisk is mapped to U+F069.
  But its name indicates it should be mapped to U+002A.
The glyph named plus is mapped to U+F067.
  But its name indicates it should be mapped to U+002B.
The glyph named question is mapped to U+F128.
  But its name indicates it should be mapped to U+003F.
The glyph named minus is mapped to U+F068.
  But its name indicates it should be mapped to U+2212.
The glyph named heart is mapped to U+F004.
  But its name indicates it should be mapped to U+2665.
The glyph named home is mapped to U+F015.
  But its name indicates it should be mapped to U+21B8.
The glyph named check is mapped to U+F046.
  But its name indicates it should be mapped to U+2713.
The glyph named bell is mapped to U+F0A2.
  But its name indicates it should be mapped to U+2407.
The glyph named lessequal is mapped to U+F500.
  But its name indicates it should be mapped to U+2264.
The glyph named circle is mapped to U+F111.
  But its name indicates it should be mapped to U+25CB.
The glyph named smile is mapped to U+F118.
  But its name indicates it should be mapped to U+263A.
The glyph named frown is mapped to U+F119.
  But its name indicates it should be mapped to U+2322.
The glyph named bullseye is mapped to U+F140.
  But its name indicates it should be mapped to U+25CE.
The glyph named compass is mapped to U+F14E.
  But its name indicates it should be mapped to U+263C.
The glyph named female is mapped to U+F182.
  But its name indicates it should be mapped to U+2640.
The glyph named male is mapped to U+F183.
  But its name indicates it should be mapped to U+2642.
The glyph named sun is mapped to U+F185.
  But its name indicates it should be mapped to U+263C.
The glyph named venus is mapped to U+F221.
  But its name indicates it should be mapped to U+2640.
The glyph named slash is mapped to U+E016.
  But its name indicates it should be mapped to U+002F.
The glyph named pi is mapped to U+E02C.
  But its name indicates it should be mapped to U+03C0.
The glyph named ring is mapped to U+E03D.
  But its name indicates it should be mapped to U+02DA.
The glyph named infinity is mapped to U+E055.
  But its name indicates it should be mapped to U+221E.
The glyph named equal is mapped to U+E079.
  But its name indicates it should be mapped to U+003D.
The glyph named question is mapped to U+F02C.
  But its name indicates it should be mapped to U+003F.
The glyph named check is mapped to U+F03A.
  But its name indicates it should be mapped to U+2713.
The glyph named plus is mapped to U+F05D.
  But its name indicates it should be mapped to U+002B.
The glyph named x is mapped to U+F081.
  But its name indicates it should be mapped to U+0078.
The glyph named home is mapped to U+F08D.
  But its name indicates it should be mapped to U+21B8.
The glyph named ellipsis is mapped to U+F09A.
  But its name indicates it should be mapped to U+2026.
The glyph named bell is mapped to U+F0DE.
  But its name indicates it should be mapped to U+2407.
The following table&amp;#40;s&amp;#41; in the font have been ignored by FontForge
  Ignoring 'EPAR'
The glyph named asterisk is mapped to U+F069.
  But its name indicates it should be mapped to U+002A.
The glyph named plus is mapped to U+F067.
  But its name indicates it should be mapped to U+002B.
The glyph named question is mapped to U+F128.
  But its name indicates it should be mapped to U+003F.
The glyph named minus is mapped to U+F068.
  But its name indicates it should be mapped to U+2212.
The glyph named heart is mapped to U+F004.
  But its name indicates it should be mapped to U+2665.
The glyph named home is mapped to U+F015.
  But its name indicates it should be mapped to U+21B8.
The glyph named check is mapped to U+F046.
  But its name indicates it should be mapped to U+2713.
The glyph named bell is mapped to U+F0A2.
  But its name indicates it should be mapped to U+2407.
The glyph named lessequal is mapped to U+F500.
  But its name indicates it should be mapped to U+2264.
The glyph named circle is mapped to U+F111.
  But its name indicates it should be mapped to U+25CB.
The glyph named smile is mapped to U+F118.
  But its name indicates it should be mapped to U+263A.
The glyph named frown is mapped to U+F119.
  But its name indicates it should be mapped to U+2322.
The glyph named bullseye is mapped to U+F140.
  But its name indicates it should be mapped to U+25CE.
The glyph named compass is mapped to U+F14E.
  But its name indicates it should be mapped to U+263C.
The glyph named female is mapped to U+F182.
  But its name indicates it should be mapped to U+2640.
The glyph named male is mapped to U+F183.
  But its name indicates it should be mapped to U+2642.
The glyph named sun is mapped to U+F185.
  But its name indicates it should be mapped to U+263C.
The glyph named venus is mapped to U+F221.
  But its name indicates it should be mapped to U+2640.
The glyph named slash is mapped to U+E016.
  But its name indicates it should be mapped to U+002F.
The glyph named pi is mapped to U+E02C.
  But its name indicates it should be mapped to U+03C0.
The glyph named ring is mapped to U+E03D.
  But its name indicates it should be mapped to U+02DA.
The glyph named infinity is mapped to U+E055.
  But its name indicates it should be mapped to U+221E.
The glyph named equal is mapped to U+E079.
  But its name indicates it should be mapped to U+003D.
The glyph named question is mapped to U+F02C.
  But its name indicates it should be mapped to U+003F.
The glyph named check is mapped to U+F03A.
  But its name indicates it should be mapped to U+2713.
The glyph named plus is mapped to U+F05D.
  But its name indicates it should be mapped to U+002B.
The glyph named x is mapped to U+F081.
  But its name indicates it should be mapped to U+0078.
The glyph named home is mapped to U+F08D.
  But its name indicates it should be mapped to U+21B8.
The glyph named ellipsis is mapped to U+F09A.
  But its name indicates it should be mapped to U+2026.
The glyph named bell is mapped to U+F0DE.
  But its name indicates it should be mapped to U+2407.
The following table&amp;#40;s&amp;#41; in the font have been ignored by FontForge
  Ignoring 'EPAR'
The glyph named asterisk is mapped to U+F069.
  But its name indicates it should be mapped to U+002A.
The glyph named plus is mapped to U+F067.
  But its name indicates it should be mapped to U+002B.
The glyph named question is mapped to U+F128.
  But its name indicates it should be mapped to U+003F.
The glyph named minus is mapped to U+F068.
  But its name indicates it should be mapped to U+2212.
The glyph named heart is mapped to U+F004.
  But its name indicates it should be mapped to U+2665.
The glyph named home is mapped to U+F015.
  But its name indicates it should be mapped to U+21B8.
The glyph named check is mapped to U+F046.
  But its name indicates it should be mapped to U+2713.
The glyph named bell is mapped to U+F0A2.
  But its name indicates it should be mapped to U+2407.
The glyph named lessequal is mapped to U+F500.
  But its name indicates it should be mapped to U+2264.
The glyph named circle is mapped to U+F111.
  But its name indicates it should be mapped to U+25CB.
The glyph named smile is mapped to U+F118.
  But its name indicates it should be mapped to U+263A.
The glyph named frown is mapped to U+F119.
  But its name indicates it should be mapped to U+2322.
The glyph named bullseye is mapped to U+F140.
  But its name indicates it should be mapped to U+25CE.
The glyph named compass is mapped to U+F14E.
  But its name indicates it should be mapped to U+263C.
The glyph named female is mapped to U+F182.
  But its name indicates it should be mapped to U+2640.
The glyph named male is mapped to U+F183.
  But its name indicates it should be mapped to U+2642.
The glyph named sun is mapped to U+F185.
  But its name indicates it should be mapped to U+263C.
The glyph named venus is mapped to U+F221.
  But its name indicates it should be mapped to U+2640.
The glyph named slash is mapped to U+E016.
  But its name indicates it should be mapped to U+002F.
The glyph named pi is mapped to U+E02C.
  But its name indicates it should be mapped to U+03C0.
The glyph named ring is mapped to U+E03D.
  But its name indicates it should be mapped to U+02DA.
The glyph named infinity is mapped to U+E055.
  But its name indicates it should be mapped to U+221E.
The glyph named equal is mapped to U+E079.
  But its name indicates it should be mapped to U+003D.
The glyph named question is mapped to U+F02C.
  But its name indicates it should be mapped to U+003F.
The glyph named check is mapped to U+F03A.
  But its name indicates it should be mapped to U+2713.
The glyph named plus is mapped to U+F05D.
  But its name indicates it should be mapped to U+002B.
The glyph named x is mapped to U+F081.
  But its name indicates it should be mapped to U+0078.
The glyph named home is mapped to U+F08D.
  But its name indicates it should be mapped to U+21B8.
The glyph named ellipsis is mapped to U+F09A.
  But its name indicates it should be mapped to U+2026.
The glyph named bell is mapped to U+F0DE.
  But its name indicates it should be mapped to U+2407.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;警告出るがフォントの生成完了。開いてみるも、いやフォントが壊れてるわ...なんでや？&lt;/p&gt;&lt;p&gt;理由がわかった。fontmerger の実行後に出力先フォルダからフォントを移動するとプレビューできる。出力先フォルダに fontforge の謎のハンドルが残っている様子。&lt;/p&gt;&lt;p&gt;fontmerger の Python3 化が完了した。&lt;a href='https://github.com/krymtkts/fontmerger'&gt;GitHub - krymtkts/fontmerger: FontForge script for to merge any fonts&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;2021-04-10&quot;&gt;2021-04-10&lt;/h3&gt;&lt;p&gt;Cascadia からコピる範囲を決める。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt; takatoshi  &amp;#126;\.\.\.\fontmerger   master ≣ +1 &amp;#126;2 -6 !  &amp;#91;Convert&amp;#93;::ToInt32&amp;#40;'0xE0A0', 16&amp;#41;
57504
 takatoshi  &amp;#126;\.\.\.\fontmerger   master ≣ +1 &amp;#126;2 -6 !  &amp;#91;Convert&amp;#93;::ToInt32&amp;#40;'0xE0D4', 16&amp;#41;
57556                                                                                                             2021-04-10 15:17
 takatoshi  &amp;#126;\.\.\.\fontmerger   master ≣ +1 &amp;#126;2 -6 !  &amp;#40;&amp;#40;57504..57556&amp;#41; | %{U $&amp;#95;}&amp;#41; -join ''

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cascadia には Powerline の拡張グリフくらいしか入っていないので Powerline の部分を抜き出して Migu にコピーする。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;/usr/bin/fontforge -script fontmerger/&amp;#95;&amp;#95;init&amp;#95;&amp;#95;.py --all -o patched --suffix=cascadia -- ./source/migu-1m-regular.ttf ./source/migu-1m-bold.ttf ./source/migu-1c-regular.ttf ./source/migu-1c-bold.ttf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果は Cascadia からコピーした領域は以前 Ambiguous なままだった...なんでだろう。以下が追加の Cascadia からコピる設定。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
    &amp;quot;id&amp;quot;: &amp;quot;cascadia-powerline&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Cascadia Powerline Symbols&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Powerline symbols copied from Cascadia Code. https://github.com/microsoft/cascadia-code&amp;quot;,
    &amp;quot;filename&amp;quot;: &amp;quot;./fonts/cascadia/CascadiaCodePL-Regular.otf&amp;quot;,
    &amp;quot;unicode&amp;#95;range&amp;quot;: &amp;#91;
      &amp;quot;E0A0&amp;quot;,
      &amp;quot;E0D4&amp;quot;
    &amp;#93;
  },
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コピっても解消しないのか...と思ってた矢先、フォカのフォントを参考に調べていて &lt;a href='https://github.com/yuru7/HackGen'&gt;GitHub - yuru7/HackGen: HackGen is Japanese programming font which is a composed of Hack and GenJyuu-Gothic.&lt;/a&gt; なるフォントを見つけた。&lt;/p&gt;&lt;p&gt;あれ、このフォント Powerline グリフが Windows Terminal でも崩れないし、見た目も結構好みでこれちょっとよいかも...と浮気しそうになるも、やはり字幅の広さが気に入らず Migu に返り咲くワイ。&lt;/p&gt;&lt;p&gt;それはそうと Powerline グリフが崩れないのはなんでか？と思ってみてたところ、これ Symbol フォントが Narrow スペースなのね。Cascadia もそう。つまり問題なのはフォント幅じゃね？と気づく。 更に々々、Nerd Fonts から提供されている Hack を使うと、PowerShell モジュールの Terminal Icons で表示されるファイルアイコンすらも小さくならずに表示できるではないかい！これやろ答え。&lt;/p&gt;&lt;p&gt;数年前に試してうまくいったことがないのが心配のタネだが、ここは原点回帰して Nerd Fonts の font-patcher で Migu に Narrow スペースでパッチしてみるか～という気持ちになった。&lt;/p&gt;&lt;h3 id=&quot;現状&quot;&gt;現状&lt;/h3&gt;&lt;p&gt;ただ単に Migu の最新版にパッチしただけの状態になっているのだが、途中経過をまとめておかないと着手する時加齢に忘れてて辛いので一旦状況をまとめた。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;[x] お亡くなりになられた fontmerger を Python3 化して動かす&lt;/li&gt;&lt;li&gt;[x] 最新の Migu に対して fontmerger で Nerd font patch する&lt;/li&gt;&lt;li&gt;[x] &lt;code&gt;0xE0B0&lt;/code&gt; を始めとした Cascadia でだけうまく表示されるグリフを Migu に移植する&lt;ul&gt;&lt;li&gt;そして効果なし！&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;[ ] Nerd Fonts の font-patcher で Migu にパッチしてみる &lt;- &lt;strong&gt;NEW!!!&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;[ ] 完璧な Migu の完成！&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;俺たちの戦いはこれからだ！😭😭😭&lt;/p&gt;
</description>
<pubDate>
Sun, 11 Apr 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-03-06-fix-publish-failure-to-powershell-gallery
</guid>
<link>
http://krymtkts.github.io/posts/2021-03-06-fix-publish-failure-to-powershell-gallery
</link>
<title>
PSGallery への公開つまづき 2021
</title>
<description>
&lt;p&gt;今年のはじめに&lt;a href='https://github.com/krymtkts/Get-GzipContent'&gt;krymtkts/Get-GzipContent: Get-Content for gzip files.&lt;/a&gt;の更新を行った際に、PoweShell Gallery への公開で手間取った。その 2 ヶ月遅れの記録である。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/PowerShell/PowerShellGetv2/issues/303#issuecomment-433139506'&gt;Publish-Module throws error &quot;Failed to generate the compressed file for module 'Microsoft (R) Build Engine version 15.7.179.6572 for .NET Core'&quot; · Issue #303 · PowerShell/PowerShellGetv2&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile &amp;quot;$env:LOCALAPPDATA\Microsoft\Windows\PowerShell\PowerShellGet\NuGet.exe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;いやまあこれで直ったんやけど、わからなさすぎてこの記事も見た。&lt;/p&gt;&lt;p&gt;&lt;a href='https://sqldbawithabeard.com/2019/11/26/fixing-the-failed-to-generate-the-compressed-file-for-module-cprogram-filesdotnetdotnet-exe-error-when-deploying-to-the-powershell-gallery-using-azure-devops/'&gt;Fixing the ‘Failed to generate the compressed file for module ‘C:\Program Files\dotnet\dotnet.exe’ error when deploying to the PowerShell Gallery using Azure DevOps | SQL DBA with A Beard&lt;/a&gt;&lt;/p&gt;&lt;p&gt;これは一時しのぎなので最終的に目指すのは配置している&lt;code&gt;nuget.exe&lt;/code&gt;を消し去っても動くようになることだ。とはいえまた次公開するときまで使うときがないので試すのめんどくせええ＆次試そうと思っても忘れる...ということで一旦 Chocolatey で NuGet を入れておいて保険とした。でもこれ自体も本来バイナリ不要で動いてたことからしたら蛇足のはずやねんけどな、Issue に進捗なく Close されてるからわからん。まあ日記にも書いたからエラーしたときにきっと振り返れる、未来のワイ。&lt;/p&gt;&lt;p&gt;あと年に数回しか PowerShell Gallery に公開しないとやり方とか色々忘れるのだけど、一番忘れるのが API キーの寿命が短く設定してあって切れてるということ。今回期限切れの API キーを再有効化できるってのを知ったので、それはそれで良。&lt;/p&gt;&lt;p&gt;&lt;a href='https://docs.microsoft.com/ja-jp/powershell/scripting/gallery/how-to/managing-profile/creating-apikeys?view=powershell-7.1#editing-and-deleting-existing-api-keys'&gt;API キーの管理 - PowerShell | Microsoft Docs&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>
Sat, 06 Mar 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-02-12-various-stories-about-starting-to-use-nodist
</guid>
<link>
http://krymtkts.github.io/posts/2021-02-12-various-stories-about-starting-to-use-nodist
</link>
<title>
色々あって Nodist を使い始めた話
</title>
<description>
&lt;p&gt;重い腰を上げて、&lt;a href='https://github.com/krymtkts/mccall-bot'&gt;Slackbot のマッコールさん&lt;/a&gt;の Typo を直す気になった。 タイポの修正と追加のセンテンスを登録して、いざ deploy しようとしたら、Serverless Framework がエラーを吐くようになっていた。↓ らしい。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/serverless/serverless/issues/8794'&gt;Unable to deploy to Serverless due to 'empty zip' · Issue #8794 · serverless/serverless&lt;/a&gt;&lt;/p&gt;&lt;p&gt;aws-cdk の方も同様のバグがあるらしいけど、あっちは直してくれてるみたい。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/aws/aws-cdk/issues/12536'&gt;lambda: corrupt zip archive asset produced when using node v15.6 · Issue #12536 · aws/aws-cdk&lt;/a&gt;&lt;/p&gt;&lt;p&gt;残念ながら Serverless Framework の方は直してないっぽなので、Node.js のバージョンを 15 から 14 に落とす必要が出てきた。この時リアルタイムで友人に &lt;a href='https://github.com/nullivex/nodist'&gt;nodist&lt;/a&gt; を教えてもらったので、これを使って複数の系を利用できるようにした。&lt;/p&gt;&lt;p&gt;&lt;del&gt;(というか Chocolatey で Node.js の v15 を uninstall して v14 入れようとしてもなんかエラーになって、ログ見たら「新しい版いるから失敗するね！」てあって「はぁ!?」と調べたら&lt;code&gt;choco uninstall nodejs&lt;/code&gt;は仕事してくれへんらしい。古き良き Chocolatey 流儀はやめろ。で日頃使ってた node modules も全部吹っ飛んで災難やで...)&lt;/del&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;choco install nodist -y
# RapidEE で PATH に `C:\Program Files &amp;#40;x86&amp;#41;\Nodist\bin` を追加した

# nodist と一緒に install される系は古い
nodist list
  &amp;#40;x64&amp;#41;
&amp;gt; 11.13.0
# 15 系と 14 系の最新を入れる
nodist add 15.8.0
nodist add 14.15.5
# 14 系を選択
nodist 14.15.5
# npm も古い
nodist npm list
&amp;gt; 6.9.0
# 選択中の node と合わせる
nodist npm match
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://nodejs.org/ja/download/releases/'&gt;Node.js のリリース一覧&lt;/a&gt;から node と npm の対応を見て選んでってやってもいいけど、そんなんめんどすぎるので &lt;code&gt;nodist npm match&lt;/code&gt; の一度ではないかと考える。 もし、厳密に指定のバージョン使いたいとかあったら加初環境をコンテナに構築したりすればいいし、そもそも nodist を使ってローカル PC のグローバル node をこねくったりしてないはず。&lt;/p&gt;&lt;p&gt;ちょっとおもしろいのが、node/npm の version を変えても install した node_modules は同じものを使えるところ。 v14.15.5 で入れたモジュールが v15.8.0 でも見れた。何度も同じモジュールをインストールしなくていいのは楽やけど、バージョン互換性の厳しいモジュールは使うのが難しいのでは。&lt;/p&gt;&lt;p&gt;node、npm、モジュールの実態はそれぞれ、&lt;code&gt;$env:NODIST&amp;#95;PREFIX/v-x64&lt;/code&gt;(32bit が&lt;code&gt;$env:NODIST&amp;#95;PREFIX/v&lt;/code&gt;?) &lt;code&gt;$env:NODIST&amp;#95;PREFIX/npmv&lt;/code&gt; &lt;code&gt;$env:NODIST&amp;#95;PREFIX/bin/node&amp;#95;modules&lt;/code&gt; 配下にインストールされる様子。&lt;/p&gt;&lt;p&gt;nodist、どうも 2019 年を最後にメンテが止まっている様子(単にマジで変更がないのかも知れん)。現時点でこいつが最後 &lt;a href='https://github.com/nullivex/nodist/commit/bb099ba3723027469bf46e3159f51171b5dd4b59'&gt;Fix deprecated use of Tar.Extract in npm.js, release 0.9.1 · nullivex/nodist@bb099ba&lt;/a&gt;&lt;/p&gt;&lt;p&gt;とはいえ便利なので不都合ない限り利用してみるつもり。&lt;/p&gt;&lt;p&gt;と色々やったことでようやくマッコールさん Bot の最新版を deploy できるようになったとさ。めでたし x2。&lt;/p&gt;
</description>
<pubDate>
Fri, 12 Feb 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-02-01-go-map-key-tips
</guid>
<link>
http://krymtkts.github.io/posts/2021-02-01-go-map-key-tips
</link>
<title>
go の map のキーの Tips
</title>
<description>
&lt;ul&gt;&lt;li&gt;知ってた&lt;ul&gt;&lt;li&gt;&lt;code&gt;map&lt;/code&gt;のキーには&lt;code&gt;struct&lt;/code&gt;が使える&lt;/li&gt;&lt;li&gt;キーがポインタやポインタを含む&lt;code&gt;struct&lt;/code&gt;の場合、ポインタの指す値が同じでもポインタ値自体が比較されるため異なるキーとなる&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;知らなかった&lt;ul&gt;&lt;li&gt;&lt;code&gt;interface&lt;/code&gt;もキーにできる&lt;ul&gt;&lt;li&gt;キーを追加するときにポインタを使ってないこと&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;time.Time&lt;/code&gt;はキーにつこたらあかん&lt;ul&gt;&lt;li&gt;&lt;a href='https://go.googlesource.com/go/+/go1.15.6/src/time/time.go#147'&gt;src/time/time.go - go - Git at Google&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://pkg.go.dev/time#Time'&gt;time · pkg.go.dev&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&gt; Note that the Go == operator compares not just the time instant but also the Location and the monotonic clock reading. Therefore, Time values should not be used as map or database keys without first guaranteeing that the identical Location has been set for all values, which can be achieved through use of the UTC or Local method, and that the monotonic clock reading has been stripped by setting t = t.Round(0). In general, prefer t.Equal(u) to t == u, since t.Equal uses the most accurate comparison available and correctly handles the case when only one of its arguments has a monotonic clock reading.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;UT では一致しちゃいバグを見つけられなかった...😥&lt;/li&gt;&lt;li&gt;まだわかってないのが、&lt;code&gt;Location&lt;/code&gt;が必ず同じになるようにしてた＆年月日だけの情報しか持ってなかったのにずれとんのかい！？というところ&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href='https://play.golang.org/p/Rd5OJ2S37AT'&gt;コード&lt;/a&gt;。このコードでは&lt;code&gt;time.Time&lt;/code&gt;のキーのズレは再現しないけど。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;package main

import &amp;#40;
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
&amp;#41;

type Key interface {
}

type KeyA struct {
	s string
}

type KeyB struct {
	s string
	i int
}

type KeyC struct {
	t time.Time
}

type KeyD struct {
	a &amp;#42;KeyA
}

func checkInterfaceKey&amp;#40;&amp;#41; {
	m := map&amp;#91;Key&amp;#93;int{}
	m&amp;#91;KeyA{
		s: &amp;quot;A1&amp;quot;,
	}&amp;#93; = 1
	m&amp;#91;KeyA{
		s: &amp;quot;A1&amp;quot;,
	}&amp;#93; = 2
	m&amp;#91;KeyA{
		s: &amp;quot;A2&amp;quot;,
	}&amp;#93; = 3
	m&amp;#91;KeyB{
		s: &amp;quot;B1&amp;quot;,
		i: 1,
	}&amp;#93; = 4
	m&amp;#91;KeyB{
		s: &amp;quot;B1&amp;quot;,
		i: 1,
	}&amp;#93; = 5
	m&amp;#91;KeyB{
		s: &amp;quot;B1&amp;quot;,
		i: 2,
	}&amp;#93; = 6
	fmt.Printf&amp;#40;&amp;quot;%v\n&amp;quot;, m&amp;#41;
}

func init&amp;#40;&amp;#41; {
	location := &amp;quot;Asia/Tokyo&amp;quot;
	loc, err := time.LoadLocation&amp;#40;location&amp;#41;
	if err != nil {
		loc = time.FixedZone&amp;#40;location, 9&amp;#42;60&amp;#42;60&amp;#41;
	}
	time.Local = loc
	fmt.Printf&amp;#40;&amp;quot;%v\n&amp;quot;, loc&amp;#41;
}

func checkPointerIncludedKey&amp;#40;&amp;#41; {
	m := map&amp;#91;Key&amp;#93;int{}
	m&amp;#91;KeyC{
		t: time.Date&amp;#40;2021, 2, 1, 0, 0, 0, 0, time.Local&amp;#41;,
	}&amp;#93; = 1
	m&amp;#91;KeyC{
		t: time.Date&amp;#40;2021, 2, 1, 0, 0, 0, 0, time.Local&amp;#41;,
	}&amp;#93; = 2
	m&amp;#91;KeyD{
		a: &amp;amp;KeyA{
			s: &amp;quot;D1&amp;quot;,
		},
	}&amp;#93; = 3
	m&amp;#91;KeyD{
		a: &amp;amp;KeyA{
			s: &amp;quot;D1&amp;quot;,
		},
	}&amp;#93; = 4
	fmt.Printf&amp;#40;&amp;quot;%v\n&amp;quot;, m&amp;#41;
}

func main&amp;#40;&amp;#41; {
	checkInterfaceKey&amp;#40;&amp;#41;
	checkPointerIncludedKey&amp;#40;&amp;#41;
}

&lt;/code&gt;&lt;/pre&gt;
</description>
<pubDate>
Mon, 01 Feb 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-01-30-beware-to-update-aws-tools
</guid>
<link>
http://krymtkts.github.io/posts/2021-01-30-beware-to-update-aws-tools
</link>
<title>
AWS.Tools.Installer で入れたモジュールの更新は気をつけろよ
</title>
<description>
&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Install-Package: C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\PowerShellGet\2.2.5\PSModule.psm1:13069
 Line |
13069 |  …           $sid = PackageManagement\Install-Package @PSBoundParameters
      |                     &amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;
      | Unable to find repository 'C:\Users\takatoshi\AppData\Local\Temp\xeqcnbnp.pgl'. Use Get-PSRepository to see all available repositories.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;普段 PowerShell Module を一括更新しているのだけど、変なエラーが出るよになった。&lt;/p&gt;&lt;p&gt;一括更新は、 &lt;code&gt;Get-InstalledModule | Update-Module -AllowPrerelease&lt;/code&gt; で。&lt;/p&gt;&lt;p&gt;ちょうど最近、 &lt;a href='https://github.com/PowerShell/PowerShellGetv2/issues/303'&gt;Publish-Module うまくいかない問題&lt;/a&gt; を解消したり Win10 の更新したりしてたので、そのへんかなーと思い NuGet の Provider の登録し直しとか色々やっても直らず 😥&lt;/p&gt;&lt;p&gt;初心に帰って、↑ のログを見てみたら「何やねんこの謎 repo」というのに気づき、 改めて&lt;code&gt;Get-InstalledModule&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;PowerShell&quot;&gt; ⚡ takatoshi  &amp;#126;  Get-InstalledModule

Version              Name                                Repository           Description
-------              ----                                ----------           -----------
4.1.7.0              AWS.Tools.Amplify                   C:\Users\takatoshi\… The Amplify module of AWS Tools for PowerShell lets developers and administrators manage AWS Amplify from the PowerShell scripting environment. In order to manage each AWS service, install th…
4.1.7.0              AWS.Tools.CloudFormation            C:\Users\takatoshi\… The CloudFormation module of AWS Tools for PowerShell lets developers and administrators manage AWS CloudFormation from the PowerShell scripting environment. In order to manage each AWS servi…
4.1.7.0              AWS.Tools.Common                    C:\Users\takatoshi\… The AWS Tools for PowerShell lets developers and administrators manage their AWS services from the PowerShell scripting environment. In order to manage each AWS service, install the correspon…
4.1.7.0              AWS.Tools.EC2                       C:\Users\takatoshi\… The EC2 module of AWS Tools for PowerShell lets developers and administrators manage Amazon Elastic Compute Cloud &amp;#40;EC2&amp;#41; from the PowerShell scripting environment. In order to manage each AWS …
4.1.7.0              AWS.Tools.IdentityManagement        C:\Users\takatoshi\… The IdentityManagement module of AWS Tools for PowerShell lets developers and administrators manage AWS Identity and Access Management from the PowerShell scripting environment. In order to m…
1.0.2.0              AWS.Tools.Installer                 PSGallery            The AWS.Tools.Installer module makes it easier to install, update and uninstall other AWS.Tools modules &amp;#40;see https://www.powershellgallery.com/packages/AWS.Tools.Common/&amp;#41;.…
4.1.7.0              AWS.Tools.Lambda                    C:\Users\takatoshi\… The Lambda module of AWS Tools for PowerShell lets developers and administrators manage AWS Lambda from the PowerShell scripting environment. In order to manage each AWS service, install the …
4.1.7.0              AWS.Tools.S3                        C:\Users\takatoshi\… The S3 module of AWS Tools for PowerShell lets developers and administrators manage Amazon Simple Storage Service &amp;#40;S3&amp;#41; from the PowerShell scripting environment. In order to manage each AWS s…
4.1.7.0              AWS.Tools.SecretsManager            C:\Users\takatoshi\… The SecretsManager module of AWS Tools for PowerShell lets developers and administrators manage AWS Secrets Manager from the PowerShell scripting environment. In order to manage each AWS serv…
0.1.8                ClipboardText                       PSGallery            Support for text-based clipboard operations for PowerShell Core &amp;#40;cross-platform&amp;#41; and older versions of Windows PowerShell
1.3.1                Configuration                       PSGallery            A module for storing and reading configuration values, with full PS Data serialization, automatic configuration for modules and scripts, etc.
1.2010.0.201211      DockerCompletion                    PSGallery            Docker command completion for PowerShell.
1.27.0.200908        DockerComposeCompletion             PSGallery            Docker Compose command completion for PowerShell.
0.16.2.190903        DockerMachineCompletion             PSGallery            Docker Machine command completion for PowerShell.
0.2                  MavenAutoCompletion                 PSGallery            Maven Auto Completion provides a simple auto completion of Maven 3 to PowerShell.
3.75.0-beta          oh-my-posh                          PSGallery            A prompt theme engine for any shell
1.4.7                PackageManagement                   PSGallery            PackageManagement &amp;#40;a.k.a. OneGet&amp;#41; is a new way to discover and install software packages from around the web.…
5.1.0-rc1            Pester                              PSGallery            Pester provides a framework for running BDD style Tests to execute and validate PowerShell commands inside of PowerShell and offers a powerful set of Mocking Functions that allow tests to mim…
1.1.0                poco                                PSGallery            Interactive filtering command based on peco
1.0.0-beta3          posh-git                            PSGallery            Provides prompt with Git status summary information and tab completion for Git commands, parameters, remotes and branch names.
0.16.0               PowerShellForGitHub                 PSGallery            PowerShell wrapper for GitHub API
3.0.0-beta10         PowerShellGet                       PSGallery            PowerShell module with commands for discovering, installing, updating and publishing the PowerShell artifacts like Modules, DSC Resources, Role Capabilities and Scripts.
4.9.0                psake                               PSGallery            psake is a build automation tool written in PowerShell.
2.2.0-beta1          PSReadLine                          PSGallery            Great command line editing in the PowerShell console host
1.19.1               PSScriptAnalyzer                    PSGallery            PSScriptAnalyzer provides script analysis and checks for potential code defects in the scripts by applying a group of built-in or customized rules on the scripts being analyzed.
0.2.2                Terminal-Icons                      PSGallery            PowerShell module to add file icons to terminal based on file extension
2.2.0                Get-ChildItemColor                  PSGallery            Get-ChildItemColor provides colored versions of Get-ChildItem Cmdlet and Get-ChildItem | Format-Wide &amp;#40;ls equivalent&amp;#41;
0.1.2                Get-GzipContent                     PSGallery            Gets the content of the gzip archive at the specified location.
1.0.1.10             GoogleCloud                         PSGallery            PowerShell cmdlets for the Google Cloud Platform.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ﾌｷﾞｬｰ、AWS.Tools.Installer で入れたモジュールは全て repo が一時ファイルになっとるやんけ！😇&lt;/p&gt;&lt;p&gt;これは事案ですね。ということでとりま暫定対処として Repository が PSGallery のやつだけにした。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Get-InstalledModule | Where-Object -Property Repository -eq 'PSGallery' | Update-Module -AllowPrerelease
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://github.com/aws/aws-tools-for-powershell/issues?q=is%3Aissue+is%3Aopen+unable+to+find+repository'&gt;AWS Tools の GitHub&lt;/a&gt; を見てみても誰も同じような話はしてないし、みんな真面目に&lt;code&gt;Update-AWSToolsModule&lt;/code&gt;と&lt;code&gt;Update-Module&lt;/code&gt;使い分けれてんねな～エライ！というのに気づいた一日であった。&lt;/p&gt;&lt;p&gt;ﾁｬﾝﾁｬﾝ。&lt;/p&gt;
</description>
<pubDate>
Sat, 30 Jan 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2021-01-04-planning
</guid>
<link>
http://krymtkts.github.io/posts/2021-01-04-planning
</link>
<title>
2021
</title>
<description>
&lt;p&gt;年始めに抱負を明文化しておくのと年末振り返りしやすいから例年通りやっとく。 なんか定量的なやつと定性的なやつがごっちゃになっとるけど、ええんや。&lt;/p&gt;&lt;h4 id=&quot;テーマ:&amp;#95;自分を大事に&quot;&gt;テーマ: 自分を大事に&lt;/h4&gt;&lt;p&gt;これは仕事と自己学習の両方でだ。&lt;/p&gt;&lt;p&gt;仕事の方は、年末年始ずっと働き詰めだった。土日以外で完全な休みは今日 2020-01-04 となってしまった。もちろん家族への負担も大きかったし、年末年始でやろうと思っていた勉強だったり久しぶりにゲームやっちゃうかな？といった Fun な部分も全て蔑ろにしてしまった。 何でもかんでも「ワイがやらなあかんねや」と意気込むのは良いのだが、そこで得られるものとは如何に？刮目せなあかん。 数年前にエッセンシャル思考を読んだあと、立ち振舞を改めたときの状況に似ている。同じ轍を踏んでもーたわけでみっともない話や。&lt;/p&gt;&lt;p&gt;わたしが働くのは、楽しくプログラムを書いて自分を高め、かつ日銭を稼ぐことのできる都合が良い仕事だからだ。自身の人生を蔑ろにしたいわけではない。ここを改めて強調していきたい。&lt;/p&gt;&lt;p&gt;自己学習においても同様、WFH 歴もあと数ヶ月で 1 年となるけど、家のことをやる時間だけが増殖して、本を読む機会を失ってしまった。このように自分の考えを文章にまとめる機会すら少なくなっていた。これはよろしくない。 新しい技術などは極力仕事で取り組めるように取りなしているが、そこから溢れるものは私生活で掬うしかない。 学習習慣を日常生活に浸透させることでこの状況を打破したい。&lt;/p&gt;&lt;h3 id=&quot;2021&amp;#95;年の目標&quot;&gt;2021 年の目標&lt;/h3&gt;&lt;p&gt;継続するテーマと新しい奴ら。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;NEW!&lt;/strong&gt; 住みたい場所を決める&lt;ul&gt;&lt;li&gt;長年田舎に住みたいと思っているのだけど、昨年色々あって目当てだったところは住むのが難しそうになった。とりあえず今年はふんわりとでも候補地を固めるのが目標。&lt;/li&gt;&lt;li&gt;現職は WFH やからいいけどもし転職したら...とか考えると成約ばかりにで嫌気がさすが、そこは縛りゲーばりに割り切ってフルリモートの仕事しか選ばん所存。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;NEW!&lt;/strong&gt; 仕事上の掃除&lt;ul&gt;&lt;li&gt;&lt;code&gt;組織とビジネスは潰す、ひとつずつ、一ドルずつ、一人ずつ - ロバート・マッコール&lt;/code&gt;&lt;/li&gt;&lt;li&gt;壊れたままの〇〇&lt;ul&gt;&lt;li&gt;CI パイプライン直す&lt;/li&gt;&lt;li&gt;テスト直す&lt;/li&gt;&lt;li&gt;チーム直す&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;これはまず家を建てる前に土台を固めるのと同じことなので、この障害を取り除かんとアプリをもりもり書くのも難しい&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;昇給&lt;ul&gt;&lt;li&gt;やってることが間違っていなけれ場評価は勝手についてくるのだが、金額はついてこないので、ここは要相談やな&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;積ん読の消化&lt;ul&gt;&lt;li&gt;月に 1 冊を消化する&lt;/li&gt;&lt;li&gt;いま SNS 殆どやってないけど、Chrome のサジェストや RSS のフィードを読む時間増えてるので、そこを読書に置き換える&lt;/li&gt;&lt;li&gt;手の届くとこに読んでる本数冊を置くとか？&lt;/li&gt;&lt;li&gt;いま昼飯時間も仕事してるからそれを単純に読書に置き換えるのも良い&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;OSS へのコントリビューション&lt;ul&gt;&lt;li&gt;気が向いたら。とりあえず今は身の回りのこと優先なので低く。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;自作ツールの更新&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/krymtkts/Get-GzipContent'&gt;krymtkts/Get-GzipContent: Get-Content for gzip files.&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;#42;&lt;/code&gt; ファイルに対応させる(最近できてへんのに気づいた)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/krymtkts/mccall-bot'&gt;mccall-bot&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Typo 修正、マルチチャンネル対応したい...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;ギター練習を 30 分/週 3 回&lt;ul&gt;&lt;li&gt;&lt;a href='https://aristidesinstruments.com/guitar/h-08'&gt;真に求めていたスペックのギター&lt;/a&gt;が現れたのだけど、スキルのほうが劣化しすぎて...一から出直すため&lt;/li&gt;&lt;li&gt;バンド練習は COVID19 のこともあるし当面無理かな&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://krymtkts.github.io/'&gt;このブログ&lt;/a&gt;を毎月更新する&lt;ul&gt;&lt;li&gt;いつも未達なので&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;NEW!&lt;/strong&gt; 日頃使ってるスニペット的なのを Gist に登録していく&lt;ul&gt;&lt;li&gt;Evernote に書いたりローカルに残してるよりも、こっちのほうが良さそうやから&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Mon, 04 Jan 2021 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-12-27-ns-record-of-route53-hosted-zone
</guid>
<link>
http://krymtkts.github.io/posts/2020-12-27-ns-record-of-route53-hosted-zone
</link>
<title>
Rote53 ホストゾーンの NS レコード
</title>
<description>
&lt;p&gt;これで 12 月だいぶ躓いたので書いとくわ。思い出じゃ。&lt;/p&gt;&lt;p&gt;NS レコードは Simple Routing しかサポートしてへん。まずそれは AWS Management Console でわかる。 これを AWSPowerShell のパラメータでどうやんのかがわからんかった。ワタシが阿呆やからに違いない。&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/krymtkts/7774bb65f2f0351697a47383aefe9ec9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;はまったところ。&lt;/p&gt;&lt;p&gt;&lt;a href='https://docs.aws.amazon.com/cli/latest/reference/route53/change-resource-record-sets.html'&gt;change-resource-record-sets — AWS CLI 1.18.203 Command Reference&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; SetIdentifier -&gt; (string) &lt;/p&gt;&lt;p&gt; &gt; &gt; Resource record sets that have a routing policy other than simple: An identifier that differentiates among multiple resource record sets that have the same combination of name and type, such as multiple weighted resource record sets named acme.example.com that have a type of A. In a group of resource record sets that have the same name and type, the value of SetIdentifier must be unique for each resource record set. &lt;/p&gt;&lt;p&gt; &gt; For information about routing policies, see Choosing a Routing Policy in the Amazon Route 53 Developer Guide . &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Alias レコードのパラメータからコピペしてたので&lt;code&gt;SetIdentifier&lt;/code&gt;を残したままにしてしまっていた。NS レコードは Simple Routing のみを許可するのでエラーになるのね。↓&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;  52 |  Edit-R53ResourceRecordSet -HostedZoneId $ParentHostedZone.Id -ChangeB …
     |  &amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;
     | Invalid request: Expected exactly one of &amp;#91;Weight, Region, Failover, GeoLocation, or MultiValueAnswer&amp;#93;, but found none in Change with &amp;#91;Action=CREATE, Name=test.testtest.com, Type=NS, SetIdentifier=nandeyanen&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;わかりにくぅ！&lt;/p&gt;&lt;p&gt;おわり 😭&lt;/p&gt;
</description>
<pubDate>
Sun, 27 Dec 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-12-26-retrospective2020
</guid>
<link>
http://krymtkts.github.io/posts/2020-12-26-retrospective2020
</link>
<title>
振り返り 2020 年
</title>
<description>
&lt;p&gt;2020 年を振り返る。&lt;/p&gt;&lt;p&gt;2020 年は自分の人生の中でも全く予想のつかない年であったと同時に、停滞感を感ずる年でもあった。以下ダイジェスト。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一人でサブシステム&lt;/li&gt;&lt;li&gt;COVID-19 流行からのフルリモートワーク&lt;/li&gt;&lt;li&gt;チームメンバのクビ&lt;/li&gt;&lt;li&gt;フラストレーションの多い下半期&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;一人でサブシステム&quot;&gt;一人でサブシステム&lt;/h3&gt;&lt;p&gt;ほとんど偶然の流れでサーバーレスな ETL を一人で作る機会を得た。&lt;/p&gt;&lt;p&gt;すぐに作って初夏までにリリース的な感じのやつでやった。サービスの見込みが「ほんまにそんなにユーザとれんのか？おお？」的なきな臭い感じだったので極力維持費をかけないようにサーバーレスに。そしたら案の定、年末までほとんど利用されることなかったんでこの選択は我ながら良いとおもた。サブシステム単体の原価が 1 日 40 円程度とめちゃくちゃ安い、ものすごく利益率がいいので、使ってもらえれば儲かる。 結果的に Go on AWS Step Functions &amp; AWS Lambda を組み合わせて作った。その際に Aurora Serverless やら Cognito やら使ったことないサービスを利用でけたこと、IaC 大前提でイチから権限の設計だったりできたのはかなりいい経験になったなーとおもとる。 というか今年のハイライトはここちゃうか...という気もしなくない。裁量という面においては。&lt;/p&gt;&lt;p&gt;もちろんヘマこいたところもいっぱいあるんやけど、それすら次に活かそうという気持ちになれるやつらでヒジョーにポジティブに考えれていた時期。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;運用用途で 1 日のデータ量の集計を Aurora Serverless に保持するようにしたが、これは結果的に要らなかった&lt;ul&gt;&lt;li&gt;DynamoDB にエントリを作っといて、後でからスクリプトなり最近増えた SQL のサポートで良かったんじゃないか、的な。そうすれば維持費ももっと抑えれた&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Cognito むずすぎ&lt;ul&gt;&lt;li&gt;S3 へのアクセス制御を Cognito で行った。結果的にバケツへアクセスする一時クリデンシャルを作成する形にしたが、これはどうも OAuth2 仕様だと機器間認証を使うべきだったらしい。わからん&lt;/li&gt;&lt;li&gt;こんなの？&lt;a href='https://medium.com/faun/setting-up-a-machine-to-machine-authentication-system-with-amazon-cognito-4c8e2de41c2e'&gt;Machine-to-machine authentication with Amazon Cognito | FAUN&lt;/a&gt;&lt;/li&gt;&lt;li&gt;あと秒間の initiate auth 上限がしょぼくて同時ログイン多いと使えない。AWS SA の方にも Auth0 にしとけって言われてしまう始末。とはいえ料金的にこっちのが安くて選んだ&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Go の熟れてなかった感&lt;ul&gt;&lt;li&gt;複数エンドポイント作るのにオレオレディレクトリ構造で作ったのでややこしい形に&lt;ul&gt;&lt;li&gt;すぐ良くないのがわかったので次の Go 経験で&lt;a href='https://github.com/golang-standards/project-layout'&gt;golang-standards/project-layout: Standard Go Project Layout&lt;/a&gt; を速攻取り込んで改善した&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;JSON＆ファイルストリーム操作がいまいち&lt;ul&gt;&lt;li&gt;aws-go-sdk で S3 から gzip された JSON 取り込むのにパイプを使ってうまく空間計算量を減らしたが、まだちょっとイケてない部分が残ってて極端にファイルサイズが大きいと死にうる。これをもっとうまくできたろうと思う&lt;/li&gt;&lt;li&gt;JSON のパースエラーを親切にする方法はこわかったので、次の経験で活かした&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;channel や独自の型は相性が良かったのか難なく。後のデスマーチプロジェクトでもそれが活きた&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Aurora Serverless Data API の使いこなし&lt;ul&gt;&lt;li&gt;接続時に最大 1 分くらい応答がないけど Data API ではタイムアウト時間を延ばせず(標準 50 秒くらい)、そのエラーハンドリングが下手くそだった。結果的にリリース後相当経ってからの対応になったが error 型でリトライ可能エラーとか切り分けた&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;covid-19&amp;#95;流行からのフルリモートワーク&quot;&gt;COVID-19 流行からのフルリモートワーク&lt;/h3&gt;&lt;p&gt;これは IT 系ならどこもそうだろうと思うが、ついにフルリモートワークになった。もともと子守で週に数回在宅勤務時間を設けていたが、フルリモートとなるとその労働体験は全く異なる。&lt;/p&gt;&lt;p&gt;通勤時間 2 時間がまるっとなくなった分かなり楽になったが、逆に駆けつけ 3 杯だったり、思考しながら歩いたりといった息抜きのタイミングがなくなった。家庭へのサポートの負担がより増えたことで読書や自習の時間も確保しにくく、それこそ自身の学びのスタイルを再構築する程度には追い詰められたのかなと思う。もちろん自走できるエンジニアにとしては労働体験は向上したのだけど。&lt;/p&gt;&lt;p&gt;半年以上フルリモートワークなのだけど、この状況に合わせた最良の方法は、まだ模索中。&lt;/p&gt;&lt;p&gt;少しずつ習慣化していたワークアウトは、こういった状況だと有無の効果がわかりやすかった(メンタル面の安定において)。でも引っ越し後機会を取れていなくバランスを崩している。&lt;/p&gt;&lt;h3 id=&quot;チームメンバのクビ&quot;&gt;チームメンバのクビ&lt;/h3&gt;&lt;p&gt;これは自身の労働体験では一番悪い出来事だった。1 年半ほどずっと同じチームメンバとして働いてきて、コンテキストの共有もできていたし、ようやくチーム開発が回りだすなという状況だったが、いなくなってしまった。優秀な方で、鼓を打てば響くがごとく(個人的には)よいチームワークやと感じていただけに非常に残念だったし、前職チームリーダ時代にメンバのおじさまエンジニアの年俸 150 万をふっとばしてしまった経験と同列くらいで、自分の至らなさを悔やみ続ける事件になった。 チーム開発がしたかったけど、これは当面できなくなってしまった。これが結局フラストレーションを溜め始める 1 要素になったのは間違いない。 その後を埋める形で？優秀なメンバを得れたのだけど、自律性といった意味では前任者が天才的だったのと、1 年半の間の積み重ねが灰燼に帰したこともあって傷心チックな状態は今も続いている。&lt;/p&gt;&lt;p&gt;その中で唯一救われたのは、件の方がエンジニアとしてのキャリアを見定めて次の活動をすでに始めている点。これだけは本当に良かった。幸多からんことを。&lt;/p&gt;&lt;h3 id=&quot;フラストレーションの多い下半期&quot;&gt;フラストレーションの多い下半期&lt;/h3&gt;&lt;p&gt;チーム開発 ≒ わたしのなかではコラボレーションができない仕事というのは、自分の出力以上のものが期待できないのと同時に学びや気づきも自発的なもの以外にないという面白くない状態でであって、これが半年間の間続いたことで相当に気分が参ってしまった。この下半期の間続いていたデスマーチ的な案件も、参加メンバは多いのに情報連携の齟齬がこれでもかというくらいにあって、まあ色々疲れてしまった。件の方もこのプロジェクトに参加中にいなくなったにもかかわらず、開発者は補充されなかったのでけっきょくワイ一人で開発してたよーな気分。 この間にでかい会社のリクルータが面談の話を持ってきたので挑んでみたが、これまた全然だめだった。知識もメンタルも準備大事。&lt;/p&gt;&lt;p&gt;苛々する時期だったが、年の瀬には曲りなりにもアプリケーションは本番稼働し、面談で感じた自分の至らなさから改めて自身のエッセンシャルな選択肢を掘り起こす事ができたので、プラスマイナス 0 くらいの経験になったのではないか？とは思っている。 今振り返ると、ETL の失敗経験からこのデスマーチに取り組んだ改善点は相当数あって、そういった進歩を楽しめていなかった点でもわたし自身気分が落ちてたんやろなーというのが明らかや。&lt;/p&gt;&lt;p&gt;このデスマーチの裏では別の Fury Road が残ってて、年末年始も働くのだ。でも全然気持ちのしんどさが違う。&lt;/p&gt;&lt;p&gt;※デスマーチゝいうてるけど肉体的な労働負荷は全然大したことない。偏に 8 時間と少ししか働けない自身の限られた時間内でやるべきでないしょうもないことに時間を浪費してしまっていたり、そういったところがデスなマーチなのだ。アドレナリンジャンキーになれていたらもっと追い込んで働けたろうに。リモートワークではそこまで中毒できないんちゃうかな？&lt;/p&gt;&lt;h3 id=&quot;2020&amp;#95;年目標と成果&quot;&gt;2020 年目標と成果&lt;/h3&gt;&lt;p&gt;年初に以下の目標を羅列した。その結果は次の通り。惨憺たる結果。まず目標が多い、多すぎるわ。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;家庭&lt;ul&gt;&lt;li&gt;⭕️ 引越&lt;ul&gt;&lt;li&gt;時期はかなりずれ込んだが完了&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;🔺 親族&lt;ul&gt;&lt;li&gt;半分完了的な形。およそ 5 年後に延期&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;仕事&lt;ul&gt;&lt;li&gt;⭕️ リモートワーク&lt;ul&gt;&lt;li&gt;意図せずフルリモート化した&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;🔺 昇給&lt;ul&gt;&lt;li&gt;源泉がまだだが年間 40~50 万 UP 程度で期待のとおりでなかった&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;⭕️ リード的な活動&lt;ul&gt;&lt;li&gt;できていたが、件のメンバ離脱でちょっと空回り気味&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;自分のこと&lt;ul&gt;&lt;li&gt;❌ 積ん読の消化&lt;ul&gt;&lt;li&gt;無理すぎた&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;🔺 OSS へのコントリビューション&lt;ul&gt;&lt;li&gt;おしい&lt;ul&gt;&lt;li&gt;ドキュメント修正やフォーマットだけの PR で 3 回だけ&lt;/li&gt;&lt;li&gt;Terminal Icons の Issue にコメントして助けたのが 1 回&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;❌ 自作ツールの更新&lt;ul&gt;&lt;li&gt;ほぼなしか。TODO はあるけど&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;❌ 音楽活動&lt;ul&gt;&lt;li&gt;これも全然できず。というか COVID-19 で無理んなった&lt;/li&gt;&lt;li&gt;下期は忙しくて死ぬほどギターが下手くそになった&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;❌ &lt;a href='https://krymtkts.github.io/'&gt;このブログ&lt;/a&gt;を毎月更新する&lt;ul&gt;&lt;li&gt;途中から落とした...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;自分のことが後回しになるのは年を経るとよくあることやと思うけど、ちょっとひどい。 今年溜め込んだ知識というか、使い回せるスクリプトもあるので、年末年始の落ち着いた時期にそういう宝物を Gist にガンガン登録していこう。&lt;/p&gt;&lt;p&gt;おわり。&lt;/p&gt;
</description>
<pubDate>
Sat, 26 Dec 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-11-01-terminal-icons-not-work-case
</guid>
<link>
http://krymtkts.github.io/posts/2020-11-01-terminal-icons-not-work-case
</link>
<title>
Terminal Icons が動かなくなるケース
</title>
<description>
&lt;p&gt;9 月&amp;10 月と文字起こしするのをサボった 😪&lt;/p&gt;&lt;p&gt;肉親の不幸やトラブルがあったりで気乗りしなかったのもあるが、お仕事の方で WFH になって以降最高潮に忙しさのピークを迎えていたというのもある。この辺はチームビルディングぽい要素大いにあったのでまたなんかまとめたい所存 🤔&lt;/p&gt;&lt;p&gt;この間、OSS 活動も特に何のアクションもなく過ごしたが、ただ無為に過ごしたわけではない(と言い聞かせたい)のでなんか貢献したぽいことをネタに記事に残そうと思う。&lt;h2&gt;&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;先日&lt;a href='https://devblogs.microsoft.com/commandline/windows-terminal-tips-and-tricks/'&gt;Windows Terminal Tips and Tricks | Windows Command Line&lt;/a&gt;を見てたら、愛すべき oh my posh の紹介の後に &lt;a href='https://github.com/devblackops/Terminal-Icons'&gt;Terminal-Icons: A PowerShell module to show file and folder icons in the terminal&lt;/a&gt; が紹介されていた。 なんじゃこりゃー即導入せねばなるまいな、という感じで導入してみたのだが、初回は&lt;code&gt;Get-ChildItem&lt;/code&gt;の結果に可愛らしいアイコンフォントが付与されるのに、2 回目以降は普通の見た目に戻ってしまい、なんでや...とトラシューしてみた。&lt;/p&gt;&lt;p&gt;わかったのは、一緒に使っていた &lt;a href='https://github.com/joonro/Get-ChildItemColor'&gt;Get-ChildItemColor: Add coloring to the output of Get-ChildItem Cmdlet of PowerShell.&lt;/a&gt; の実行後に、Terminal Icons のアイコンフォントが反映されなくなること。 試しに &lt;code&gt;Remove-Module Get-ChildItemColor&lt;/code&gt; すればあ～ら不思議、アイコンが復活するのである。&lt;/p&gt;&lt;p&gt;Terminal Icons では&lt;code&gt;format.ps1xml&lt;/code&gt; で表示内容の改変を行っているのだけど、&lt;code&gt;Get-ChildItemColor&lt;/code&gt;も色の改変をしてるし、競合してるのだろう。詳しくは追っていくのがめんどくて競合できないという結論だけだした。↓ の Issue で同じく困ってる人がいたので共有してあげた。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/devblackops/Terminal-Icons/issues/12'&gt;No icons after installation. · Issue #12 · devblackops/Terminal-Icons · GitHub&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>
Sun, 01 Nov 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-08-31-how-do-i-manage-todos
</guid>
<link>
http://krymtkts.github.io/posts/2020-08-31-how-do-i-manage-todos
</link>
<title>
TODO の管理どないしてまっか？
</title>
<description>
&lt;p&gt;最近、TODO 管理のやり方を変えたので記しておく。&lt;/p&gt;&lt;p&gt;いろんなタスク管理術がある。昔は Remember the Milk 使ってみたり、Evernote に TODO リスト書いたり。最近では Google Tasks 使ってみたり。へーしゃ内では Getting Things Done が優勢なんかな。 とはいえ結局の所いずれの手段もわたしにはうまく使いこなせず、結局日報的なものに落ちつていた、もう 7 年以上？日報のようなお仕事日記をつけている。&lt;/p&gt;&lt;p&gt;ところが、そのスタイルに狂いが生じだしたのが、COVID-19 流行による出社自粛 →WFH を始めてからだ。&lt;/p&gt;&lt;p&gt;WFH になってかなり仕事とプライベートの距離感が急接近。結果どういうわけか仕事と私生活の両方において、タスクの消化をそれまでの様にできない状態になりつつあった。7,8 割くらいのパフォが出たらいい感じ。実際はもっと悪い。&lt;/p&gt;&lt;p&gt;思うに、往復 2 時間の通勤時間でコンテキストスイッチを緩やかに行っていたり、処理すべきタスクの組み換えとかを行っていたのだろう。歩く時間も 30 分はあったし。 スキマ時間がなくなったことで、ギアが上がりきらないままタスク消化を急いで空回りでもしてたのだろうか。 もともと仕事の日記にはプライベートのタスクを書かずに続けていたのだけど、とりあえずコンテキストスイッチを抑えるために、仕事と私生活のタスクを一括管理しようと考えた。とはいえお仕事日記は自身の振り返りのためにも使っていて、あまり私生活のノイジー？な内容を書いていくのもどうかなと。 そんな時ちょうど Chrome のサジェスト記事で &lt;a href='https://marketplace.visualstudio.com/items?itemName=davraamides.todotxt-mode'&gt;todotxt-mode - Visual Studio Marketplace&lt;/a&gt; の存在を知ったので、&lt;a href='https://github.com/todotxt/todo.txt'&gt;todo.txt&lt;/a&gt; で、単純にタスクの管理だけを一括管理することにした。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/todotxt/todo.txt'&gt;todo.txt&lt;/a&gt;はシンプルにフォーマットが決まっているのがありがたい。また詳細を note に切り出せるのでタスク自体をシンプルに保てるのが気に入っている。&lt;/p&gt;&lt;p&gt;複数の端末でこの「TODO を記したプレーンテキスト」を同期する必要があるが、これについては現状 &lt;a href='https://marketplace.visualstudio.com/items?itemName=GustavoASC.google-drive-vscode'&gt;Google Drive™ for VSCode - Visual Studio Marketplace&lt;/a&gt; を使っている。 Upload したファイルが上書きじゃなく、都度新しいファイルになるのがかなり気に食わないけど、生のテキストファイルが使えることを優先してのチョイスだ。&lt;/p&gt;&lt;p&gt;今の所はゆるく todo.txt のフォーマットの一部(priority, context, due ぐらいしか使えてない)だけ運用している。 数年来のタスク管理を変える機会なので慣れないことも多いが、折角の変化の機会なので楽しんで模索してみたい。&lt;/p&gt;
</description>
<pubDate>
Mon, 31 Aug 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-07-31-partial-decode-uniqid
</guid>
<link>
http://krymtkts.github.io/posts/2020-07-31-partial-decode-uniqid
</link>
<title>
PHP の uniqid をデコードする
</title>
<description>
&lt;p&gt;なんか一意っぽい値を PHP で生成する場合の楽な手段として、 &lt;code&gt;uniqid&lt;/code&gt; がある。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/php/php-src/blob/91fbd12d5736b3cc9fc6bc2545e877dd65be1f6c/ext/standard/uniqid.c'&gt;php-src/uniqid.c at 91fbd12d5736b3cc9fc6bc2545e877dd65be1f6c · php/php-src&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;prefix を除いた先頭 8 桁が unixtime を 16 進数で出してるだけっぽいので、こいつが何時生成されたのかを知りたい時に、以下の手順が踏める。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.php.net/manual/ja/function.uniqid.php#95001'&gt;PHP: uniqid - Manual&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ここのコメントのまま使える。&lt;code&gt;more&amp;#95;entropy&lt;/code&gt;が有効な値で試す。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;// &amp;lt;?php
$s = &amp;quot;5ef4f46e0e40f9.59913527&amp;quot;;
$d = date&amp;#40;&amp;quot;r&amp;quot;,hexdec&amp;#40;substr&amp;#40;$s,0,8&amp;#41;&amp;#41;&amp;#41;;
echo&amp;#40;$d . PHP&amp;#95;EOL&amp;#41;;
// Thu, 25 Jun 2020 19:01:02 +0000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;しかし手前は PHP をインストールしてなくて repl を持ってない(↑ の Repl.it でやった)ので、これを PowerShell でやる！(ついでに JST)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://stackoverflow.com/questions/10781697/convert-unix-time-with-powershell'&gt;epoch - Convert Unix time with PowerShell - Stack Overflow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$s = &amp;quot;5ef4f46e0e40f9.59913527&amp;quot;;
&amp;#40;Get-Date '1970-1-1'&amp;#41;.AddSeconds&amp;#40;&amp;#91;System.Convert&amp;#93;::ToInt32&amp;#40;$s.Substring&amp;#40;0, 8&amp;#41;, 16&amp;#41;&amp;#41;.ToLocalTime&amp;#40;&amp;#41;
# 2020年6月26日 04:01:02
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ちょっとした小技が必要だったので覚書しておく。 無駄に PHP のコードを読んでしまった...😂&lt;/p&gt;
</description>
<pubDate>
Fri, 31 Jul 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-06-29-contextual-sfn-example
</guid>
<link>
http://krymtkts.github.io/posts/2020-06-29-contextual-sfn-example
</link>
<title>
Step Functions のステートをまたいでパラメータを伝播するパターン
</title>
<description>
&lt;p&gt;&lt;a href='2020-04-30-context-like-sfn'&gt;前の記事&lt;/a&gt;で記したアイデアの実装例を残しておいた。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/contextual-sfn'&gt;krymtkts/contextual-sfn: Example for passing parameters across states.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;現時点で実際にお仕事で使っているパターンなのだけど、前述の通りペイロードが大幅に大きくなると問題になり得るので、より良くするすべはないものかと考え中。&lt;/p&gt;&lt;h3 id=&quot;おさらい&quot;&gt;おさらい&lt;/h3&gt;&lt;p&gt;StateMachine の構成。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Task&lt;/li&gt;&lt;li&gt;Map&lt;/li&gt;&lt;li&gt;Reduce&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;のステートがあるとする。Task は文字列、配列 A、配列 B を Output する。これらのデータについては以下の通りとする。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;文字列(&lt;code&gt;t&lt;/code&gt;)は、フロー全体に渡って使用したいデータ。&lt;/li&gt;&lt;li&gt;配列 A(&lt;code&gt;ia&lt;/code&gt;) は、1 つ目の Map タスクで分散したいデータ。&lt;/li&gt;&lt;li&gt;配列 B(&lt;code&gt;sa&lt;/code&gt;) は、2 つ目の Map タスクで分散したいデータ。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;このパターンを実装した背景としては以下の通り。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map と Reduce で使いたいデータを Aurora Serverless から取得する必要がある&lt;/li&gt;&lt;li&gt;普段停止しているクラスタは結構起動に時間がかかる&lt;/li&gt;&lt;li&gt;Map では Reduce のパラメータも利用したい&lt;/li&gt;&lt;li&gt;フローの最初に全部取ってしまおう！&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;1.&amp;#95;task&quot;&gt;1. Task&lt;/h4&gt;&lt;p&gt;Lambda からの出力がこんなのだとする。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &amp;quot;t&amp;quot;: &amp;quot;nanigashi&amp;quot;,
  &amp;quot;ia&amp;quot;: &amp;#91;1, 2, 4, 8, 16, 32, 64&amp;#93;,
  &amp;quot;sa&amp;quot;: &amp;#91;&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;E&amp;quot;&amp;#93;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ResultPath&lt;/code&gt;を&lt;code&gt;$.data&lt;/code&gt;にしておくと Task1 ステートの出力は ↓ になる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;t&amp;quot;: &amp;quot;nanigashi&amp;quot;,
    &amp;quot;ia&amp;quot;: &amp;#91;1, 2, 4, 8, 16, 32, 64&amp;#93;,
    &amp;quot;sa&amp;quot;: &amp;#91;&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;E&amp;quot;&amp;#93;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;YAML はこう。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;Entrypoint:
  Type: Task
  Resource:
    Fn::GetAtt: &amp;#91;task, Arn&amp;#93;
  ResultPath: $.data
  Next: Map
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2.&amp;#95;map&quot;&gt;2. Map&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ItemsPath&lt;/code&gt; に &lt;code&gt;$.data.ia&lt;/code&gt; を指定し、配列 A でイテレーションする&lt;/li&gt;&lt;li&gt;&lt;code&gt;Parameters&lt;/code&gt; に Lambda へ渡したいパラメータを指定する。以下の通り&lt;ul&gt;&lt;li&gt;マッピングの各要素は&lt;code&gt;$$.Map.Item.Value&lt;/code&gt;&lt;/li&gt;&lt;li&gt;追加で渡したいパラメータを &lt;code&gt;$.data.t&lt;/code&gt;, &lt;code&gt;$.data.sa&lt;/code&gt;&lt;/li&gt;&lt;li&gt;パラメータ名末尾の&lt;code&gt;.$&lt;/code&gt;忘れがち&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;OutputPath&lt;/code&gt; に前のタスクの出力 &lt;code&gt;$.data&lt;/code&gt; を指定すれば、同じパラメータを次のステートに回せる&lt;/li&gt;&lt;li&gt;ここではマッピングの出力は無視するとして、&lt;code&gt;ResultPath&lt;/code&gt;に&lt;code&gt;$.null&lt;/code&gt;など&lt;code&gt;OutputPath&lt;/code&gt;に含まれないパスを指定する&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;Map:
  Type: Map
  MaxConcurrency: 10
  Parameters:
    k.$: $$.Map.Item.Value
    t.$: $.data.t
    a.$: $.data.sa
  ItemsPath: $.data.ia
  ResultPath: $.null
  OutputPath: $.data
  Iterator:
    StartAt: MapTask
    States:
      MapTask:
        Type: Task
        Resource: !GetAtt &amp;#91;map, Arn&amp;#93;
        End: true
  Next: Reduce
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3.&amp;#95;reduce&quot;&gt;3. Reduce&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ItemsPath&lt;/code&gt; に &lt;code&gt;$.sa&lt;/code&gt; を指定し、配列 B でイテレーションする&lt;/li&gt;&lt;li&gt;&lt;code&gt;Parameters&lt;/code&gt; に Lambda へ渡したいパラメータを指定する。以下の通り&lt;ul&gt;&lt;li&gt;マッピングの各要素は&lt;code&gt;$$.Map.Item.Value&lt;/code&gt;&lt;/li&gt;&lt;li&gt;追加で渡したいパラメータを &lt;code&gt;$.data.t&lt;/code&gt;&lt;/li&gt;&lt;li&gt;パラメータ名末尾の&lt;code&gt;.$&lt;/code&gt;忘れがち(2 回目)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;出力を制御したい場合は、Map 同様に&lt;code&gt;OutputPath&lt;/code&gt;、&lt;code&gt;ResultPath&lt;/code&gt;を指定仕分ける&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;Reduce:
  Type: Map
  Parameters:
    k.$: $$.Map.Item.Value
    t.$: $.t
  ItemsPath: $.sa
  ResultPath: $.null
  OutputPath: $.t
  Iterator:
    StartAt: ReduceTask
    States:
      ReduceTask:
        Type: Task
        Resource: !GetAtt &amp;#91;reduce, Arn&amp;#93;
        End: true
  End: true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;&lt;p&gt;こういう例、ググっても見つからずあまり使われないパターンかも知れない。 必要だった＆実現できたので制限を理解した上で、容量用法守って使えれば良いかな。&lt;/p&gt;
</description>
<pubDate>
Mon, 29 Jun 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-05-09-try-to-elm-handson
</guid>
<link>
http://krymtkts.github.io/posts/2020-05-09-try-to-elm-handson
</link>
<title>
Elm のハンズオンを試した
</title>
<description>
&lt;p&gt;会社の勉強会で Elm のハンズオンをしてみた。それだけ。&lt;/p&gt;&lt;h3 id=&quot;elm&amp;#95;とわたし&quot;&gt;Elm とわたし&lt;/h3&gt;&lt;p&gt;いつ頃 Elm を知ったのだろう。なんか前職ですごい H 本の輪読会をした 2015 年らへんか、2016 年とかそのあたりに知ったような気がする。&lt;/p&gt;&lt;p&gt;爆発炎上中の新製品開発(Backbone.js なのに誰も使えてなくてやばい製品だった)のヘルプに入ってちょっとした頃。フロントエンドを全然知らなかったので一通り新しめの情報をさらってて、その中に Elm を見つけたような気がしている。&lt;/p&gt;&lt;p&gt;最近までずっと Elm と付き合うことなく来た&lt;a href='#fn-1' id='fnref1'&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;が、ちょうどへーしゃにてフロントエンド刷新の機運があると聞き、Elm 一択ですね！と押し込むためにも開催してみた。今思えばこいつ何様やねん 🤔&lt;/p&gt;&lt;h3 id=&quot;勉強会について&quot;&gt;勉強会について&lt;/h3&gt;&lt;p&gt;&lt;a href='https://github.com/mather/elm-handson'&gt;mather/elm-handson: ハンズオン資料&lt;/a&gt; を流用させていただいた。めちゃくちゃやりやすかったですありがとうございました。&lt;/p&gt;&lt;p&gt;カンペ用にわたしは回答例みたいなのを fork して添えさせていただいた。&lt;a href='https://github.com/krymtkts/elm-handson'&gt;krymtkts/elm-handson: ハンズオン資料&lt;/a&gt;&lt;/p&gt;&lt;p&gt;元々はデータストアがあって、CRUD 操作ができて、みたいなバックエンドも含めたやつをやろうとしてた。 のだけど、わたしに Elm でハンズオンを作りきるパワーもなく、「う、めんどくせえ！」となり、またインターネッツで探してみるもめぼしいものを見つけられなかった。&lt;/p&gt;&lt;p&gt;やはり導入部ということもあり、もっとシンプルにできるものはないか－と探していたところ、前述のハンズオンにたどり着いたのだ。&lt;/p&gt;&lt;h3 id=&quot;やってみた感想&quot;&gt;やってみた感想&lt;/h3&gt;&lt;p&gt;へーしゃのフロントエンドに Elm を採用するのには至らなそうだけど、他のエンジニアに興味を持ってもらえり静的型付け＆関数型言語のパワーを知ってもらったのは良かった。Message を足したり型変えたらめちゃくちゃ親切なコンパイルエラーになるやでー、が結構ウケた印象。 現行が複雑怪奇な PHP(Smarty)や jQuery でメンテも苦痛なところに、Elm が爽やかな風を送り込んでくれたのだから、そりゃエンジニアの認識が変わるのも必然やで。&lt;/p&gt;&lt;p&gt;最終的に CRUD ある画面のハンズオンを目指す。遊び用 AWS 垢が支給されてるし、Amplify で Sample 探すか。 まだ何回か企画してるので、刺激を与えていきたい所存。 &lt;ol class='footnotes'&gt;&lt;li id='fn-1'&gt;&lt;a href='https://www.amazon.co.jp/dp/4863542224/'&gt;基礎からわかる Elm&lt;/a&gt;はもちろん読んでるで。ポチってからかなり待ったけど、無事出版され、読むことができてホッとした。&lt;a href='#fnref1'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
</description>
<pubDate>
Sat, 09 May 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-04-30-context-like-sfn
</guid>
<link>
http://krymtkts.github.io/posts/2020-04-30-context-like-sfn
</link>
<title>
Step Functions のステートをまたいでパラメータを伝播する
</title>
<description>
&lt;p&gt;仕事でシンプルなバッチを組む必要があり、ちょうどワークフローみたいな感じだったので Step Functions で Lambda をつないで作っている。&lt;/p&gt;&lt;p&gt;3 つ Lambda が登場するのだけど、1 つ目の Lambda の Output を 2 つ目 3 つ目で使いたい。 でも、こいつらが Map ステートなのもあり Output でつなぐのはちょっと違う。 代わりに &lt;code&gt;ResultPath&lt;/code&gt;, &lt;code&gt;OutputPath&lt;/code&gt;, &lt;code&gt;ItemPath&lt;/code&gt;, &lt;code&gt;Parameters&lt;/code&gt; の組み合わせれば、Lambda の Output にない後続のステートにつなげるのがわかったのでメモしておく。&lt;/p&gt;&lt;h3 id=&quot;参考資料&quot;&gt;参考資料&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/input-output-example.html'&gt;InputPath、ResultPath、および OutputPath 例 - AWS Step Functions&lt;/a&gt;&lt;ul&gt;&lt;li&gt;これは読んでもナンノコッチャよくわからんかった&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://dev.classmethod.jp/articles/step-functions-parameters/'&gt;Step Functions の入出力処理の制御パラメータ（InputPath、 Parameters、ResultPath および OutputPath）を理解するために参照したドキュメント | Developers.IO&lt;/a&gt;&lt;ul&gt;&lt;li&gt;流石のクラスメソッドさん、わかりやすかった&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;構成&quot;&gt;構成&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Task&lt;/li&gt;&lt;li&gt;Map&lt;/li&gt;&lt;li&gt;Map&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;のステートがあるとする。Task は文字列、配列 A、配列 B を Output する。これらのデータについては以下の通りとする。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;文字列は、StateMachine 全体に渡って使用したいデータ。&lt;/li&gt;&lt;li&gt;配列 A は、1 つ目の Map タスクで分散したいデータ。&lt;/li&gt;&lt;li&gt;配列 B は、2 つ目の Map タスクで分散したいデータ。&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;1.&amp;#95;task1&quot;&gt;1. Task1&lt;/h4&gt;&lt;p&gt;Lambda からの出力がこんなのだとする。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &amp;quot;string&amp;quot;: &amp;quot;nanigashi&amp;quot;,
  &amp;quot;arrayA&amp;quot;: &amp;#91;
      0, 1, 2, 3, 4, 5, 6
  &amp;#93;,
  &amp;quot;arrayB&amp;quot;: {
      &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;E&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ResultPath&lt;/code&gt;を&lt;code&gt;$.key&lt;/code&gt;にしておくと Task1 ステートの出力は ↓ になる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &amp;quot;key&amp;quot;: {
    &amp;quot;string&amp;quot;: &amp;quot;nanigashi&amp;quot;,
    &amp;quot;arrayA&amp;quot;: &amp;#91;
        0, 1, 2, 3, 4, 5, 6
    &amp;#93;,
    &amp;quot;arrayB&amp;quot;: {
        &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;E&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2.&amp;#95;map1&quot;&gt;2. Map1&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ItemPath&lt;/code&gt; に &lt;code&gt;$.key.arrayA&lt;/code&gt; を指定し、配列 A でイテレーションする&lt;/li&gt;&lt;li&gt;&lt;code&gt;Parameters&lt;/code&gt; に Lambda へ渡したいパラメータを指定する。以下の通り&lt;ul&gt;&lt;li&gt;マッピングの各要素は&lt;code&gt;$$.Map.Item.Value&lt;/code&gt;&lt;/li&gt;&lt;li&gt;追加で渡したいパラメータを &lt;code&gt;$.key.string&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;OutputPath&lt;/code&gt; に前のタスクの出力 &lt;code&gt;$.key&lt;/code&gt; を指定する&lt;/li&gt;&lt;li&gt;マッピング処理の出力は無視したいので、&lt;code&gt;ResultPath&lt;/code&gt;に&lt;code&gt;$.null&lt;/code&gt;など&lt;code&gt;OutputPath&lt;/code&gt;に含まれないパスを指定する&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;3.&amp;#95;map2&quot;&gt;3. Map2&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ItemPath&lt;/code&gt; に &lt;code&gt;$.arrayB&lt;/code&gt; を指定し、配列 B でイテレーションする&lt;/li&gt;&lt;li&gt;&lt;code&gt;Parameters&lt;/code&gt; に Lambda へ渡したいパラメータを指定する。以下の通り&lt;ul&gt;&lt;li&gt;マッピングの各要素は&lt;code&gt;$$.Map.Item.Value&lt;/code&gt;&lt;/li&gt;&lt;li&gt;追加で渡したいパラメータを &lt;code&gt;$.key.string&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;出力を制御したい場合は、Map1 同様に&lt;code&gt;OutputPath&lt;/code&gt;、&lt;code&gt;ResultPath&lt;/code&gt;を指定仕分ける&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;これで Task1 の出力を Map1 をまたいで Map2 で利用できる。&lt;/p&gt;&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;&lt;p&gt;これで最初の Lambda の Output を加工せずそのまま後ろ 2 つの Lambda まで伝播できた。やったね 😂 文章だけじゃわからなさすぎる気がしてきた...今度サンプルコードを起こすことにする。&lt;/p&gt;&lt;p&gt;ただし懸念点として以下の気になる 2 点も備えており、どうしたもんかなと言う感じでもある 🤔&lt;/p&gt;&lt;ol&gt;&lt;li&gt;伝播したい回数だけ階層化しないといけないのではないか&lt;ul&gt;&lt;li&gt;出力を無視するためにはセクションを切り分けないといけなくなってるから&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;可変長のパラメータを伝播する場合、ペイロードの上限値に注意しないといけない&lt;ul&gt;&lt;li&gt;ダブルクォートは`&amp;#8216;エスケープされるようだし計算が大変&lt;/li&gt;&lt;li&gt;だからセクションを切り分けるしかなくなってる&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;出力無視することさえできたら階層化いらんなー 🤔&lt;/p&gt;
</description>
<pubDate>
Thu, 30 Apr 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-03-31_oh-my-posh-theme
</guid>
<link>
http://krymtkts.github.io/posts/2020-03-31_oh-my-posh-theme
</link>
<title>
My own oh-my-posh theme
</title>
<description>
&lt;p&gt;oh-my-posh の話。 ご存じない？ &lt;a href='https://github.com/JanDeDobbeleer/oh-my-posh'&gt;JanDeDobbeleer/oh-my-posh: A prompt theming engine for Powershell&lt;/a&gt;&lt;/p&gt;&lt;p&gt;元々、Agnoster のシンボルを変えるだけで使ってた。&lt;/p&gt;&lt;p&gt;が、最近になって諸々の不満点 ↓ を解決したくなって、自分用のテーマを作ろうと思ったのがきっかけ。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;コマンドを打った時間を出したくなった&lt;ul&gt;&lt;li&gt;分割して Terminal を使うことが多いので仕事で CLI を使ったときにどこがいちばん最後に使ったかわかりやすくしたい&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;階層が深いディレクトリで仕事することが多く working directory の短縮表示をもっと短くしたかった&lt;ul&gt;&lt;li&gt;デフォルトの&lt;code&gt;..&lt;/code&gt;を&lt;code&gt;.&lt;/code&gt;にする(ほんとは頭文字にしたいが)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Windows10 のいつの Version からか忘れたが一部の絵文字の表示が化ける(管理者権限には 💪 を使ってた)&lt;ul&gt;&lt;li&gt;⚡ に戻す&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;作ったのはこれ。&lt;a href='https://gist.github.com/krymtkts/6f7e365fd1683d6edeb7e531f725d280'&gt;My own oh-my-posh theme.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;oh-my-posh のテーマを作るのはかんたん。その作り方を以下に記す。&lt;/p&gt;&lt;h2 id=&quot;how&amp;#95;to&amp;#95;make&amp;#95;it&quot;&gt;How to make it&lt;/h2&gt;&lt;p&gt;テンプレを生成してくれる機能とかはない。そのため theme の PS モジュールは手で配置することになる。ちなみに export されている function たちは以下の通りである。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/JanDeDobbeleer/oh-my-posh/blob/master/oh-my-posh.psd1#L48'&gt;oh-my-posh/oh-my-posh.psd1 at master · JanDeDobbeleer/oh-my-posh&lt;/a&gt;&lt;/p&gt;&lt;p&gt;ユーザ定義のテーマは &lt;code&gt;$ThemeSettings.MyThemesLocation&lt;/code&gt; に配置する(&lt;code&gt;Get-ThemesLocation&lt;/code&gt;でも同じ様子)。フォルダがなければ合わせて作成する。&lt;/p&gt;&lt;p&gt;元ファイルはいまあるテーマからコピって作るのが手っ取り早い。わたしは&lt;a href='https://github.com/JanDeDobbeleer/oh-my-posh/blob/master/Themes/Agnoster.psm1'&gt;Agnoster.psm1&lt;/a&gt;から作成した。 今あるテーマの配置フォルダを知るには&lt;code&gt;Get-Theme&lt;/code&gt;を実行すれば良い。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;PS&amp;gt; Get-Theme

Name                  Type     Location
----                  ----     --------
krymtkts              User     C:\Users\takatoshi\OneDrive\Documents\PowerShell\PoshThemes\krymtkts.psm1
Agnoster              Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Agnoster.psm1
Avit                  Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Avit.psm1
Darkblood             Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Darkblood.psm1
Fish                  Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Fish.psm1
Honukai               Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Honukai.psm1
Paradox               Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Paradox.psm1
Powerlevel10k-Classic Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Powerlevel10k-Classic.psm1
Powerlevel10k-Lean    Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Powerlevel10k-Lean.psm1
PowerLine             Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\PowerLine.psm1
pure                  Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\pure.psm1
robbyrussell          Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\robbyrussell.psm1
Sorin                 Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\Sorin.psm1
tehrob                Defaults C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\oh-my-posh\2.0.399\Themes\tehrob.psm1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Agnoster とわたしのテーマの差分は次の通り。&lt;code&gt;Compare-Object&lt;/code&gt;だと差分が見にくいことこの上なし！誰得 😂 なので wsl の bash から diff した。PowerSheller 失格だね(&lt;code&gt;Compare-Object&lt;/code&gt;がひどいのよ)。&lt;/p&gt;&lt;p&gt;Unified diff でみたらこの通り。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ diff ./Modules/oh-my-posh/2.0.399/Themes/Agnoster.psm1 ./PoshThemes/krymtkts.psm1 -u
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;diff&quot;&gt;--- ./Modules/oh-my-posh/2.0.399/Themes/Agnoster.psm1   2020-03-13 13:22:52.000000000 +0900
+++ ./PoshThemes/krymtkts.psm1  2020-02-24 16:03:51.912063800 +0900
@@ -11,12 +11,27 @@

     $lastColor = $sl.Colors.PromptBackgroundColor

-    $prompt = Write-Prompt -Object $sl.PromptSymbols.StartSymbol -ForegroundColor $sl.Colors.SessionInfoForegroundColor -BackgroundColor $sl.Colors.SessionInfoBackgroundColor
-
+    $now = Get-Date -UFormat '%Y-%m-%d %R'
+    $backwardSymbol = &amp;quot;$&amp;#40;$sl.PromptSymbols.SegmentBackwardSymbol&amp;#41;&amp;quot;
     #check the last command state and indicate if failed
     If &amp;#40;$lastCommandFailed&amp;#41; {
-        $prompt += Write-Prompt -Object &amp;quot;$&amp;#40;$sl.PromptSymbols.FailedCommandSymbol&amp;#41; &amp;quot; -ForegroundColor $sl.Colors.CommandFailedIconForegroundColor -BackgroundColor $sl.Colors.SessionInfoBackgroundColor
+        $rightText = &amp;quot; $&amp;#40;$sl.PromptSymbols.FailedCommandSymbol&amp;#41; $now &amp;quot;
+        $rightLength = $rightText.Length + $backwardSymbol.Length + 1 # care the symbol size blur.
+        $foregroundColor = $ThemeSettings.Colors.CommandFailedIconForegroundColor
     }
+    else {
+        $rightText = &amp;quot; $now &amp;quot;
+        $rightLength = $rightText.Length + $backwardSymbol.Length
+        $foregroundColor = $ThemeSettings.Colors.PromptForegroundColor
+    }
+    $prompt += Set-CursorUp -lines 1
+    $prompt += Set-CursorForRightBlockWrite -textLength $rightLength
+    $prompt += Write-Prompt $backwardSymbol -ForegroundColor $sl.Colors.PromptBackgroundColor -BackgroundColor $sl.Colors.SessionInfoBackgroundColor
+    $prompt += Write-Prompt $rightText -ForegroundColor $foregroundColor -BackgroundColor $sl.Colors.PromptBackgroundColor
+
+    # Write the prompt
+    $prompt += Set-Newline
+    $prompt += Write-Prompt -Object $sl.PromptSymbols.StartSymbol -ForegroundColor $sl.Colors.SessionInfoForegroundColor -BackgroundColor $sl.Colors.SessionInfoBackgroundColor

     #check for elevated prompt
     If &amp;#40;Test-Administrator&amp;#41; {
@@ -24,9 +39,8 @@
     }

     $user = $sl.CurrentUser
-    $computer = $sl.CurrentHostname
     if &amp;#40;Test-NotDefaultUser&amp;#40;$user&amp;#41;&amp;#41; {
-        $prompt += Write-Prompt -Object &amp;quot;$user@$computer &amp;quot; -ForegroundColor $sl.Colors.SessionInfoForegroundColor -BackgroundColor $sl.Colors.SessionInfoBackgroundColor
+        $prompt += Write-Prompt -Object &amp;quot;$user &amp;quot; -ForegroundColor $sl.Colors.SessionInfoForegroundColor -BackgroundColor $sl.Colors.SessionInfoBackgroundColor
     }

     if &amp;#40;Test-VirtualEnv&amp;#41; {
@@ -63,7 +77,11 @@
 }

 $sl = $global:ThemeSettings #local settings
+$sl.PromptSymbols.ElevatedSymbol = &amp;#91;char&amp;#93;::ConvertFromUtf32&amp;#40;0x26A1&amp;#41;
+$sl.PromptSymbols.FailedCommandSymbol = &amp;#91;char&amp;#93;::ConvertFromUtf32&amp;#40;0x274C&amp;#41;
 $sl.PromptSymbols.SegmentForwardSymbol = &amp;#91;char&amp;#93;::ConvertFromUtf32&amp;#40;0xE0B0&amp;#41;
+$sl.PromptSymbols.SegmentBackwardSymbol = &amp;#91;char&amp;#93;::ConvertFromUtf32&amp;#40;0xe0b2&amp;#41;
+$sl.PromptSymbols.TruncatedFolderSymbol = '.'
 $sl.Colors.PromptForegroundColor = &amp;#91;ConsoleColor&amp;#93;::White
 $sl.Colors.PromptSymbolColor = &amp;#91;ConsoleColor&amp;#93;::White
 $sl.Colors.PromptHighlightColor = &amp;#91;ConsoleColor&amp;#93;::DarkBlue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ちょっと実行時間のあたりが Cmder で出した場合にずれてしまうことがあって、微妙に余白をとってたりする。 でもこれでだいたい Cmder で見ても Windows Terminal でみても美しく出力される様になっている。 Windows Terminal ではシンボルフォントがめちゃくちゃ小さくなってしまうバグが有るのでまだ 100%最高とはいけないけど(&lt;a href='https://github.com/microsoft/terminal/issues/900'&gt;Certain &quot;emoji&quot; are still half-sized · Issue #900 · microsoft/terminal&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;余談だが、こんかい自作テーマの作成にあたり、既存テーマの PS モジュールにフォーマットの崩れを見つけたので PR 送ったら受け入れてもらえた。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/JanDeDobbeleer/oh-my-posh/pull/211'&gt;Format some themes. by krymtkts · Pull Request #211 · JanDeDobbeleer/oh-my-posh&lt;/a&gt;&lt;/p&gt;&lt;p&gt;自分の気に入っている OSS に PR を受けれてもらえるのはちょっとした感動があるな 😚&lt;/p&gt;
</description>
<pubDate>
Tue, 31 Mar 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-02-22-maven-auto-completion-0.2
</guid>
<link>
http://krymtkts.github.io/posts/2020-02-22-maven-auto-completion-0.2
</link>
<title>
MavenAutoCompletion v0.2
</title>
<description>
&lt;p&gt;およそ 1 年の時を経て、MavenAutoCompletion を更新した。とても小さな更新だ。&lt;/p&gt;&lt;p&gt;&lt;a href='https://www.powershellgallery.com/packages/MavenAutoCompletion/0.2'&gt;PowerShell Gallery | MavenAutoCompletion 0.2&lt;/a&gt;&lt;/p&gt;&lt;p&gt;この 3 連休はひとりで暇なので、しょうもない更新をするのも億劫でない。&lt;/p&gt;&lt;p&gt;&lt;a href='/posts/2019-04-02-pubslish-first-module-to-powershell-gallery'&gt;前回&lt;/a&gt;やった PSGallery への公開でのミスは、スクリプトを作成していたおかげもあり、1 年ぶりでもミスらなかった。&lt;/p&gt;&lt;p&gt;ただ...色々イケてないところも見つかっている。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;このモジュール、公開するものをサブディレクトリへコピペして公開しているのだけど、これってもともとそのディレクトリで開発してたらいい話&lt;/li&gt;&lt;li&gt;補完の定義が大量なので 1 ファイルの見通しが悪くなってる&lt;ul&gt;&lt;li&gt;更に非推奨にしたい補完候補の説明を追加できない構造&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;対応するの忘れてる非推奨タグ残したままになってる&lt;ul&gt;&lt;li&gt;&lt;code&gt;�x��: &amp;lt;licenseUrl&amp;gt; element will be deprecated, please consider switching to specifying the license in the package. Learn more: https://aka.ms/deprecateLicenseUrl.&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;とりあえず Issue を作っといて、忘れていても暇なときに課題を解消していけるように準備しておくかあ 😅&lt;/p&gt;
</description>
<pubDate>
Sat, 22 Feb 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2020-01-29-plannning
</guid>
<link>
http://krymtkts.github.io/posts/2020-01-29-plannning
</link>
<title>
2020
</title>
<description>
&lt;p&gt;書こう書こうと思って書けていなかった。 明文化する必要もないのかもしれんが、改めて書くことによって再認識したい、というのがこのポストの目的。&lt;/p&gt;&lt;h3 id=&quot;2020&amp;#95;年の目標&quot;&gt;2020 年の目標&lt;/h3&gt;&lt;p&gt;大きく分けて 3 つ。家庭、仕事、自分のことだ。&lt;/p&gt;&lt;h4 id=&quot;家庭&quot;&gt;家庭&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;引越&lt;ul&gt;&lt;li&gt;候補地の選定は終えている&lt;/li&gt;&lt;li&gt;永続的に住む場所ではないので次の候補も頭に浮かべておく&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;親族&lt;ul&gt;&lt;li&gt;10 年来の、シンプルにいってくだらないが制御不可能な、問題があるため今年上半期に対応を決める&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;仕事&quot;&gt;仕事&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;リモートワーク&lt;ul&gt;&lt;li&gt;現状 5 営業日中、固定の曜日で 2 時間だけ&lt;/li&gt;&lt;li&gt;子供の送り迎えの関係もあり、春から毎日 4 時間は事務所、残りはリモートにする&lt;/li&gt;&lt;li&gt;比較的コントローラブルな部分なので必ず達成する&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;昇給&lt;ul&gt;&lt;li&gt;職位はないが Job Rank みたいな給与の等級はあって、それは前年上がったので、今年は金額的な上昇に注力する&lt;ul&gt;&lt;li&gt;金額に注力するのは、ランクアップ時の昇給額が大したことなく、今のランクで継続的に(相対的に)良い評価を刻み続けることで上がるらしいため(へーしゃの場合)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;リード的な活動&lt;ul&gt;&lt;li&gt;主に CI/CD といった DevOps プラクティス, Serverless Architecture 面で貢献したい。ここに書く内容でもないが意思表明として&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;自分のこと&quot;&gt;自分のこと&lt;/h4&gt;&lt;p&gt;これが一番ないがしろになりがち、継続的にケアする方法も同時進行で考えたい。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;積ん読の消化&lt;ul&gt;&lt;li&gt;月に 1 冊を消化する&lt;ul&gt;&lt;li&gt;積ん読はもう何冊あるかわからないが、減らしていく習慣を今年確立する&lt;/li&gt;&lt;li&gt;とりあえず 1 月は、witcher① で攻略済み&lt;/li&gt;&lt;li&gt;これは自身の可能性を広げるためなので、最も優先する&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;OSS へのコントリビューション&lt;ul&gt;&lt;li&gt;今年 5 回は PR や Issue でコントリビューションしたい&lt;/li&gt;&lt;li&gt;1 回目は AWS Docs への PR で攻略済み&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;自作ツールの更新&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/krymtkts/MavenAutoCompletion'&gt;MavenAutoCompletion&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/krymtkts/mccall-bot'&gt;mccall-bot&lt;/a&gt;&lt;/li&gt;&lt;li&gt;他、気が向いたら&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;音楽活動&lt;ul&gt;&lt;li&gt;ギター練習を 30 分/週 3 回&lt;/li&gt;&lt;li&gt;バンド練習を年 4 回&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://krymtkts.github.io/'&gt;このブログ&lt;/a&gt;を毎月更新する&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;4 は他より優先度が低く、かつ制御不可能な部分が多いためハードルが下がりがち。なのでかならず達成したいところ。&lt;/p&gt;&lt;p&gt;5 は去年落とした目標なので今年こそは(それでもこのポスト時点でギリギリ 😂)&lt;/p&gt;&lt;p&gt;救いのない社会だが、自分・家族の人生にいい影響をもたらそう。エッセンシャル思考とマッコーリズムの実践だ。&lt;/p&gt;
</description>
<pubDate>
Wed, 29 Jan 2020 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-12-29-retrospective2019
</guid>
<link>
http://krymtkts.github.io/posts/2019-12-29-retrospective2019
</link>
<title>
振り返り 2019 年
</title>
<description>
&lt;p&gt;ことし 2019 年も残すところあと僅か。2019 年の自身の成長などを振り返ろう。&lt;/p&gt;&lt;p&gt;短くまとめると、2019 年は新しいことを始めた年になった。&lt;/p&gt;&lt;p&gt;転職し、未体験の事業領域の企業で働き始めた。 会社の後押しもあって積極的に未経験の技術を取り入れ、部分的ではあるが在宅ワークもしてみた。&lt;h2&gt;&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;前職は、実にチョロいかいしゃだったので、6 年ほどの在職中に入社前の 8 割ほど昇給できたのはこの会社のおかげ(前々職がリーマンのあおりもあって給料安すぎたのだけど)。 しかしながら、従業員に対する評価や報酬については不誠実極まりなかったし、自分の思い描くエンジニア像に必要な経験を積めなくなったのは一番痛かった。 やる気と実力を以て希望さえすれば挑戦させてくれる、入社時にあったような腕を磨ける環境が失われていくのは、1 度ならずこの会社を最後の会社にできそうだと心に思った自分には辛いものがあった。これは過去の話だけど。&lt;/p&gt;&lt;p&gt;転職して今の会社に入れたのもよかった。適切な判断を下すのにインフラ、クラウドの知識を求められ、わたしの技術スタックのうすーいところを絶妙に攻め立ててくれる。 おかげで徐々にではあるが弱いところを克服できている。 また強みである積極性と吸収スピードの高さが上手く活かせて、CI/CD の補填、未体験だったのにサーバーレスアーキテクチャや Python を選ばせてくれたり。 カンファレンスに積極的に参加して、社内に情報を持ち帰ったり、やりたかったことが色々でき始めた。 会社での評価も今のところは順調で、現場での自身の成長スピードを増幅できていると感じる。&lt;/p&gt;&lt;p&gt;心配事があるとしたら、前職の 1 年目年末もこんなのだったので、同じ轍を踏みたくないなというところか 😅&lt;h2&gt;&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;自分でも御しきれていなかったのは、在宅ワークの部分。 今は子供の面倒を見る機会を平日は週に 1 回設けて、その日を早く帰って在宅ワークの日としている。 在宅中の仕事の進め方と家族との関わり方の両立が難しくて、まだ納得の行く形になっていない。そりゃ家族からしたら、家にいるのだから色々やってほしいことができてしまうし、このままだと単純に自身の過重労働だなあと思っている。 こういった我が家のパターンだと、在宅ワークよりもちょっとカフェとかで仕事するとかがよいのか。 通勤時間を削る＆家族とも連絡を断つ、という手段がいるのかも、ただしそれは元々わたしの考えていた在宅ワークの動機と違うけど。 この辺は来年 2020 年になってからも、また別の手段を検討していきたい。&lt;h2&gt;&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;最後に今年密かに目標としていた、1 年間毎月投稿を書く、について。 どこにも宣言してなかったけどブログを継続するという習慣づくりのためにこの目標を据えた。 結果は未達。11 月が現職の障害対応で気持ちに余裕がなかったため。まあ投稿の数は平均月 2 のペースになってたので、この点は目をつぶろう 🙈&lt;/p&gt;&lt;p&gt;来年も目標をゆるくだが設定して邁進したく。もっと情報に触れて、コードを書いて、という生活に昇華しよう。&lt;/p&gt;&lt;p&gt;(きょうの投稿には 1 文字もコードがなかったけど、特例日 😆)&lt;/p&gt;
</description>
<pubDate>
Sun, 29 Dec 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-10-14-how-to-handle-waiter-of-boto3
</guid>
<link>
http://krymtkts.github.io/posts/2019-10-14-how-to-handle-waiter-of-boto3
</link>
<title>
boto3 の Waiter さんとの戯れ
</title>
<description>
&lt;p&gt;こないだの仕事。AWS Certificate Manager で証明書をごにょごにょするアプリを書いた。&lt;/p&gt;&lt;p&gt;Python で書いたので AWS のリソースを操作するのに &lt;a href='https://boto3.amazonaws.com/v1/documentation/api/latest/index.html'&gt;Boto3&lt;/a&gt; というライブラリを利用した。証明書を発行したあと検証済みになるまでの待受処理が&lt;code&gt;Waiter&lt;/code&gt;という機能で提供されていたり、非常に便利で大変お世話になっている。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/acm.html#ACM.Waiter.CertificateValidated'&gt;ACM.Waiter.CertificateValidated — Boto 3 Docs 1.9.248 documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ただ、一つバグらせてしまったところがあった。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Waiter&lt;/code&gt;さんは AWS のリソースを操作する API をラップしているだけ&lt;a href='#fn-1' id='fnref1'&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;なので、API がエラーを発生させた場合と待受処理がタイムアウトした場合のどちらとも、&lt;code&gt;WaiterError&lt;/code&gt;を発生させる。つまり単純にキャッチするだけの例外処理では違いに気づけないのだ 😱&lt;/p&gt;&lt;p&gt;どのようにハンドリングするか？&lt;code&gt;WaiterError&lt;/code&gt;さんの属性を調べてあげれば良い。&lt;/p&gt;&lt;p&gt;&lt;code&gt;dir&lt;/code&gt;したら&lt;code&gt;last&amp;#95;response&lt;/code&gt;なる属性があったのでそいつを見たら、もとのエラーが何だったのかは分かる形にはなってた。&lt;/p&gt;&lt;p&gt;エラーの場合、&lt;code&gt;WaiterError.last&amp;#95;response&amp;#91;'Error'&amp;#93;&lt;/code&gt;にエラー情報が格納される。&lt;code&gt;Waiter&lt;/code&gt;さんがリトライ回数の上限に達して&lt;code&gt;WaiterError&lt;/code&gt;をぶん投げてきた場合は、&lt;code&gt;last&amp;#95;response&lt;/code&gt;には&lt;code&gt;Waiter&lt;/code&gt;さんが内包する API の戻り値が架空されるので、それをもとにエラー処理すれば良いのがわかった。以下イメージ。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;{'Error': {'Message': 'Could not find certificate arn:aws:acm:ap-northeast-1:xxxxxxxxxxxx:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx in account xxxxxxxxxxxx.', 'Code': 'ResourceNotFoundException'}, 'ResponseMetadata': {'RequestId': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', 'HTTPStatusCode': 400, 'HTTPHeaders': {'x-amzn-requestid': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', 'content-type': 'application/x-amz-json-1.1', 'content-length': '191', 'date': 'Fri, 11 Oct 2019 03:51:10 GMT', 'connection': 'close'}, 'RetryAttempts': 0}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;👍 &lt;ol class='footnotes'&gt;&lt;li id='fn-1'&gt;証明書の検証済みを待つ&lt;code&gt;ACM.Waiter.CertificateValidated&lt;/code&gt;の場合は&lt;code&gt;ACM.Client.describe&amp;#95;certificate&amp;#40;&amp;#41;&lt;/code&gt;をラップしている。&lt;a href='#fnref1'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
</description>
<pubDate>
Mon, 14 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-10-13-docker-toolbox-with-powershell
</guid>
<link>
http://krymtkts.github.io/posts/2019-10-13-docker-toolbox-with-powershell
</link>
<title>
PowerShell で Docker Toolbox を使う
</title>
<description>
&lt;p&gt;へーしゃはちょっといけてなくて、秘伝の古い VM をコンテナ化しない&lt;del&gt;できない&lt;/del&gt;まま使っている。&lt;/p&gt;&lt;p&gt;加えて社内は Windows ユーザと Mac ユーザがごちゃまぜなので VM が VirtualBox のため、Windows ユーザであるわたしは Docker on Windows を使えず。&lt;/p&gt;&lt;p&gt;Docker Toolbox を日常使いしているのだが、&lt;code&gt;docker&lt;/code&gt;に&lt;code&gt;docker-compose&lt;/code&gt;に&lt;code&gt;docker-machine&lt;/code&gt;まで現れたらコマンドやオプションが覚えきれないのが現状である 😭&lt;/p&gt;&lt;p&gt;これらを PowerShell で楽ちんに使おう。いますぐ以下のモジュールを PSGallery からゲットしよう。これらを発見したときは狂喜乱舞した。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.powershellgallery.com/packages/DockerCompletion/1.1903.0.190723'&gt;PowerShell Gallery | DockerCompletion 1.1903.0.190723&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.powershellgallery.com/packages/DockerComposeCompletion/1.24.0.190329'&gt;PowerShell Gallery | DockerComposeCompletion 1.24.0.190329&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.powershellgallery.com/packages/DockerMachineCompletion/0.16.2.190903'&gt;PowerShell Gallery | DockerMachineCompletion 0.16.2.190903&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以下、雑なインストール例。もちろん PowerShell Guys(勝手にそう呼んでいる)なら自前の Profile に追記しよう。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Install-Module -Name DockerCompletion,DockerComposeCompletion,DockerMachineCompletion
Import-Module -Name DockerCompletion,DockerComposeCompletion,DockerMachineCompletion
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで&lt;code&gt;docker-machine start&lt;/code&gt;に始まり&lt;code&gt;docker&lt;/code&gt;やら&lt;code&gt;docker-compose&lt;/code&gt;でのイメージ・コンテナの名前補完とか諸々できるようになる。世の中、すごいモジュールを作る方がいるもんやねえ 🤔&lt;/p&gt;
</description>
<pubDate>
Sun, 13 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-09-22-limitaion-of-remove-certificates
</guid>
<link>
http://krymtkts.github.io/posts/2019-09-22-limitaion-of-remove-certificates
</link>
<title>
ALBのListenerから証明書を削除するときの制限
</title>
<description>
&lt;p&gt;タイトルの通り。&lt;/p&gt;&lt;p&gt;仕事中にわかっただけで2つある。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;ALBのListenerに登録された証明書を一度にまとめて消せる上限は10件ぽい&lt;/li&gt;&lt;li&gt;ALBのListenerから証明書を消したあと、証明書に関連づいたリソースが消えるまで待たないといけない&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;上記はPython(boto3)からAWSのリソースを操作した際のもの。boto3はpipでインストールできる最新のv1.9.233。&lt;/p&gt;&lt;h3 id=&quot;1.&amp;#95;albのlistenerに登録された証明書を一度にまとめて消せる上限は10件ぽい&quot;&gt;1. ALBのListenerに登録された証明書を一度にまとめて消せる上限は10件ぽい&lt;/h3&gt;&lt;p&gt;ドキュメントには書かれてない気がする。少なくとも&lt;a href='https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elbv2.html#ElasticLoadBalancingv2.Client.remove_listener_certificates'&gt;boto3&lt;/a&gt;と&lt;a href='https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_RemoveListenerCertificates.html'&gt;ELBのAPIリファレンス&lt;/a&gt;のどちらにも記載がない。&lt;/p&gt;&lt;p&gt;問い合わせして聞いてないねんけど、書いてあったら教えてほしい🤔&lt;/p&gt;&lt;p&gt;以下はListener Certificatesの上限25件全部を一気に消そうとしたときのログ。センシティブな部分は削ってある。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;log&quot;&gt;Traceback &amp;#40;most recent call last&amp;#41;:
  File &amp;quot;C:\workspace\alb-batch\albbatch\elbapi.py&amp;quot;, line 102, in remove&amp;#95;cerificates
    Certificates=params&amp;#41;
  File &amp;quot;C:\Users\takatoshi&amp;#95;kuriyama\.virtualenvs\alb-batch-J4EQQ8Xf\lib\site-packages\botocore\client.py&amp;quot;, line 357, in &amp;#95;api&amp;#95;call
    return self.&amp;#95;make&amp;#95;api&amp;#95;call&amp;#40;operation&amp;#95;name, kwargs&amp;#41;
  File &amp;quot;C:\Users\takatoshi&amp;#95;kuriyama\.virtualenvs\alb-batch-J4EQQ8Xf\lib\site-packages\botocore\client.py&amp;quot;, line 661, in &amp;#95;make&amp;#95;api&amp;#95;call
    raise error&amp;#95;class&amp;#40;parsed&amp;#95;response, operation&amp;#95;name&amp;#41;
botocore.exceptions.ClientError: An error occurred &amp;#40;ValidationError&amp;#41; when calling the RemoveListenerCertificates operation: Up to '10' certificate ARNs can be specified, but '25' were specified
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2.&amp;#95;albのlistenerから証明書を消したあと、証明書に関連づいたリソースが消えるまで待たないといけない&quot;&gt;2. ALBのListenerから証明書を消したあと、証明書に関連づいたリソースが消えるまで待たないといけない&lt;/h3&gt;&lt;p&gt;ACMで証明書を削除する場合、その証明書が他のAWSリソースに関連付けられていると&lt;code&gt;ResourceInUseException&lt;/code&gt;(boto3では&lt;code&gt;ClientError&lt;/code&gt;)で削除できない。&lt;/p&gt;&lt;p&gt;&lt;a href='https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/acm.html#ACM.Client.delete_certificate'&gt;ACM.Client.delete_certificate&lt;/a&gt; から抜粋。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; You cannot delete an ACM certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;なのでまず関連付けられたLoad BalancerのListenerなどから証明書を取り除いた後、かつ証明書の情報からもその関連付けが取り除かれたことを確認しないと安全に削除できない😱&lt;/p&gt;&lt;p&gt;どうすればよいかというと、ACMの&lt;code&gt;DescribeCertificate&lt;/code&gt;のレスポンスに含まれる&lt;code&gt;InUseBy&lt;/code&gt;リストの中が空になってたら、それらの関連付けが取り除かれた状態なので安全に削除できる。&lt;/p&gt;&lt;p&gt;ACMで提供されてる&lt;code&gt;Waiter&lt;/code&gt;は検証待ちのみで、それ用にはないみたいなので、以下のように手動で待ち合わせする...🤔&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;def wait&amp;#95;until&amp;#95;certificate&amp;#95;unused&amp;#40;self, arn: str&amp;#41;:
    cert = self.acm&amp;#95;client.describe&amp;#95;certificate&amp;#40;CertificateArn=arn&amp;#41;
    while len&amp;#40;cert&amp;#91;'InUseBy'&amp;#93;&amp;#41; &amp;gt; 0:
        time.sleep&amp;#40;1&amp;#41;
        cert = self.acm&amp;#95;client.describe&amp;#95;certificate&amp;#40;CertificateArn=arn&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;めんどくせえええええ、こんなsnipetレベルのモノは&lt;code&gt;Waiter&lt;/code&gt;作って欲しいわ😭&lt;/p&gt;
</description>
<pubDate>
Sun, 22 Sep 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-09-01-aws-lambda-cloud-front-and-serverless
</guid>
<link>
http://krymtkts.github.io/posts/2019-09-01-aws-lambda-cloud-front-and-serverless
</link>
<title>
Serverless FrameworkでAWS LambdaとCloudFront
</title>
<description>
&lt;p&gt;AWS Lambdaって書くのはホント簡単。&lt;/p&gt;&lt;p&gt;でも手動でデプロイするのはほんまに勘弁してほしいわ...って感じだったのでAWS強メンの同僚に相談してみたところ、&lt;a href='https://serverless.com/framework/'&gt;Serverless Framework&lt;/a&gt;ってのがいい具合に抽象化してくれてるので試しに使ってみては？と助言いただけた。&lt;/p&gt;&lt;h3 id=&quot;使ってみた&quot;&gt;使ってみた&lt;/h3&gt;&lt;p&gt;事前にNodeが必要なことくらい。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;# global install
$ npm install -g serverless

# installed version
$ serverless --version
Framework Core: 1.51.0
Plugin: 1.3.10
SDK: 2.1.0

# generate boilerplate
$ serverless create --template aws-python3
Serverless: Generating boilerplate...
 &amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;                             &amp;#95;&amp;#95;
|   &amp;#95;   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |&amp;#95;&amp;#95;&amp;#95;|  -&amp;#95;&amp;#95;|   &amp;#95;|  |  |  -&amp;#95;&amp;#95;|   &amp;#95;|  |  -&amp;#95;&amp;#95;|&amp;#95;&amp;#95; --|&amp;#95;&amp;#95; --|
|&amp;#95;&amp;#95;&amp;#95;&amp;#95;   |&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;|&amp;#95;&amp;#95;|  \&amp;#95;&amp;#95;&amp;#95;/|&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;|&amp;#95;&amp;#95;| |&amp;#95;&amp;#95;|&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;|&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;|&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.51.0
 -------'

Serverless: Successfully generated boilerplate for template: &amp;quot;aws-python3&amp;quot;
Serverless: NOTE: Please update the &amp;quot;service&amp;quot; property in serverless.yml with your service name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで生成された関数に処理を書くだけ。あ～らかんたん😁&lt;/p&gt;&lt;p&gt;デプロイも超簡単なので、これならCDに組み込むのも楽そう。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;# deploy
serverless deploy -v

# deploy to specific stage
serverless deploy -v --stage dev
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;cloudfrontを添えて&quot;&gt;CloudFrontを添えて&lt;/h3&gt;&lt;p&gt;今回の仕事ではちょっと特殊な事情でCloudFrontを経由してLambdaのエンドポイントURLへリクエストする必要があった。&lt;/p&gt;&lt;p&gt;プラグインを使えばかんたんに記述することもできる。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/Droplr/serverless-api-cloudfront'&gt;Droplr/serverless-api-cloudfront: Serverless Plugin - CloudFront distribution in front of your API Gateway&lt;/a&gt;&lt;/p&gt;&lt;p&gt;が、かんたんに記述できる＝かんたんな内容しかいじれない、のため片手落ちな点が多かった。諸々のパラメータの指定ができなくて細かな指定をする場合は結局&lt;code&gt;resources&lt;/code&gt;セクションに自力でCloudFormationを書くことになった。&lt;/p&gt;&lt;p&gt;以下はresourceセクションのサンプル。&lt;code&gt;DomainName&lt;/code&gt;の解決は以下のStackoverflowからヒントを得た。&lt;/p&gt;&lt;p&gt;&lt;a href='https://stackoverflow.com/questions/50931730/deploying-lambda-api-gateway-cloudfront-through-serverless-framework-at-a-ti'&gt;amazon web services - Deploying Lambda + API-gateway + CloudFront through serverless framework at a time - Stack Overflow&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;resources:
  Resources:
    LambdaDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: &amp;quot;managed by serverless framewrok&amp;quot;
          HttpVersion: http2
          PriceClass: PriceClass&amp;#95;All
          Origins:
            - Id: ApiGateway
              DomainName: !Join
                - &amp;quot;.&amp;quot;
                - - !Ref ApiGatewayRestApi
                  - execute-api
                  - !Ref AWS::Region
                  - amazonaws.com
              OriginPath: /
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginReadTimeout: 10
                OriginSSLProtocols:
                  - &amp;quot;SSLv3&amp;quot;
                  - &amp;quot;TLSv1&amp;quot;
                  - &amp;quot;TLSv1.1&amp;quot;
                  - &amp;quot;TLSv1.2&amp;quot;
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            Compress: false
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              Cookies:
                Forward: none
              Headers:
                - x-api-key
              QueryString: false
            TargetOriginId: ApiGateway
            ViewerProtocolPolicy: redirect-to-https
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ちなみにLambda@Edgeにはまだ対応していないみたいでプラグインの利用が必須となっている様子。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/serverless/serverless/issues/3944'&gt;Support for Lambda@Edge · Issue #3944 · serverless/serverless&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;感想&quot;&gt;感想&lt;/h3&gt;&lt;p&gt;AWSだけにベンダーロックインせずServeless Computingの開発ができるよーな抽象化層を提供するようなCLIのイメージ。&lt;/p&gt;&lt;p&gt;誕生は数年前でまだまだ新し目のため、web上には新旧の情報が玉石混交の状態であるからして、細かなYAMLの記述内容の確認なんかは&lt;a href='https://serverless.com/framework/docs/'&gt;Serverless Framework Documentation&lt;/a&gt;を参考にし、大まかな書き方はそのへんのブログなどから引っこ抜いてくるのが良いと思われる。&lt;/p&gt;&lt;p&gt;まだ1プロダクトでしか使ってないけど、いい感触を得た。YAMLの記述内容は、AWSの場合でいうとresourcesはまんまCloudFormationなので、そのへんの知識があれば使いこなせそう。SaaSのやつはまだ使ってないので感触なし。&lt;/p&gt;&lt;h3 id=&quot;おまけ:&amp;#95;&lt;code&gt;sls&lt;/code&gt;というコマンド名&quot;&gt;おまけ: &lt;code&gt;sls&lt;/code&gt;というコマンド名&lt;/h3&gt;&lt;p&gt;ばかみたいな話なんやけど、Serverless Frameworkの短縮形コマンド&lt;code&gt;sls&lt;/code&gt;はPowerShellで言うところの&lt;code&gt;Select-String&lt;/code&gt;コマンドレットにエイリアスされてるので使えねえｗ&lt;/p&gt;&lt;p&gt;ではアデュー😘&lt;/p&gt;
</description>
<pubDate>
Sun, 01 Sep 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-08-11-test-lambda-with-pwsh
</guid>
<link>
http://krymtkts.github.io/posts/2019-08-11-test-lambda-with-pwsh
</link>
<title>
AWS LambdaをPowershellでテスト実行する
</title>
<description>
&lt;p&gt;へーしゃの支援によりGoogle Cloud Next Tokyo 2019へ参加できた。&lt;/p&gt;&lt;p&gt;とても有意義な時間を過ごせたのでブログをしたためたかったのだけど、日が経つにつれ仕事もメモもとっ散らかってしまい清書もできず、現時点でのブログへのまとめは断念中😫&lt;/p&gt;&lt;p&gt;代わりに小ネタを投稿する。&lt;/p&gt;&lt;h3 id=&quot;curlの代わりのpowershell&quot;&gt;curlの代わりのPowershell&lt;/h3&gt;&lt;p&gt;最近仕事でAWS Lambdaを使う機会を得た。へーしゃはAWSもGCPもどっちでもアリだが、現状はAWS優勢。わたしはGCPがいいけど。 元々最初にCloud WatchとAWS Lambdaで作った方が良いのでは？という提案をしていたのだが、大した理由もなく却下。その後追加された機能がLambdaじゃないと実行環境を準備するのが難しいというのが判明して、棚からぼた餅なチャンス到来。&lt;/p&gt;&lt;p&gt;本題に入ろう。今回作ったLambdaはAPI Gatewayと組み合わせてWeb APIとして利用する。&lt;/p&gt;&lt;p&gt;そのためAPI Key(&lt;code&gt;x-api-key&lt;/code&gt;)をRequest Headerに付与してリクエストされる想定でいる(現時点で)。&lt;/p&gt;&lt;p&gt;なのでブラウザなんかでテスト実行出来ないので、大抵のやつはcurlなんかでURLを叩く。しかしここはPowershellでやってみよう。&lt;/p&gt;&lt;p&gt;Web-APIを叩くのなら&lt;code&gt;Invoke-WebRequest&lt;/code&gt;がよかろう。追加のヘッダーは&lt;code&gt;-Headers&lt;/code&gt;にhashtableとして渡せるのだ。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Invoke-WebRequest -Uri https://omae-no-api-endpoint/helloworld -Headers @{'x-api-key' = 'omae-no-api-key!!!'}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;こうなる。そんだけ😉&lt;/p&gt;
</description>
<pubDate>
Sun, 11 Aug 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-07-28-have-a-good-day-with-poco
</guid>
<link>
http://krymtkts.github.io/posts/2019-07-28-have-a-good-day-with-poco
</link>
<title>
pocoで捗る日常生活
</title>
<description>
&lt;p&gt;&lt;a href='/posts/2019-06-23-poco'&gt;以前ちょっとだけ触れたpoco&lt;/a&gt;を使いだしてから、よく使うディレクトリへの移動とか、&lt;code&gt;PSReadline&lt;/code&gt;のHistoryからよく使うコマンドを引っ張り出すとかの、インタラクティブなコマンドが作りやすくとて捗っている。&lt;/p&gt;&lt;p&gt;&lt;a href='https://gist.github.com/krymtkts/f8af667c32b16fc28a815243b316c5be'&gt;Gistにあげたプロファイル&lt;/a&gt;にまるっと書いているのだけど、ココではコメントも添えて書いておく。&lt;/p&gt;&lt;h3 id=&quot;&lt;code&gt;psreadline&lt;/code&gt;のhistoryを見る/実行する&quot;&gt;&lt;code&gt;PSReadline&lt;/code&gt;のhistoryを見る/実行する&lt;/h3&gt;&lt;p&gt;作った関数は以下の通り。似たようなモジュールはPSGalleryに何個かあるけど、pocoで書きたかったので自作した次第。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;function Show-ReadLineHistory&amp;#40;&amp;#41; {
    Get-Content -Path &amp;#40;Get-PSReadlineOption&amp;#41;.HistorySavePath | Select-Object -Unique | Select-Poco -CaseSensitive
}
Set-Alias pghy Show-ReadLineHistory -Option AllScope

function Invoke-ReadLineHistory&amp;#40;&amp;#41; {
    Show-ReadLineHistory | Select-Object -First 1 | Invoke-Expression
}
Set-Alias pihy Invoke-ReadLineHistory -Option AllScope
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;途中で&lt;code&gt;Select-Object -Unique&lt;/code&gt;を挟んでいるのは、わたしがやたら同じコマンドを繰り返すので重複を省くため😅&lt;/p&gt;&lt;p&gt;&lt;code&gt;Select-Object -First 1&lt;/code&gt;はpoco自体の機能不足(選択機能がない)のを補うためである😭&lt;/p&gt;&lt;p&gt;ちなみにPowerShellのHistoryが謎な件についてはソースはこの辺。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://qiita.com/yuta0801/items/ad0cf608144fb1546e54'&gt;PowerShellの完全な履歴を取得する - Qiita&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://stackoverflow.com/questions/44104043/how-can-i-see-the-command-history-across-all-powershell-sessions-in-windows-serv'&gt;How can I see the command history across all PowerShell sessions in Windows Server 2016? - Stack Overflow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Get-History&lt;/code&gt;は現在のセッションの情報しか取らない。でも実は&lt;code&gt;&amp;#40;Get-PSREeadlineOption&amp;#41;.HistorySavePath&lt;/code&gt;に保存されている、という話🤔&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;#126;\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost&amp;#95;history.txt&lt;/code&gt;な感じでテキストファイルに保存されている。&lt;/p&gt;&lt;p&gt;ちなみに本来の&lt;code&gt;Get-History&lt;/code&gt;実行結果のような履歴ごとにIDを振るのはやってない。&lt;/p&gt;&lt;h3 id=&quot;お気に入りのディレクトリへ移動する&quot;&gt;お気に入りのディレクトリへ移動する&lt;/h3&gt;&lt;p&gt;これはパクリ。仕事で使うリポジトリはghqを使わないで決められたディレクトリへcloneすることを期待されてたりするので、そのときにこういう任意のディレクトリへの移動ができるやつが重宝してる。&lt;/p&gt;&lt;p&gt;&lt;a href='https://mattn.kaoriya.net/software/peco.htm'&gt;Big Sky :: Windows のコマンドプロンプトを10倍便利にするコマンド「peco」&lt;/a&gt;&lt;/p&gt;&lt;p&gt;あと編集機能は未実装。わたしの用途では編集よりも削除機能のほうが良いかなと思ったりしてるところ🤔&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;function Set-SelectedLocation {
    param&amp;#40;
        &amp;#91;ValidateSet&amp;#40;&amp;quot;Add&amp;quot;, &amp;quot;Move&amp;quot;, &amp;quot;Edit&amp;quot;&amp;#41;&amp;#93;$Mode = &amp;quot;Move&amp;quot;,
        &amp;#91;string&amp;#93;$Location
    &amp;#41;
    switch &amp;#40;$Mode&amp;#41; {
        &amp;quot;Add&amp;quot; {
            if &amp;#40;$Location&amp;#41; {
                Write-Output &amp;quot;$Location&amp;quot; | Out-File -Append -Encoding UTF8 &amp;quot;&amp;#126;/.poco-cd&amp;quot;
                break
            }
        }
        &amp;quot;Move&amp;quot; {
            Get-Content -Path &amp;quot;&amp;#126;/.poco-cd&amp;quot; | Select-Poco -CaseSensitive | Select-Object -First 1 | Set-Location
            break
        }
        &amp;quot;Edit&amp;quot; {
            break
        }
    }
}
Set-Alias pcd Set-SelectedLocation -Option AllScope
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;雑なまとめ&quot;&gt;雑なまとめ&lt;/h3&gt;&lt;p&gt;これらのツールをpocoの補完ツールとしてもうちと洗練してもいいかもしれんなあと思ったりしてる🤔&lt;/p&gt;
</description>
<pubDate>
Sun, 28 Jul 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-07-07-cement-the-cli-framework
</guid>
<link>
http://krymtkts.github.io/posts/2019-07-07-cement-the-cli-framework
</link>
<title>
CementというCLIフレームワーク
</title>
<description>
&lt;p&gt;仕事で、なんかDBに通信しながらAWSのAPIをぶん殴ってゴニョゴニョするバックエンド処理を書く必要があって、Pythonで書くことになった。&lt;/p&gt;&lt;p&gt;&lt;a href='https://python-guideja.readthedocs.io/ja/latest/index.html'&gt;Python ヒッチハイク・ガイド — The Hitchhiker's Guide to Python&lt;/a&gt;を参考にCLIのフレームワークを見ていって、サンプル的に作ってみた感じや継続的にメンテされてることとかで&lt;a href='https://builtoncement.com/'&gt;Cement Framework&lt;/a&gt;を採用することにした。&lt;/p&gt;&lt;p&gt;簡潔に説明すると、CLIアプリケーション作成を容易にするためのフレームワーク。なんとAWS Elastic Beanstalkに使われてるらしい。&lt;/p&gt;&lt;p&gt;数少ない日本語の資料。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://qiita.com/ma2saka/items/9aacc46e20b9886ec156'&gt;自分が必要とする最低限の Cement の情報 - Qiita&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ほんとに少ないのでなんか自分用にメモを取ろうとこの記事をしたためた次第である。&lt;/p&gt;&lt;p&gt;ボイラープレートでCLIのベースはできてしまうので、あとはその中身を書いていくだけ。ちょっとAPIドキュメントがわかりにくい気もするが、YAMLの設定ファイル読み込みやロギングなども拡張機能としてある。今の所はとてもよくできた使いやすいFWだと思っている。こんどコードの生成らへんの簡単な手順をまとめてみたい。&lt;/p&gt;&lt;p&gt;すでに途中までCementをベースに開発しているのだけど、少し困った点がある。&lt;/p&gt;&lt;h3 id=&quot;困った点&quot;&gt;困った点&lt;/h3&gt;&lt;p&gt;&lt;a href='https://github.com/datafolklabs/cement/issues/549'&gt;Cement not compatible with pipenv · Issue #549 · datafolklabs/cement&lt;/a&gt;&lt;/p&gt;&lt;p&gt;バグでpipenvは&lt;code&gt;setup.py&lt;/code&gt;をインストール出来ないのでエラーで死ぬのだ😭わたしが考えた対策としてはイカのトーリである。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;開発環境&lt;ul&gt;&lt;li&gt;&lt;code&gt;pipenv install -r requirement.txt&lt;/code&gt;などを使いつつ開発&lt;/li&gt;&lt;li&gt;実行時には作業ディレクトリでスクリプト実行する感じ&lt;code&gt;python -m myapp.main&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;製品環境&lt;ul&gt;&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;を使ったインストール及び&lt;code&gt;setup.py&lt;/code&gt;でモジュールをインストール&lt;/li&gt;&lt;li&gt;モジュール実行を行うのでどこでもok(なはず)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;まだ開発途上なので、製品環境の想定がそのままうまくいくかはビミョーなところ🤔また試行錯誤しなくては。&lt;/p&gt;&lt;p&gt;最近は[Poetry(https://cocoatomo.github.io/poetry-ja/index.html)のほうがイケてると聞くし、はじめからPipenvを使わないようにしてたら良かった感はしなくはない😭&lt;/p&gt;
</description>
<pubDate>
Sun, 07 Jul 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-06-29-season-of-openssh-error
</guid>
<link>
http://krymtkts.github.io/posts/2019-06-29-season-of-openssh-error
</link>
<title>
またOpenSSHが動かなくなる季節がやってきた
</title>
<description>
&lt;p&gt;アップデートの度に何かあるので、もはや風物詩と化したOpenSSHのエラー。&lt;/p&gt;&lt;p&gt;&lt;a href='/posts/2019-03-31-win-openssh-is-gone'&gt;前回のエラー&lt;/a&gt;&lt;/p&gt;&lt;p&gt;きょうChocolateyでパッケージ更新したらWindowsのOpenSSHがアップデートされた様子。&lt;a href='https://github.com/PowerShell/Win32-OpenSSH/releases/tag/v8.0.0.0p1-Beta'&gt;Release v8.0.0.0p1-Beta · PowerShell/Win32-OpenSSH&lt;/a&gt;かな？&lt;/p&gt;&lt;p&gt;それに伴い&lt;code&gt;ssh-agent&lt;/code&gt;サービスが消え去ってしまった。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ Get-Service -Name 'ssh-agent'
Get-Service : Cannot find any service with service name 'ssh-agent'.
At line:1 char:1
+ Get-Service -Name 'ssh-agent'
+ &amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;
+ CategoryInfo          : ObjectNotFound: &amp;#40;ssh-agent:String&amp;#41; &amp;#91;Get-Service&amp;#93;, ServiceCommandException
+ FullyQualifiedErrorId : NoServiceFoundForGivenName,Microsoft.PowerShell.Commands.GetServiceCommand
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;単純に再インストールしても自動でサービス登録はされなかったのだけど、同梱されているファイルを見てみたところそれらしいスクリプト&lt;code&gt;install-sshd.ps1&lt;/code&gt;を発見した。Wikiにも記載がある。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH#install-win32-openssh-test-release'&gt;Install Win32 OpenSSH · PowerShell/Win32-OpenSSH Wiki&lt;/a&gt;&lt;/p&gt;&lt;p&gt;実行してみたところ無事にサービスが作成されたので一安心。サービス自動起動の設定をしておいて完了した。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ .\install-sshd.ps1
&amp;#91;SC&amp;#93; SetServiceObjectSecurity SUCCESS
&amp;#91;SC&amp;#93; ChangeServiceConfig2 SUCCESS
&amp;#91;SC&amp;#93; ChangeServiceConfig2 SUCCESS
sshd and ssh-agent services successfully installed
$ Get-Service 'ssh-agent'

Status   Name               DisplayName
------   ----               -----------
Stopped  ssh-agent          OpenSSH Authentication Agent

$ Set-Service -name &amp;quot;ssh-agent&amp;quot; -startuptype &amp;quot;automatic&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ふう🙃&lt;/p&gt;
</description>
<pubDate>
Sat, 29 Jun 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-06-23-poco
</guid>
<link>
http://krymtkts.github.io/posts/2019-06-23-poco
</link>
<title>
Poco
</title>
<description>
&lt;p&gt;5月以降outputのリズムが崩れております🤔&lt;/p&gt;&lt;p&gt;時間の使い方の改善を目論み、ポモドーロを導入するなど。まだ効果の程は見えていないので今日はPowerShell版pecoのpocoを紹介する。&lt;/p&gt;&lt;h3 id=&quot;peco&quot;&gt;peco&lt;/h3&gt;&lt;p&gt;まずpecoってなんじゃこらって感じでもあるのだが、linuxなどで使えるインクリメンタルなフィルタリングコマンドらしい。&lt;/p&gt;&lt;p&gt;[Unix :: コマンド / peco [Tipsというかメモ]](http://tm.root-n.com/unix:command:peco)&lt;/p&gt;&lt;p&gt;こんなに便利な機能なので、もちろんWindowsでも使えるようになってある &lt;a href='https://github.com/peco/peco'&gt;peco/peco: Simplistic interactive filtering tool&lt;/a&gt;&lt;/p&gt;&lt;p&gt;ただ日常使いのシェルをPowerShellにしている身としては、単純なテキストの絞り込みじゃなくてオブジェクトを扱えるやつが望ましいわけで...&lt;/p&gt;&lt;h3 id=&quot;poco&quot;&gt;poco&lt;/h3&gt;&lt;p&gt;というふうに思ってたら普通にPowerShell Galleryにあったわ😲&lt;/p&gt;&lt;p&gt;PowerShellの場合は&lt;a href='https://gist.github.com/yumura/8df37c22ae1b7942dec7'&gt;powershell peco&lt;/a&gt;というのがあって、それを使ったPSModuleがPSGalleryに上がっている...!!!これは使わない手はないぞよ🤔&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.powershellgallery.com/packages/poco/1.1.0'&gt;PowerShell Gallery | poco 1.1.0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/jasonmarcher/poco'&gt;jasonmarcher/poco: Interactive pipeline filtering in PowerShell (a port of peco).&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ただしこのモジュール、&lt;a href='https://gist.github.com/yumura/8df37c22ae1b7942dec7'&gt;powershell peco&lt;/a&gt;のコードをそのまま使ってるのが現状みたいで、作者の方が書かれている改善点そのまま残ってるくさい😭&lt;/p&gt;&lt;p&gt;&lt;a href='https://qiita.com/yumura_s/items/a068329769c6338471dd'&gt;PowerShell で peco (インタラクティブ・フィルタリングツール)っぽいものを作った - Qiita&lt;/a&gt;&lt;/p&gt;&lt;p&gt;という具合に不完全なできであるのは確かなんやが、雰囲気でCLIにPowerShellを使っているようなワイには非常に便利なツールなのである。&lt;/p&gt;&lt;h3 id=&quot;pocoを使ってなにか書こう&quot;&gt;pocoを使ってなにか書こう&lt;/h3&gt;&lt;p&gt;例えば、PowerShellではCLIの完全な入力履歴を取ろうとしたら&lt;code&gt;PSReadLine&lt;/code&gt;に頼ることになるのだが、こいつをインタラクティブにフィルタリングするコマンドをぺぺっと書いてしまうこともできる↓&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;function Show-ReadLineHistory&amp;#40;&amp;#41; {
    Get-Content -Path &amp;#40;Get-PSReadlineOption&amp;#41;.HistorySavePath | poco
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;こんな風な単純なやつは正直なところpecoで十分なのだけど...&lt;/p&gt;&lt;p&gt;あと、検索結果の1行を選んで即実行なんしたいのだけど、pocoの機能不足でリストアップされた検索結果をarrow keyで選んだりとかできないので、今のところかなり癖のある使い方になってる😅&lt;/p&gt;&lt;p&gt;そんな感じPowerShellにも育てたい？ツールがあって使っていくモチベーションみたいなもんが湧いてきますな？🤔現状至らないところ多いからなんかコントリビュートしたい。 でもまず時間を作らなあかんな🤔&lt;/p&gt;
</description>
<pubDate>
Sun, 23 Jun 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-06-02_install-shfmt-to-win-using-cli
</guid>
<link>
http://krymtkts.github.io/posts/2019-06-02_install-shfmt-to-win-using-cli
</link>
<title>
シェルスクリプトのフォーマッタをCLIでインストールする
</title>
<description>
&lt;p&gt;小ネタ。&lt;/p&gt;&lt;p&gt;へーしゃの仕事では、Bashで書かれたスクリプトの出番がめちゃくちゃ多い。&lt;/p&gt;&lt;p&gt;Bashが得意じゃないマンのわたしにとっては、そういったスクリプトを読み書きに慣れてないこともあり、結構疲れる仕事である。&lt;/p&gt;&lt;p&gt;そこでせめて書くのだけは少しでも楽したいと思って、フォーマッタを導入しようと思った。&lt;/p&gt;&lt;h3 id=&quot;ツールを導入する&quot;&gt;ツールを導入する&lt;/h3&gt;&lt;p&gt;shfmtというgolang製のツールがあるので、それを採択。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/mvdan/sh'&gt;mvdan/sh: A shell parser, formatter, and interpreter (POSIX/Bash/mksh)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;しかし悲しいかな、Windows用に提供されてるパッケージはScoopのみ(リンク切れてるけど)でChocolateyにない様子🤔(筆者はChocolateyユーザである)。&lt;/p&gt;&lt;p&gt;代わりにCLIでのインストールを使うことにする。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;cd $&amp;#40;mktemp -d&amp;#41;; go mod init tmp; go get mvdan.cc/sh/v3/cmd/shfmt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;でも&lt;code&gt;mktemp&lt;/code&gt;コマンドはPowerShellにはないし...そこは&lt;code&gt;mkdir&lt;/code&gt;で茶を濁す。あとtmpフォルダの後始末もする。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;cd $&amp;#40;mkdir tmp&amp;#41;; go mod init tmp; go get mvdan.cc/sh/v3/cmd/shfmt; cd ../; rm -r tmp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ええがな。&lt;/p&gt;&lt;h3 id=&quot;雑記&quot;&gt;雑記&lt;/h3&gt;&lt;p&gt;5月後半はうまく波に乗れずブログを書けなかった。まだアウトプットが習慣化していないようなので、きちんと積み重ねしていきたいもんやで🤔&lt;/p&gt;
</description>
<pubDate>
Sun, 02 Jun 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-05-11-pipenv-skeleton
</guid>
<link>
http://krymtkts.github.io/posts/2019-05-11-pipenv-skeleton
</link>
<title>
Pipenvのテンプレを作った
</title>
<description>
&lt;p&gt;&lt;a href='/posts/2019-04-29-bias-amp-2issue'&gt;前回&lt;/a&gt;の最後に触れた、仕事で経験を得た2019年のイケてそうなPython開発環境構築について。&lt;/p&gt;&lt;p&gt;この度新し目と思われるPythonのプロジェクト構築について学んだので、次回Pythonを触ることがあったとしてもぱぱっと始められるようにテンプレートを作ろうと思った次第である。&lt;/p&gt;&lt;p&gt;過去のeasy_installとかpipまでで知識が止まってたが、新たにpipenvを知ってかなり便利に使えるいい感じの印象を得たのもあって、動機付けされた感じ。&lt;/p&gt;&lt;p&gt;なので、勉強がてらGW中のお楽しみにちょろっと作った。&lt;/p&gt;&lt;h3 id=&quot;作ったもの&quot;&gt;作ったもの&lt;/h3&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/pipenv-skeleton'&gt;krymtkts/pipenv-skeleton&lt;/a&gt;&lt;/p&gt;&lt;p&gt;いろいろとググって、pipとかvirtualenvの時代は過ぎ去っており、いまはpienvがイケていると直感を得た。 なのでpipenvについて以下の記事などを参考にこのテンプレを作った。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://pipenv-ja.readthedocs.io/ja/translate-ja/'&gt;Pipenv: 人間のためのPython開発ワークフロー — pipenv 2018.11.27.dev0 ドキュメント&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.natsukium.com/blog/2019-02-18/python/'&gt;Python環境構築ベストプラクティス2019 - ばいおいんふぉっぽいの！&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://qiita.com/youkidkk/items/b6a6e39ee3a109001c75'&gt;Windows + Python 3.6 + PipEnv + Visual Studio Code でPython開発環境 - Qiita&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://qiita.com/tonluqclml/items/b09f4a5ed04ebcbd0af1'&gt;既存プロジェクトに pipenv を導入した方法 - Qiita&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;予めLinterやらFormatterやらをdevPackageとして用意している。LinterにはPylintを用意したが、エラーの自動修正がないようなのでautopep8も用意した。&lt;/p&gt;&lt;p&gt;あと静的型付けに守られた世界で仕事できるように、MyPyも用意している。Better Bashとして使うときは大げさかもしれないけど、その時は単にMyPyを使わなかったらいいだけ。&lt;/p&gt;&lt;p&gt;このプロジェクトをコピペして、moduleのところをこねこねして使うイメージ。&lt;/p&gt;&lt;p&gt;Pythonのモジュールシステムについてはまだ理解が浅い。以下を参考にドキュメントをあたって、&lt;code&gt;&amp;#95;&amp;#95;init.py&amp;#95;&amp;#95;&lt;/code&gt;,&lt;code&gt;&amp;#95;&amp;#95;main.py&amp;#95;&amp;#95;&lt;/code&gt;のらへんを定型化した感じ。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://stackoverflow.com/questions/448271/what-is-init-py-for'&gt;python - What is &lt;b&gt;init&lt;/b&gt;.py for? - Stack Overflow&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://stackoverflow.com/questions/4042905/what-is-main-py'&gt;python - What is &lt;b&gt;main&lt;/b&gt;.py? - Stack Overflow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ただ、&lt;code&gt;&amp;#95;&amp;#95;init.py&amp;#95;&amp;#95;&lt;/code&gt;は名前空間パッケージではなくていいようだし、よりモダンな方法に寄せたいので再検討するかな。単に今はわたしの知識がそこまで及んでない😭Pythonの言語仕様もちゃんと勉強したいのう。&lt;/p&gt;&lt;p&gt;いろいろ足りない点があるが、それらは今後改善できれば良いかな。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;moduleの名前をいろいろ変えないといけないのが面倒なので、なんか改善ができれば良。&lt;/li&gt;&lt;li&gt;テストがないので足したい。&lt;/li&gt;&lt;li&gt;なんかバッジ足したい。ビルドとか...&lt;/li&gt;&lt;li&gt;mypyで&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;&lt;p&gt;Python3たのしい。&lt;/p&gt;&lt;p&gt;せっかくテンプレを作ったので、なんかゴミスクリプトでも良いのでちまちま書いていきたい所存🤔&lt;/p&gt;&lt;p&gt;mypyについてもメモためていこ。&lt;/p&gt;
</description>
<pubDate>
Sat, 11 May 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-04-29-bias-amp-2issue
</guid>
<link>
http://krymtkts.github.io/posts/2019-04-29-bias-amp-2issue
</link>
<title>
BIAS Amp 2で保存したアンプが消える問題
</title>
<description>
&lt;p&gt;小ネタ。&lt;/p&gt;&lt;p&gt;個人的に、2019年からPositive Grid社のBIAS Amp miniを導入した。&lt;/p&gt;&lt;p&gt;&lt;a href='https://www.positivegrid.com/bias-mini-guitar/'&gt;BIAS MINI Guitar - Positive Grid&lt;/a&gt;&lt;/p&gt;&lt;p&gt;平たく言うと、ギターアンプの部品をいじくり回すことでサウンドメイクする、というアイデアのデジタルアンプ。そのサウンドメイクの幅の広さ、自分好みのサウンドを手探りする面白さから、とても気に入っている。&lt;/p&gt;&lt;p&gt;ただちょっと、バグが多いように思う。現時点で2つのバグらしい挙動を見つけている。&lt;/p&gt;&lt;h3 id=&quot;1.line&amp;#95;outが出力されない問題&quot;&gt;1.Line OUTが出力されない問題&lt;/h3&gt;&lt;p&gt;見出しの通りである。出る場合と出ない場合があるのか、パターンを絞り出せていない。&lt;/p&gt;&lt;p&gt;Line OUTはスタジオで試したときに気づいたので、まだすべての状況において出力がないのかは調べ尽くしていない。&lt;/p&gt;&lt;h3 id=&quot;2.保存したアンプが消える問題&quot;&gt;2.保存したアンプが消える問題&lt;/h3&gt;&lt;p&gt;購入したBIAS Amp miniには、同社のモデリングソフトウェアBIAS Amp 2が付属し、それで作ったアンプモデルをBIAS Amp miniに書き込むことができる。&lt;/p&gt;&lt;p&gt;今確認している範囲では、以下のパターンで書き込んだアンプが、消失する時がある。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;BIAS Amp 2でキャプチャしたアンプ(AMP MATCH)をTone Cloudで入手する&lt;/li&gt;&lt;li&gt;入手したアンプのパラメータを変える&lt;/li&gt;&lt;li&gt;BIAS Amp miniをdesconnect後にスキンを変更する&lt;/li&gt;&lt;li&gt;再度BIAS Amp miniを接続し、変更したアンプを書き込む&lt;/li&gt;&lt;li&gt;電源OFFから数時間後に消失&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;ただ、このパターンで2回消えたのだが、3回目の再現ができていないので別の変数が関与してそう🤔ややこしい。&lt;/p&gt;&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;&lt;p&gt;いずれも割とまじで困る系の障害なので、ちゃんと条件を調べた上でサポートに問い合わせしたいところだけど、まだ全然出来てない状態...&lt;/p&gt;&lt;p&gt;2の保存したアンプが消える問題は一応着手中。ライブ本番とかにモデルが消えてたらほんま笑い事じゃないからな...&lt;/p&gt;&lt;p&gt;しょうもないネタを書き記すことが増えてきたので、次回は仕事で経験を得た、2019年のイケてそうなPython開発環境構築について書きたい所存🤔&lt;/p&gt;
</description>
<pubDate>
Mon, 29 Apr 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-04-20_disable-touch-screen
</guid>
<link>
http://krymtkts.github.io/posts/2019-04-20_disable-touch-screen
</link>
<title>
Windows10でタッチスクリーンを無効化する
</title>
<description>
&lt;p&gt;小ネタ。&lt;/p&gt;&lt;p&gt;自機は、Razer Blade Stealth 2018のタッチスクリーン対応のやつだ。&lt;/p&gt;&lt;p&gt;ディスプレイを閉じた状態から再度開いたときに、たま～に謎に画面が連続タップされまくって制御不能になるポルターガイスト現象(偽)が起こることがあった。&lt;/p&gt;&lt;p&gt;それ以来タッチスクリーンの無効化をしているんやが、これがWindowsの大規模アップデートがあると設定が無効になって、都度再設定が必要になってる感じ🤔&lt;/p&gt;&lt;p&gt;最近ver1803が降りてきたことで再度必要になったので覚書。&lt;/p&gt;&lt;h3 id=&quot;手順&quot;&gt;手順&lt;/h3&gt;&lt;p&gt;&lt;a href='https://support.microsoft.com/ja-jp/help/4028019/windows-enable-and-disable-your-touchscreen-in-windows-10'&gt;Windows 10 でタッチスクリーンを有効/無効にする&lt;/a&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;デバイスマネージャを開く&lt;/li&gt;&lt;li&gt;HID準拠タッチスクリーンのデバイスを無効化する&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;THE END&lt;/p&gt;
</description>
<pubDate>
Sat, 20 Apr 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-04-14-add-a-badge
</guid>
<link>
http://krymtkts.github.io/posts/2019-04-14-add-a-badge
</link>
<title>
プロジェクトにバッジを貼ろう
</title>
<description>
&lt;p&gt;&lt;a href='https://www.powershellgallery.com/packages/MavenAutoCompletion/0.1'&gt;先日PowerShell Galleryにモジュールを公開した&lt;/a&gt;ついでに、プロジェクトのGitHubにバッジを貼ってみた。&lt;/p&gt;&lt;p&gt;のでその覚書。&lt;/p&gt;&lt;h3 id=&quot;バッジを貼ろう&quot;&gt;バッジを貼ろう&lt;/h3&gt;&lt;p&gt;なんかいろいろサービスがあるようだけど、わたしは&lt;a href='https://shields.io/'&gt;Shields.io: Quality metadata badges for open source projects&lt;/a&gt;にしてみた。&lt;/p&gt;&lt;p&gt;いろんなバッジが提供されてるみたいやし、利用するためのハードルが低い(とにかく楽な)のが良い。&lt;/p&gt;&lt;p&gt;PowerShell GalleryのDownload数を表示するバッチがあったので、それを利用してみた。&lt;/p&gt;&lt;p&gt;&lt;a href='https://shields.io/category/downloads'&gt;Shields.io: Quality metadata badges for open source projects&lt;/a&gt;&lt;/p&gt;&lt;p&gt;利用は簡単でURLを貼るだけ。なんかよそのOSSとか見ててたらもっと簡単な方法がありそうだが、普通のMarkdownで書いた。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/MavenAutoCompletion/blob/master/README.md'&gt;MavenAutoCompletion/README.md at master · krymtkts/MavenAutoCompletion&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;md&quot;&gt;&amp;#91;!&amp;#91;PowerShell Gallery&amp;#93;&amp;#40;https://img.shields.io/powershellgallery/dt/MavenAutoCompletion.svg?style=flat-square&amp;#41;&amp;#93;&amp;#40;https://www.powershellgallery.com/packages/MavenAutoCompletion&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コレがこうなる↓&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-04-14-badge/badge.png&quot; alt=&quot;バッジ&quot; /&gt;&lt;/p&gt;&lt;p&gt;いいね～😚&lt;/p&gt;&lt;p&gt;つかDLすっくねえ！！！&lt;/p&gt;&lt;p&gt;まあ自分のDLは、家、家リトライ、職場の3回だけで、残りの7回は世界のどこかで使われてるということがわかった。 ので良しとしよう🤔&lt;/p&gt;&lt;p&gt;こうなるともっとバッジをペタペタ貼りたくなりますな～。&lt;/p&gt;
</description>
<pubDate>
Sun, 14 Apr 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-04-07-lint-my-statement
</guid>
<link>
http://krymtkts.github.io/posts/2019-04-07-lint-my-statement
</link>
<title>
下手な文章をLintする
</title>
<description>
&lt;p&gt;転職してから2ヶ月の間、海外労働者の同僚から、日本語のドキュメントも英語のドキュメントもレビューコメントをいただいていてつらい。&lt;/p&gt;&lt;p&gt;英語だけならまだしろ、わしゃ日本語もろくに扱えん日本人なんかと思うと涙ちょちょぎれる次第であります。&lt;/p&gt;&lt;p&gt;なので自分の文章にLintをかけようと思った。&lt;/p&gt;&lt;h3 id=&quot;textlint&quot;&gt;textlint&lt;/h3&gt;&lt;p&gt;いつだったか文章のLinterについてググってたら、以下のようなものを見つけた。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/textlint/textlint'&gt;GitHub - textlint/textlint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://qiita.com/azu/items/2c565a38df5ed4c9f4e1'&gt;Qiita - VS Codeでtextlintを使って文章をチェックする&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing'&gt;textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;...すげえな！近い内に使えるようにしよう。と思ってから数ヶ月後、実務でまともな文章を書く能力が必要になるとわ...😭 というかvscode-textlintってホイル焼きで有名な方の作品なのですね。敬意を払うべきプロダクトだ。&lt;/p&gt;&lt;p&gt;以下にわたしのセットアップ手順を記す(実行はPowerShellだよ)。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;VSCodeでvscode-textlinを入れる&lt;/li&gt;&lt;li&gt;&lt;code&gt;npm i -g textlint textlint-rule-preset-ja-technical-writing&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;cd &amp;#126;&lt;/code&gt;で&lt;code&gt;textlint &amp;ndash;init&lt;/code&gt;してルールを書き込み&lt;/li&gt;&lt;li&gt;VSCodeでは設定ファイルを絶対パスで利用するからどうしたものか...(複数端末でSyncしてる関係で)&lt;ol&gt;&lt;li&gt;&lt;code&gt;&amp;#126;/,textlint&lt;/code&gt;にしたらユーザ名とか考えなくていいから、なんかいい😁&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;ついかパッケージ &lt;code&gt;npm i -g textlint-rule-date-weekday-mismatch textlint-rule-terminology textlint-rule-ginger&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;これで簡単なtypoは減らせるんじゃないかな。&lt;/p&gt;&lt;p&gt;お気に入りのルールは&lt;code&gt;textlint-rule-date-weekday-mismatch&lt;/code&gt;。これからのオレが曜日を間違うことはないぜええええ？(フラグ&lt;/p&gt;
</description>
<pubDate>
Sun, 07 Apr 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-04-02-pubslish-first-module-to-powershell-gallery
</guid>
<link>
http://krymtkts.github.io/posts/2019-04-02-pubslish-first-module-to-powershell-gallery
</link>
<title>
はじめてのPowerShell Galleryへの公開
</title>
<description>
&lt;p&gt;先日、自前のモジュールをPowerShell Galleryに公開したので、その時のメモを記す。&lt;/p&gt;&lt;p&gt;&lt;a href='https://www.powershellgallery.com/packages/MavenAutoCompletion/0.1'&gt;PowerShell Gallery | MavenAutoCompletion 0.1&lt;/a&gt;&lt;/p&gt;&lt;p&gt;PowerShell Galleryのアカウントを作るだとか、モジュールのAnalysisだとかはまた別で書こう。ここではモジュールの公開の部分だけ。&lt;/p&gt;&lt;h3 id=&quot;tl;dr&quot;&gt;TL;DR&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Poblish-Module&lt;/code&gt;は除外ファイル設定とかないから公開時には注意しましょう😭&lt;/p&gt;&lt;h3 id=&quot;モジュールの公開&quot;&gt;モジュールの公開&lt;/h3&gt;&lt;p&gt;以下の手順に従う。&lt;/p&gt;&lt;p&gt;&lt;a href='https://docs.microsoft.com/ja-jp/powershell/gallery/how-to/publishing-packages/publishing-a-package'&gt;アイテムの作成と公開 | Microsoft Docs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;事前にチェックしろよな！！！と書いてるのでそれに従い以下のコマンドを実行する&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Publish-Module -Path &amp;quot;.\MavenAutoCompletion&amp;quot; -NugetAPIKey &amp;quot;キーは見せられないよ&amp;quot; -WhatIf -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;途中で最新のNuGet入れるかい？と聞かれるのでそれはYesで。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ Publish-Module -Path &amp;quot;.\MavenAutoCompletion&amp;quot; -NugetAPIKey &amp;quot;キーは見せられないよ&amp;quot; -WhatIf -Verbose
VERBOSE: Acquiring providers for assembly: C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\PackageManagement\1.3.1\coreclr\netstandard2.0\Microsoft.PackageManagement.NuGetProvider.dll
VERBOSE: Acquiring providers for assembly: C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\PackageManagement\1.3.1\coreclr\netstandard2.0\Microsoft.PackageManagement.MetaProvider.PowerShell.dll
VERBOSE: Acquiring providers for assembly: C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\PackageManagement\1.3.1\coreclr\netstandard2.0\Microsoft.PackageManagement.ArchiverProviders.dll
VERBOSE: Acquiring providers for assembly: C:\Users\takatoshi\OneDrive\Documents\PowerShell\Modules\PackageManagement\1.3.1\coreclr\netstandard2.0\Microsoft.PackageManagement.CoreProviders.dll

NuGet.exe is required to continue
This version of PowerShellGet requires minimum version '4.1.0' of NuGet.exe to publish an item to the
NuGet-based repositories. NuGet.exe must be available in
'C:\ProgramData\Microsoft\Windows\PowerShell\PowerShellGet\' or
'C:\Users\takatoshi\AppData\Local\Microsoft\Windows\PowerShell\PowerShellGet\', or under one of the
paths specified in PATH environment variable value. NuGet.exe can be downloaded from
https://aka.ms/psget-nugetexe. For more information, see https://aka.ms/installing-powershellget . Do
you want PowerShellGet to install the latest version of NuGet.exe now?
&amp;#91;Y&amp;#93; Yes  &amp;#91;N&amp;#93; No  &amp;#91;S&amp;#93; Suspend  &amp;#91;?&amp;#93; Help &amp;#40;default is &amp;quot;Y&amp;quot;&amp;#41;: y
VERBOSE: Installing NuGet.exe.
VERBOSE: GET https://aka.ms/psget-nugetexe with 0-byte payload
VERBOSE: received 5690456-byte response of content type application/x-msdownload
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Publish Location:'https://www.powershellgallery.com/api/v2/package/'.
VERBOSE: Module 'MavenAutoCompletion' was found in 'C:\Users\takatoshi\dev\powershell\MavenAutoCompletion'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Using the provider 'PowerShellGet' for searching packages.
VERBOSE: Using the specified source names : 'PSGallery'.
VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.
VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/items/psscript/' and PackageManagementProvider is 'NuGet'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/items/psscript/FindPackagesById&amp;#40;&amp;#41;?id='MavenAutoCompletion'' for ''.
VERBOSE: Total package yield:'0' for the specified package 'MavenAutoCompletion'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Using the provider 'PowerShellGet' for searching packages.
VERBOSE: Using the specified source names : 'PSGallery'.
VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.
VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById&amp;#40;&amp;#41;?id='MavenAutoCompletion'' for ''.
VERBOSE: Total package yield:'0' for the specified package 'MavenAutoCompletion'.
What if: Performing the operation &amp;quot;Publish-Module&amp;quot; on target &amp;quot;Version '0.0.1' of module 'MavenAutoCompletion'&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;それらしいエラーも警告も出ないので、実行に移す。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ Publish-Module -Path &amp;quot;.\MavenAutoCompletion&amp;quot; -NugetAPIKey &amp;quot;キーは見せられないよ&amp;quot; -Verbose
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Publish Location:'https://www.powershellgallery.com/api/v2/package/'.
VERBOSE: Module 'MavenAutoCompletion' was found in 'C:\Users\takatoshi\dev\powershell\MavenAutoCompletion'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Using the provider 'PowerShellGet' for searching packages.
VERBOSE: Using the specified source names : 'PSGallery'.
VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.
VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/items/psscript/' and PackageManagementProvider is 'NuGet'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/items/psscript/FindPackagesById&amp;#40;&amp;#41;?id='MavenAutoCompletion'' for ''.
VERBOSE: Total package yield:'0' for the specified package 'MavenAutoCompletion'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Using the provider 'PowerShellGet' for searching packages.
VERBOSE: Using the specified source names : 'PSGallery'.
VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.
VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById&amp;#40;&amp;#41;?id='MavenAutoCompletion'' for ''.
VERBOSE: Total package yield:'0' for the specified package 'MavenAutoCompletion'.
VERBOSE: Performing the operation &amp;quot;Publish-Module&amp;quot; on target &amp;quot;Version '0.0.1' of module 'MavenAutoCompletion'&amp;quot;.
VERBOSE: Pushing MavenAutoCompletion.0.0.1.nupkg to 'https://www.powershellgallery.com/api/v2/package/'...
  PUT https://www.powershellgallery.com/api/v2/package/
�x��: &amp;lt;licenseUrl&amp;gt; element will be deprecated, please consider switching to specifying the license in
the package. Learn more: https://aka.ms/deprecateLicenseUrl.
  Created https://www.powershellgallery.com/api/v2/package/ 3489ms
Your package was pushed.

VERBOSE: Successfully published module 'MavenAutoCompletion' to the module publish location 'https://www.powershellgallery.com/api/v2/package/'. Please allow few minutes for 'MavenAutoCompletion' to show up in the search results.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; �x��: &lt;licenseUrl&gt; element will be deprecated, please consider switching to specifying the license in  the package. Learn more: https://aka.ms/deprecateLicenseUrl. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;う、モジュールのマニフェストでdeprecatedな属性があるが...いけたっぽい。この文字化けはemojiかな(Win10 1809ではterminalでemoji化けがあるのは既知)&lt;/p&gt;&lt;h3 id=&quot;いけて...ない！&quot;&gt;いけて...ない！&lt;/h3&gt;&lt;p&gt;困ったことにイケてなかった...gitのオブジェクトとかそういうのまで全部publishedなかんじでまじで笑えねえ...とりあえずPowerShell Gallery上でリスト表示しないリクエストを出しておいたが笑えねえ😭&lt;/p&gt;&lt;p&gt;どうもこれはPowerShell Getの既知の問題？みたい...事前調査が足りてなかったぜえ...😭&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/PowerShell/PowerShellGet/issues/191'&gt;Ignore files when using &lt;code&gt;Publish-Module&lt;/code&gt; · Issue #191 · PowerShell/PowerShellGet&lt;/a&gt;&lt;/p&gt;&lt;p&gt;現状できることとしては、別にモジュールと同名のフォルダを作って、その中にpublishしたいファイルをコピーし、&lt;code&gt;Publish-Module&lt;/code&gt;を実行するしかないのではないかなと思う🤔&lt;/p&gt;&lt;p&gt;この際なので↑の取りなしでvr0.1として公開することにする。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ Publish-Module -Path &amp;quot;.\MavenAutoCompletion&amp;quot; -NugetAPIKey &amp;quot;キーは見せられないよ&amp;quot; -Verbose
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Publish Location:'https://www.powershellgallery.com/api/v2/package/'.
VERBOSE: Module 'MavenAutoCompletion' was found in 'C:\Users\takatoshi\dev\powershell\MavenAutoCompletion\publish\MavenAutoCompletion'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Using the provider 'PowerShellGet' for searching packages.
VERBOSE: Using the specified source names : 'PSGallery'.
VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.
VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/items/psscript/' and PackageManagementProvider is 'NuGet'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/items/psscript/FindPackagesById&amp;#40;&amp;#41;?id='MavenAutoCompletion'' for ''.
VERBOSE: Total package yield:'0' for the specified package 'MavenAutoCompletion'.
VERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.
VERBOSE: Using the provider 'PowerShellGet' for searching packages.
VERBOSE: Using the specified source names : 'PSGallery'.
VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.
VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById&amp;#40;&amp;#41;?id='MavenAutoCompletion'' for ''.
VERBOSE: Total package yield:'1' for the specified package 'MavenAutoCompletion'.
VERBOSE: Performing the operation &amp;quot;Publish-Module&amp;quot; on target &amp;quot;Version '0.1' of module 'MavenAutoCompletion'&amp;quot;.
VERBOSE: Pushing MavenAutoCompletion.0.1.0.nupkg to 'https://www.powershellgallery.com/api/v2/package/'...
  PUT https://www.powershellgallery.com/api/v2/package/
�x��: &amp;lt;licenseUrl&amp;gt; element will be deprecated, please consider switching to specifying the license in
the package. Learn more: https://aka.ms/deprecateLicenseUrl.
  Created https://www.powershellgallery.com/api/v2/package/ 4558ms
Your package was pushed.

VERBOSE: Successfully published module 'MavenAutoCompletion' to the module publish location 'https://www.powershellgallery.com/api/v2/package/'. Please allow few minutes for 'MavenAutoCompletion' to show up in the search results.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これによって一応無事にPowerShell Getでの公開はできたし、一旦コレでええか😅&lt;/p&gt;&lt;p&gt;今度非推奨になってる&lt;code&gt;&amp;lt;licenseUrl&amp;gt;&lt;/code&gt;を変えなあかんな。&lt;/p&gt;&lt;p&gt;ファイルコピって公開するためのスクリプトを起こしたので、次回はそれでやろうと思う。&lt;/p&gt;
</description>
<pubDate>
Tue, 02 Apr 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-03-31-win-openssh-is-gone
</guid>
<link>
http://krymtkts.github.io/posts/2019-03-31-win-openssh-is-gone
</link>
<title>
Windows10の更新でOpenSSHが逝った
</title>
<description>
&lt;p&gt;今更ながら、Raser Blade Stealth 2018にもWindows10 ver1809の更新が来てたようだった。&lt;/p&gt;&lt;p&gt;何の気なしに更新してみたところ、更新自体はすぐに終わってあっさりいったなと思っていたのだが、terminalを立ち上げると...&lt;/p&gt;&lt;h3 id=&quot;tl;dr&quot;&gt;TL;DR&lt;/h3&gt;&lt;p&gt;Windows10 ver1809のOpenSSHは既知のバグがあるのでOpenSSH Portableを入れ直そう。&lt;/p&gt;&lt;h3 id=&quot;まずssh&amp;#95;agentのサービスが無効になってた&quot;&gt;まずSSH Agentのサービスが無効になってた&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Get-Process : Cannot find a process with the name &amp;quot;ssh-agent&amp;quot;. Verify the process name and call the cmdlet again.
At C:\Users\takatoshi\OneDrive\Documents\PowerShell\Microsoft.PowerShell&amp;#95;profile.ps1:40 char:8
+ if &amp;#40;! &amp;#40;Get-Process -Name 'ssh-agent'&amp;#41;&amp;#41; {
+        &amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;&amp;#126;
+ CategoryInfo          : ObjectNotFound: &amp;#40;ssh-agent:String&amp;#41; &amp;#91;Get-Process&amp;#93;, ProcessCommandException
+ FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.GetProcessCommand
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PowerShellのprofileで&lt;code&gt;ssh-agent&lt;/code&gt;のプロセスの存在を確認するようにしてたのだけど、Windowsの更新でサービスの自動実行が無効になってたようなのでこのエラーが...とりあえず今回は手動で自動実行するように変えて終わった。&lt;/p&gt;&lt;p&gt;あとどういうわけかわからないが、PC起動時のサービスの立ち上がりがめちゃくちゃ遅くなった気がする(体感)。PC起動後にすぐterminalを立ち上げると同じエラーがまだ出るから。根治させるにはprofileをいじらないといけないかな🤔&lt;/p&gt;&lt;p&gt;後述の問題に比べれば、こちらは楽しいアクシデント程度のものだ。&lt;/p&gt;&lt;h3 id=&quot;win10備え付けのopensshに既知のバグが有るとか云々&quot;&gt;Win10備え付けのOpenSSHに既知のバグが有るとか云々&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ git remote show origin
warning: agent returned different signature type ssh-rsa &amp;#40;expected rsa-sha2-512&amp;#41;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;↑この警告が常時出るようになった。むかつく💢&lt;/p&gt;&lt;p&gt;直さな...😭と思ってググってみると...&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/PowerShell/Win32-OpenSSH/issues/1263'&gt;ssh-agent: agent returned different signature type · Issue #1263 · PowerShell/Win32-OpenSSH&lt;/a&gt;&lt;/p&gt;&lt;p&gt;これの様子🤔&lt;/p&gt;&lt;p&gt;更に調べると、これマジIssueやなと思わざるを得ない... -&gt; &lt;a href='https://github.com/PowerShell/openssh-portable/pull/366'&gt;Fixes to ssh-agent issues by manojampalam · Pull Request #366 · PowerShell/openssh-portable&lt;/a&gt;&lt;/p&gt;&lt;p&gt;つまりはバグが直ったOpenSSH-Portbale入れないと解決しないってんでFAかな...キレそう❤&lt;/p&gt;&lt;p&gt;&lt;a href='https://blog.frankfu.com.au/2019/03/21/moving-from-windows-1809s-openssh-to-openssh-portable/'&gt;Moving from Windows 1809's OpenSSH to OpenSSH Portable&lt;/a&gt;&lt;/p&gt;&lt;p&gt;幸いにも同じ障害を解消したブログがあったので助かる🙏&lt;/p&gt;&lt;h4 id=&quot;処置する&quot;&gt;処置する&lt;/h4&gt;&lt;p&gt;&lt;a href='https://blog.frankfu.com.au/2019/03/21/moving-from-windows-1809s-openssh-to-openssh-portable/'&gt;Moving from Windows 1809's OpenSSH to OpenSSH Portable&lt;/a&gt;&lt;/p&gt;&lt;p&gt;この記事にそのまま従えばいける。&lt;/p&gt;&lt;p&gt;Windowsに関わる操作はPowerShell Coreではできないので、PowerShell CoreとWindowsPowerShellを使い分けた(WindowsPowerShellで全部やればいいものを...😅)&lt;/p&gt;&lt;p&gt;Coreでできる範囲から始める。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ Get-Service -Name ssh-agent | Stop-Service
$ sc.exe delete ssh-agent
&amp;#91;SC&amp;#93; DeleteService SUCCESS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;WindowsPowerShellでしかできない範囲&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ Remove-WindowsCapability -Online -Name &amp;quot;OpenSSH.Client&amp;#126;&amp;#126;&amp;#126;&amp;#126;0.0.1.0&amp;quot;


Path          :
Online        : True
RestartNeeded : False



$  Remove-WindowsCapability -Online -Name &amp;quot;OpenSSH.Server&amp;#126;&amp;#126;&amp;#126;&amp;#126;0.0.1.0&amp;quot;


Path          :
Online        : True
RestartNeeded : False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Coreで続きをやる&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ choco install openssh --package-parameters=&amp;quot;/SSHAgentFeature&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Chocolatey v0.10.13
2 validations performed. 1 success&amp;#40;es&amp;#41;, 1 warning&amp;#40;s&amp;#41;, and 0 error&amp;#40;s&amp;#41;.

Validation Warnings:
 - A pending system reboot request has been detected, however, this is
   being ignored due to the current Chocolatey configuration.  If you
   want to halt when this occurs, then either set the global feature
   using:
     choco feature enable -name=exitOnRebootDetected
   or pass the option --exit-when-reboot-detected.

Installing the following packages:
openssh
By installing you accept licenses for the packages.
Progress: Downloading openssh 7.9.0.1... 100%

openssh v7.9.0.1 &amp;#91;Approved&amp;#93;
openssh package files install completed. Performing other installation steps.
The package openssh wants to run 'chocolateyinstall.ps1'.
Note: If you don't run this script, the installation will fail.
Note: To confirm automatically next time, use '-y' or consider:
choco feature enable -n allowGlobalConfirmation
Do you want to run the script?&amp;#40;&amp;#91;Y&amp;#93;es/&amp;#91;N&amp;#93;o/&amp;#91;P&amp;#93;rint&amp;#41;: y

Running on: Windows 10 Home, &amp;#40;Core&amp;#41;
Windows Version: 10.0.17763

&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;
&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;
This package is a Universal Installer and can ALSO install Win32-OpenSSH on
Nano, Server Core, Docker Containers and more WITHOUT using Chocolatey.

See the following for more details:
https://github.com/DarwinJS/ChocoPackages/blob/master/openssh/readme.md
&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;
&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;#42;

/SSHAgentFeature was used, including SSH Agent Service.
Extracting C:\ProgramData\chocolatey\lib\openssh\tools\OpenSSH-Win64.zip to C:\Users\takatoshi\AppData\Local\Temp\chocolatey\OpenSSHTemp...
C:\Users\takatoshi\AppData\Local\Temp\chocolatey\OpenSSHTemp
Source files are internal to the package, checksums are not required nor checked.
C:\Program Files\OpenSSH-Win64
C:\Program Files\OpenSSH-Win64\FixHostFilePermissions.ps1
C:\Program Files\OpenSSH-Win64\FixUserFilePermissions.ps1
C:\Program Files\OpenSSH-Win64\install-sshd.ps1
C:\Program Files\OpenSSH-Win64\libcrypto.dll
C:\Program Files\OpenSSH-Win64\openssh-events.man
C:\Program Files\OpenSSH-Win64\OpenSSHUtils.psd1
C:\Program Files\OpenSSH-Win64\OpenSSHUtils.psm1
C:\Program Files\OpenSSH-Win64\scp.exe
C:\Program Files\OpenSSH-Win64\sftp-server.exe
C:\Program Files\OpenSSH-Win64\sftp.exe
C:\Program Files\OpenSSH-Win64\ssh-add.exe
C:\Program Files\OpenSSH-Win64\ssh-agent.exe
C:\Program Files\OpenSSH-Win64\ssh-keygen.exe
C:\Program Files\OpenSSH-Win64\ssh-keyscan.exe
C:\Program Files\OpenSSH-Win64\ssh-shellhost.exe
C:\Program Files\OpenSSH-Win64\ssh.exe
C:\Program Files\OpenSSH-Win64\sshd.exe
C:\Program Files\OpenSSH-Win64\sshd&amp;#95;config&amp;#95;default
C:\Program Files\OpenSSH-Win64\uninstall-sshd.ps1
C:\Program Files\OpenSSH-Win64\Set-SSHDefaultShell.ps1
PATH environment variable does not have C:\Program Files\OpenSSH-Win64 in it. Adding...
Updating machine environment variable TERM from &amp;quot;&amp;quot; to &amp;quot;&amp;quot;
&amp;#91;SC&amp;#93; SetServiceObjectSecurity SUCCESS
Starting SSH-Agent...

NEW VERSIONS OF SSH EXES:

FileName                                         FileVersion
--------                                         -----------
C:\Program Files\OpenSSH-Win64\scp.exe           7.9.0.0
C:\Program Files\OpenSSH-Win64\sftp-server.exe   7.9.0.0
C:\Program Files\OpenSSH-Win64\sftp.exe          7.9.0.0
C:\Program Files\OpenSSH-Win64\ssh-add.exe       7.9.0.0
C:\Program Files\OpenSSH-Win64\ssh-agent.exe     7.9.0.0
C:\Program Files\OpenSSH-Win64\ssh-keygen.exe    7.9.0.0
C:\Program Files\OpenSSH-Win64\ssh-keyscan.exe   7.9.0.0
C:\Program Files\OpenSSH-Win64\ssh-shellhost.exe 7.9.0.0
C:\Program Files\OpenSSH-Win64\ssh.exe           7.9.0.0
C:\Program Files\OpenSSH-Win64\sshd.exe          7.9.0.0




WARNING: You must start a new prompt, or use the command 'refreshenv' &amp;#40;provided by your chocolatey install&amp;#41; to re-read the environment for the tools to be available in this shell session.
Environment Vars &amp;#40;like PATH&amp;#41; have changed. Close/reopen your shell to
 see the changes &amp;#40;or in powershell/cmd.exe just type `refreshenv`&amp;#41;.
 The install of openssh was successful.
  Software installed to 'C:\Users\takatoshi\AppData\Local\Temp\chocolatey\OpenSSHTemp'

Chocolatey installed 1/1 packages.
 See the log for details &amp;#40;C:\ProgramData\chocolatey\logs\chocolatey.log&amp;#41;.
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ Get-Service ssh-agent

Status   Name               DisplayName
------   ----               -----------
Running  ssh-agent          ssh-agent
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ git config --global core.sshCommand &amp;quot;'C:\Program Files\OpenSSH-Win64\ssh.exe'&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;環境変数PATHを反映させてから、terminalでwariningが消えたのを確認&lt;/p&gt;&lt;h3 id=&quot;振り返り&quot;&gt;振り返り&lt;/h3&gt;&lt;p&gt;Windowsのでかい更新の際はちゃんと注意して取り組まなあかんな🤔(めんどい)&lt;/p&gt;&lt;p&gt;あとこれまた既知の別件なのだけど、ver1809だとterminalのemojiの表示が中点とかに化けるので、これもなんとかしたいわ...&lt;/p&gt;&lt;p&gt;Cmder/ConEmuじゃなくてWindows自体の問題みたい。&lt;/p&gt;
</description>
<pubDate>
Sun, 31 Mar 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-03-24_coverage-of-qunt-puppeteer
</guid>
<link>
http://krymtkts.github.io/posts/2019-03-24_coverage-of-qunt-puppeteer
</link>
<title>
QUnitでCIしたい その2
</title>
<description>
&lt;p&gt;&lt;a href='./2019-03-21_want-to-run-qunit-in-cli.md'&gt;前回&lt;/a&gt;、QUnitのユニットテストをpuppeteerでCLI実行できるようにした&lt;/p&gt;&lt;p&gt;今回はcode coverageを計測できるようにする。&lt;/p&gt;&lt;h3 id=&quot;前回のおさらい&quot;&gt;前回のおさらい&lt;/h3&gt;&lt;p&gt;puppeteerでJavaScriptのカバレッジを計測することができる(&lt;a href='https://developers.google.com/web/updates/2017/04/devtools-release-notes'&gt;What's New In DevTools (Chrome 59)  |  Web  |  Google Developers&lt;/a&gt;)のだが、現状利用している&lt;a href='https://www.npmjs.com/package/node-qunit-puppeteer'&gt;node-qunit-puppeteer&lt;/a&gt;だと、puppeteerの部分をモジュール外部から触れないので利用できなくて困った、ということろまで書いた。&lt;/p&gt;&lt;p&gt;理想ではユニットテストの実施と同時にカバレッジを計測したいところなのだが、一旦は簡単のために別々に、つまりユニットテストの実行後さらにカバレッジ取得のためにユニットテスを再実行する、というかたちで楽しようと考えた。ユニットテストの実行が軽いうちは2度実行したところで大した負荷にならないというのもあり。&lt;/p&gt;&lt;h3 id=&quot;やったこと&quot;&gt;やったこと&lt;/h3&gt;&lt;p&gt;これ↓&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/istanbuljs/puppeteer-to-istanbul'&gt;istanbuljs/puppeteer-to-istanbul: given coverage information output by puppeteer's API output a format consumable by Istanbul reports&lt;/a&gt;&lt;/p&gt;&lt;p&gt;puppeteerで計測したカバレッジをistanbul(nyc)で利用できる形に書き出すモジュールを使う。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/qunit-trial/blob/master/test/run.js'&gt;すでにあるnode-qunit-puppeteerのテストランナー&lt;/a&gt;と一緒には使えないので、カバレッジ計測のためのスクリプトも新たに書く(無駄)。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;const pti = require&amp;#40;'puppeteer-to-istanbul'&amp;#41;;
const puppeteer = require&amp;#40;'puppeteer'&amp;#41;;
const path = require&amp;#40;'path'&amp;#41;;

&amp;#40;async &amp;#40;&amp;#41; =&amp;gt; {
  try {
    const browser = await puppeteer.launch&amp;#40;&amp;#41;;
    const page = await browser.newPage&amp;#40;&amp;#41;;

    await page.coverage.startJSCoverage&amp;#40;&amp;#41;;
    await page.goto&amp;#40;`file://${path.join&amp;#40;&amp;#95;&amp;#95;dirname, '/index.html'&amp;#41;}`&amp;#41;;
    const jsCoverage = await page.coverage.stopJSCoverage&amp;#40;&amp;#41;;

    pti.write&amp;#40;jsCoverage&amp;#41;;
    await browser.close&amp;#40;&amp;#41;;
  } catch &amp;#40;error&amp;#41; {
    console.error&amp;#40;error&amp;#41;;
  }
}&amp;#41;&amp;#40;&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これもほぼサンプルママで使えた。読み込ませるページのパスだけ工夫が必要ってだけ。&lt;/p&gt;&lt;p&gt;あとはカバレッジ計測に成功したらnycのレポート作成を実行するだけでおｋ。これをnpmのタスクにする。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;node test/coverage.js &amp;amp;&amp;amp; nyc report --reporter=html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでページを開いたときに読み込まれるJSのカバレッジを計測できた。ただしこのままだと、QUnitやユニットテスト自体のカバレッジも含まれてしまうので、仕事のCIで使う場合なんかには特定のファイルのカバレッジだけを見るか、あるいは除外設定があればいいのだけど。&lt;/p&gt;&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;&lt;p&gt;また今回試した内容は以下のrepoに反映してある&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/qunit-trial'&gt;krymtkts/qunit-trial: sandbox to enhance legacy QUnit test.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2回ユニットテストを実行していて無駄感があるので、node-qunit-puppeteerに手を入れることも検討していいかも🤔&lt;/p&gt;&lt;p&gt;続く&lt;/p&gt;
</description>
<pubDate>
Sun, 24 Mar 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-03-21_want-to-run-qunit-in-cli
</guid>
<link>
http://krymtkts.github.io/posts/2019-03-21_want-to-run-qunit-in-cli
</link>
<title>
QUnitでCIしたい その1
</title>
<description>
&lt;p&gt;2月に転職した。&lt;/p&gt;&lt;p&gt;へーしゃでの初めての仕事はフロントエンド、と言ってもトラッキングに関わる部分である。&lt;/p&gt;&lt;p&gt;生のES5で書かれてて&lt;a href='https://github.com/google/closure-compiler'&gt;Google Closure Compiler&lt;/a&gt;でminifyされてるようなのだけど、困ったことにユニットテストがない様子？ どこそこのチームで作ってたことがあったらしいという情報は得たので、それをCIに組み込めたらいいかなと思っていた。&lt;/p&gt;&lt;p&gt;蓋を開けてみると、2年間ほどメンテされていない死んだユニットテストで、最新のコードベースに対するテストでなかった(テストコードと同ディレクトリにテスト対象のコードがコピられてて)🤔&lt;/p&gt;&lt;p&gt;CIに組み込まれないテストは陳腐化すると云うが、まさかそれを身をもって実感することになろうとは思わなんだ。&lt;/p&gt;&lt;p&gt;&lt;del&gt;仕方ないので&lt;/del&gt;既存の資産を活かすためにも、テスティングフレームワークなど既存のものを利用して少なくともCIに組み込めるところまでは持っていこうと考えた。CIに組み込まれればビルド失敗の通知を恐れてみんなユニットテストを書くのをサボらなくなる。&lt;/p&gt;&lt;p&gt;というわけで、許可を取り付けた上で仕事の合間を縫ってユニットテストの整備を行うことにした。&lt;/p&gt;&lt;h3 id=&quot;現状把握と展望&quot;&gt;現状把握と展望&lt;/h3&gt;&lt;p&gt;ユニットテストは&lt;a href='https://qunitjs.com/'&gt;QUnit&lt;/a&gt;で書かれていて、モッキングフレームワークには&lt;a href='https://sinonjs.org/'&gt;Sinon.JS&lt;/a&gt;が使われていた。&lt;/p&gt;&lt;p&gt;linterは&lt;a href='https://eslint.org/'&gt;ESLint - Pluggable JavaScript linter&lt;/a&gt;を用意してあるようなのだけどどうも長らく利用されてなかったようで、試しに実行すると41件のautofix可能なエラーが...😅&lt;/p&gt;&lt;p&gt;ブラウザで&lt;code&gt;index.html&lt;/code&gt;を開くことでテストが実行されるタイプのやつで、CLIでの実行は用意されてなかった。 プロダクトコードが&lt;code&gt;window&lt;/code&gt;オブジェクトに依存してることもあって、QUnitのテストをヘッドレスブラウザで実行するのが良さげかな。&lt;/p&gt;&lt;p&gt;ここにカバレッジ計測も追加して、最終的にはプルリクをトリガーにした自動テストがCIに組み込まれるのが良さげかなと思う。&lt;/p&gt;&lt;h3 id=&quot;やったこと＆やらなかったこと&quot;&gt;やったこと＆やらなかったこと&lt;/h3&gt;&lt;p&gt;とりあえずカバレッジは置いといて今あるQUnitのCLI実行を優先した。&lt;/p&gt;&lt;p&gt;nodeでのカバレッジ計測に関しては知らないことが多かったので軽く下調べだけした。 istabulというやつがnode界隈で強かったみたいだが、こいつは2年ほどメンテされてなくて、後続の&lt;a href='https://www.npmjs.com/package/nyc'&gt;nyc - npm&lt;/a&gt;と言うやつがみつかる👀 puppeteerもそれ単体でカバレッジが測れるようす↓&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.philkrie.me/2018/07/04/extracting-coverage.html'&gt;Using Puppeteer to Extract Code Coverage Data from Chrome Dev Tools&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/istanbuljs/puppeteer-to-istanbul'&gt;istanbuljs/puppeteer-to-istanbul: given coverage information output by puppeteer's API output a format consumable by Istanbul reports&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;やったこと&quot;&gt;やったこと&lt;/h4&gt;&lt;p&gt;まず元々あるQUnitもそのまま使えないとブラウザで見つつの開発の利便性も下がっちゃうので、そこは担保したかった。 (&lt;code&gt;window&lt;/code&gt;オブジェクトがないのでCommonJSは死ぬ)&lt;/p&gt;&lt;p&gt;&lt;a href='https://www.npmjs.com/package/qunit-puppeteer'&gt;qunit-puppeteer - npm&lt;/a&gt;は簡単にテスト実行できて楽だったのだけど、テストのurlを絶対パスで指定しないといけず＆自分でURLをこねくり回せなくて却下。&lt;/p&gt;&lt;p&gt;なのでそのへん柔軟な&lt;a href='https://www.npmjs.com/package/node-qunit-puppeteer'&gt;node-qunit-puppeteer - npm&lt;/a&gt;しか選択肢が残らなかったわけだ。&lt;/p&gt;&lt;p&gt;とりま&lt;code&gt;eslint&lt;/code&gt;だけあるからソイツはそのままに、QUnitをheadless browser実行するためのmoduleだけ足す。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;npm install --save-dev node-qunit-puppeteer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;は以下のような感じにした&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;lint&amp;quot;: &amp;quot;eslint --fix ./&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;node test/run.js&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;lint&lt;/code&gt;はメンテされてなかった関係で40件くらいのerrorがあるけど、最終的には実行できるようになる(ハズな)ので用意しておく。&lt;/p&gt;&lt;p&gt;&lt;code&gt;test/run.js&lt;/code&gt;は以下の通りで、&lt;a href='https://github.com/ameshkov/node-qunit-puppeteer'&gt;ameshkov/node-qunit-puppeteer: A simple node module for running qunit tests with headless Chromium&lt;/a&gt;のExampleとほぼ同じで行ける便利さ。しびれる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;#! /usr/bin/env node
// almost the same as the sample code :-p
// https://github.com/ameshkov/node-qunit-puppeteer

const path = require&amp;#40;'path'&amp;#41;;
const { runQunitPuppeteer, printOutput } = require&amp;#40;'node-qunit-puppeteer'&amp;#41;;

const qunitArgs = {
  targetUrl: `file://${path.join&amp;#40;&amp;#95;&amp;#95;dirname, '/index.html'&amp;#41;}`,
  redirectConsole: true
};

runQunitPuppeteer&amp;#40;qunitArgs&amp;#41;
  .then&amp;#40;&amp;#40;result&amp;#41; =&amp;gt; {
    // Print the test result to the output
    printOutput&amp;#40;result, console&amp;#41;;
    if &amp;#40;result.stats.failed &amp;gt; 0&amp;#41; {
      // Handle the failed test run
      // currently notghing to do.
    }
  }&amp;#41;
  .catch&amp;#40;&amp;#40;ex&amp;#41; =&amp;gt; {
    console.error&amp;#40;ex&amp;#41;;
  }&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;実行結果は以下のような感じで出る。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$ npm run test

&amp;gt; qunit@1.0.0 test C:\Users\takatoshi\dev\javascript\qunit
&amp;gt; node test/run.js

Module: hello module
  hello test
    Status: success
    Passed assertions: 2 of 2
    Elapsed: 1ms

Test run result: success
Total tests: 1
  Assertions: 2
  Passed assertions: 2
  Failed assertions: 0
  Elapsed: 8ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;と、ここまで書いた内容を会社のコードに組み込んだのだけど、会社で作ったものは外に出せないので模倣したゴミプロジェクトを作った↓&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/qunit-trial'&gt;krymtkts/qunit-trial: sandbox to enhance legacy QUnit test.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;今後いじくり回すときの砂場としても使おうかな。&lt;/p&gt;&lt;h4 id=&quot;あとやりたいこと&quot;&gt;あとやりたいこと&lt;/h4&gt;&lt;p&gt;ユニットテストだけあってカバレッジ計測がないのはちょっとアレなので早々に追加したい所存🤔&lt;/p&gt;&lt;p&gt;そもそもユニットテスト書くにしてもどの経路通ったとかわからないのでテスト品質を保証しづらく、コード網羅率 Level C1を100%にしたいマンなのもありカバレッジ必須。&lt;/p&gt;&lt;p&gt;でも事前に調べてたnycやpuppeteerでの方法だと、現状のnode-qunit-puppeteerを使ったテストのカバレッジ計測できなさそう...&lt;/p&gt;&lt;p&gt;もう少し調べる必要がありそう😳&lt;/p&gt;&lt;p&gt;続く&lt;/p&gt;
</description>
<pubDate>
Thu, 21 Mar 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-02-24_lein-ring-server-error
</guid>
<link>
http://krymtkts.github.io/posts/2019-02-24_lein-ring-server-error
</link>
<title>
lein ringでエラーが発生した
</title>
<description>
&lt;p&gt;&lt;a href='./2019-02-20-instead-of-ping.md'&gt;前回&lt;/a&gt;以下のコメントを残した&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; この記事をしたためておるときに&lt;code&gt;lein ring server&lt;/code&gt;でエラーが出るようになってたのを解消したので、メモがてら次回に記す。 &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;どのような状況だったかを以下に記すと&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;lein ring server
clojure.lang.Compiler$CompilerException: Syntax error macroexpanding clojure.core/fn at &amp;#40;clojure/core/unify.clj:83:18&amp;#41;.
#:clojure.error{:phase :macro-syntax-check, :line 83, :column 18, :source &amp;quot;clojure/core/unify.clj&amp;quot;, :symbol clojure.core/fn}
 at clojure.lang.Compiler.checkSpecs &amp;#40;Compiler.java:6971&amp;#41;
    clojure.lang.Compiler.macroexpand1 &amp;#40;Compiler.java:6987&amp;#41;
    clojure.lang.Compiler.analyzeSeq &amp;#40;Compiler.java:7092&amp;#41;
    clojure.lang.Compiler.analyze &amp;#40;Compiler.java:6789&amp;#41;
    clojure.lang.Compiler.analyzeSeq &amp;#40;Compiler.java:7094&amp;#41;
    clojure.lang.Compiler.analyze &amp;#40;Compiler.java:6789&amp;#41;
    clojure.lang.Compiler.access$300 &amp;#40;Compiler.java:38&amp;#41;
    clojure.lang.Compiler$DefExpr$Parser.parse &amp;#40;Compiler.java:596&amp;#41;
    clojure.lang.Compiler.analyzeSeq &amp;#40;Compiler.java:7106&amp;#41;
    clojure.lang.Compiler.analyze &amp;#40;Compiler.java:6789&amp;#41;
    clojure.lang.Compiler.analyze &amp;#40;Compiler.java:6745&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7180&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$require.invokeStatic &amp;#40;core.clj:6007&amp;#41;
    clojure.core$require.doInvoke &amp;#40;core.clj:6007&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:421&amp;#41;
    clojure.core.contracts.impl.transformers$eval690$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;691.invoke &amp;#40;transformers.clj:1&amp;#41;
    clojure.core.contracts.impl.transformers$eval690.invokeStatic &amp;#40;transformers.clj:1&amp;#41;
    clojure.core.contracts.impl.transformers$eval690.invoke &amp;#40;transformers.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$require.invokeStatic &amp;#40;core.clj:6007&amp;#41;
    clojure.core$require.doInvoke &amp;#40;core.clj:6007&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    leinjacker.defconstrainedfn$eval684$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;685.invoke &amp;#40;defconstrainedfn.clj:1&amp;#41;
    leinjacker.defconstrainedfn$eval684.invokeStatic &amp;#40;defconstrainedfn.clj:1&amp;#41;
    leinjacker.defconstrainedfn$eval684.invoke &amp;#40;defconstrainedfn.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:669&amp;#41;
    clojure.core$use.invokeStatic &amp;#40;core.clj:6093&amp;#41;
    clojure.core$use.doInvoke &amp;#40;core.clj:6093&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    leinjacker.deps$eval676$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;677.invoke &amp;#40;deps.clj:1&amp;#41;
    leinjacker.deps$eval676.invokeStatic &amp;#40;deps.clj:1&amp;#41;
    leinjacker.deps$eval676.invoke &amp;#40;deps.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$require.invokeStatic &amp;#40;core.clj:6007&amp;#41;
    clojure.core$require.doInvoke &amp;#40;core.clj:6007&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:436&amp;#41;
    leiningen.ring.server$eval668$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;669.invoke &amp;#40;server.clj:1&amp;#41;
    leiningen.ring.server$eval668.invokeStatic &amp;#40;server.clj:1&amp;#41;
    leiningen.ring.server$eval668.invoke &amp;#40;server.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:669&amp;#41;
    clojure.core$use.invokeStatic &amp;#40;core.clj:6093&amp;#41;
    clojure.core$use.doInvoke &amp;#40;core.clj:6093&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:551&amp;#41;
    leiningen.ring$eval662$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;663.invoke &amp;#40;ring.clj:1&amp;#41;
    leiningen.ring$eval662.invokeStatic &amp;#40;ring.clj:1&amp;#41;
    leiningen.ring$eval662.invoke &amp;#40;ring.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$require.invokeStatic &amp;#40;core.clj:6007&amp;#41;
    clojure.core$require.doInvoke &amp;#40;core.clj:6007&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    leiningen.core.utils$require&amp;#95;resolve.invokeStatic &amp;#40;utils.clj:102&amp;#41;
    leiningen.core.utils$require&amp;#95;resolve.invoke &amp;#40;utils.clj:95&amp;#41;
    leiningen.core.utils$require&amp;#95;resolve.invokeStatic &amp;#40;utils.clj:105&amp;#41;
    leiningen.core.utils$require&amp;#95;resolve.invoke &amp;#40;utils.clj:95&amp;#41;
    leiningen.core.main$lookup&amp;#95;task&amp;#95;var.invokeStatic &amp;#40;main.clj:69&amp;#41;
    leiningen.core.main$lookup&amp;#95;task&amp;#95;var.invoke &amp;#40;main.clj:65&amp;#41;
    leiningen.core.main$pass&amp;#95;through&amp;#95;help&amp;#95;QMARK&amp;#95;.invokeStatic &amp;#40;main.clj:79&amp;#41;
    leiningen.core.main$pass&amp;#95;through&amp;#95;help&amp;#95;QMARK&amp;#95;.invoke &amp;#40;main.clj:73&amp;#41;
    leiningen.core.main$task&amp;#95;args.invokeStatic &amp;#40;main.clj:82&amp;#41;
    leiningen.core.main$task&amp;#95;args.invoke &amp;#40;main.clj:81&amp;#41;
    leiningen.core.main$resolve&amp;#95;and&amp;#95;apply.invokeStatic &amp;#40;main.clj:339&amp;#41;
    leiningen.core.main$resolve&amp;#95;and&amp;#95;apply.invoke &amp;#40;main.clj:336&amp;#41;
    leiningen.core.main$&amp;#95;main$fn&amp;#95;&amp;#95;6771.invoke &amp;#40;main.clj:449&amp;#41;
    leiningen.core.main$&amp;#95;main.invokeStatic &amp;#40;main.clj:439&amp;#41;
    leiningen.core.main$&amp;#95;main.doInvoke &amp;#40;main.clj:436&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.lang.Var.applyTo &amp;#40;Var.java:705&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:665&amp;#41;
    clojure.main$main&amp;#95;opt.invokeStatic &amp;#40;main.clj:491&amp;#41;
    clojure.main$main&amp;#95;opt.invoke &amp;#40;main.clj:487&amp;#41;
    clojure.main$main.invokeStatic &amp;#40;main.clj:598&amp;#41;
    clojure.main$main.doInvoke &amp;#40;main.clj:561&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.lang.Var.applyTo &amp;#40;Var.java:705&amp;#41;
    clojure.main.main &amp;#40;main.java:37&amp;#41;
Caused by: clojure.lang.ExceptionInfo: Call to clojure.core/fn did not conform to spec.
#:clojure.spec.alpha{:problems &amp;#40;{:path &amp;#91;:fn-tail :arity-1 :params&amp;#93;, :pred clojure.core/vector?, :val clojure.core.unify/var-unify, :via &amp;#91;:clojure.core.specs.alpha/params+body :clojure.core.specs.alpha/param-list :clojure.core.specs.alpha/param-list&amp;#93;, :in &amp;#91;0&amp;#93;} {:path &amp;#91;:fn-tail :arity-n&amp;#93;, :pred &amp;#40;clojure.core/fn &amp;#91;%&amp;#93; &amp;#40;clojure.core/or &amp;#40;clojure.core/nil? %&amp;#41; &amp;#40;clojure.core/sequential? %&amp;#41;&amp;#41;&amp;#41;, :val clojure.core.unify/var-unify, :via &amp;#91;:clojure.core.specs.alpha/params+body :clojure.core.specs.alpha/params+body&amp;#93;, :in &amp;#91;0&amp;#93;}&amp;#41;,
:spec #object&amp;#91;clojure.spec.alpha$regex&amp;#95;spec&amp;#95;impl$reify&amp;#95;&amp;#95;2509 0x4f379769 &amp;quot;clojure.spec.alpha$regex&amp;#95;spec&amp;#95;impl$reify&amp;#95;&amp;#95;2509@4f379769&amp;quot;&amp;#93;, :value &amp;#40;clojure.core.unify/var-unify &amp;#91;G&amp;#95;&amp;#95;800 G&amp;#95;&amp;#95;801 G&amp;#95;&amp;#95;802 G&amp;#95;&amp;#95;803&amp;#93; &amp;#40;clojure.core/if-let &amp;#91;vb&amp;#95;&amp;#95;793&amp;#95;&amp;#95;auto&amp;#95;&amp;#95; &amp;#40;G&amp;#95;&amp;#95;803 G&amp;#95;&amp;#95;801&amp;#41;&amp;#93; &amp;#40;clojure.core.unify/garner-unifiers G&amp;#95;&amp;#95;800 vb&amp;#95;&amp;#95;793&amp;#95;&amp;#95;auto&amp;#95;&amp;#95; G&amp;#95;&amp;#95;802 G&amp;#95;&amp;#95;803&amp;#41; &amp;#40;clojure.core/if-let &amp;#91;vexpr&amp;#95;&amp;#95;794&amp;#95;&amp;#95;auto&amp;#95;&amp;#95; &amp;#40;clojure.core/and &amp;#40;G&amp;#95;&amp;#95;800 G&amp;#95;&amp;#95;802&amp;#41; &amp;#40;G&amp;#95;&amp;#95;803 G&amp;#95;&amp;#95;802&amp;#41;&amp;#41;&amp;#93; &amp;#40;clojure.core.unify/garner-unifiers G&amp;#95;&amp;#95;800 G&amp;#95;&amp;#95;801 vexpr&amp;#95;&amp;#95;794&amp;#95;&amp;#95;auto&amp;#95;&amp;#95; G&amp;#95;&amp;#95;803&amp;#41; &amp;#40;if &amp;#40;clojure.core.unify/occurs? G&amp;#95;&amp;#95;800 G&amp;#95;&amp;#95;801 G&amp;#95;&amp;#95;802 G&amp;#95;&amp;#95;803&amp;#41; &amp;#40;throw &amp;#40;java.lang.IllegalStateException. &amp;#40;clojure.core/str &amp;quot;Cycle found in the path &amp;quot; G&amp;#95;&amp;#95;802&amp;#41;&amp;#41;&amp;#41; &amp;#40;clojure.core.unify/bind-phase G&amp;#95;&amp;#95;803 G&amp;#95;&amp;#95;801 G&amp;#95;&amp;#95;802&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;, :args &amp;#40;clojure.core.unify/var-unify &amp;#91;G&amp;#95;&amp;#95;800 G&amp;#95;&amp;#95;801 G&amp;#95;&amp;#95;802 G&amp;#95;&amp;#95;803&amp;#93; &amp;#40;clojure.core/if-let &amp;#91;vb&amp;#95;&amp;#95;793&amp;#95;&amp;#95;auto&amp;#95;&amp;#95; &amp;#40;G&amp;#95;&amp;#95;803 G&amp;#95;&amp;#95;801&amp;#41;&amp;#93; &amp;#40;clojure.core.unify/garner-unifiers G&amp;#95;&amp;#95;800 vb&amp;#95;&amp;#95;793&amp;#95;&amp;#95;auto&amp;#95;&amp;#95; G&amp;#95;&amp;#95;802 G&amp;#95;&amp;#95;803&amp;#41; &amp;#40;clojure.core/if-let &amp;#91;vexpr&amp;#95;&amp;#95;794&amp;#95;&amp;#95;auto&amp;#95;&amp;#95; &amp;#40;clojure.core/and &amp;#40;G&amp;#95;&amp;#95;800 G&amp;#95;&amp;#95;802&amp;#41; &amp;#40;G&amp;#95;&amp;#95;803 G&amp;#95;&amp;#95;802&amp;#41;&amp;#41;&amp;#93; &amp;#40;clojure.core.unify/garner-unifiers G&amp;#95;&amp;#95;800 G&amp;#95;&amp;#95;801 vexpr&amp;#95;&amp;#95;794&amp;#95;&amp;#95;auto&amp;#95;&amp;#95; G&amp;#95;&amp;#95;803&amp;#41; &amp;#40;if &amp;#40;clojure.core.unify/occurs? G&amp;#95;&amp;#95;800 G&amp;#95;&amp;#95;801 G&amp;#95;&amp;#95;802 G&amp;#95;&amp;#95;803&amp;#41; &amp;#40;throw &amp;#40;java.lang.IllegalStateException. &amp;#40;clojure.core/str &amp;quot;Cycle found in the path &amp;quot; G&amp;#95;&amp;#95;802&amp;#41;&amp;#41;&amp;#41; &amp;#40;clojure.core.unify/bind-phase G&amp;#95;&amp;#95;803 G&amp;#95;&amp;#95;801 G&amp;#95;&amp;#95;802&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;}
 at clojure.spec.alpha$macroexpand&amp;#95;check.invokeStatic &amp;#40;alpha.clj:705&amp;#41;
    clojure.spec.alpha$macroexpand&amp;#95;check.invoke &amp;#40;alpha.clj:697&amp;#41;
    clojure.lang.AFn.applyToHelper &amp;#40;AFn.java:156&amp;#41;
    clojure.lang.AFn.applyTo &amp;#40;AFn.java:144&amp;#41;
    clojure.lang.Var.applyTo &amp;#40;Var.java:705&amp;#41;
    clojure.lang.Compiler.checkSpecs &amp;#40;Compiler.java:6969&amp;#41;
    clojure.lang.Compiler.macroexpand1 &amp;#40;Compiler.java:6987&amp;#41;
    clojure.lang.Compiler.analyzeSeq &amp;#40;Compiler.java:7092&amp;#41;
    clojure.lang.Compiler.analyze &amp;#40;Compiler.java:6789&amp;#41;
    clojure.lang.Compiler.analyzeSeq &amp;#40;Compiler.java:7094&amp;#41;
    clojure.lang.Compiler.analyze &amp;#40;Compiler.java:6789&amp;#41;
    clojure.lang.Compiler.access$300 &amp;#40;Compiler.java:38&amp;#41;
    clojure.lang.Compiler$DefExpr$Parser.parse &amp;#40;Compiler.java:596&amp;#41;
    clojure.lang.Compiler.analyzeSeq &amp;#40;Compiler.java:7106&amp;#41;
    clojure.lang.Compiler.analyze &amp;#40;Compiler.java:6789&amp;#41;
    clojure.lang.Compiler.analyze &amp;#40;Compiler.java:6745&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7180&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$require.invokeStatic &amp;#40;core.clj:6007&amp;#41;
    clojure.core$require.doInvoke &amp;#40;core.clj:6007&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:421&amp;#41;
    clojure.core.contracts.impl.transformers$eval690$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;691.invoke &amp;#40;transformers.clj:1&amp;#41;
    clojure.core.contracts.impl.transformers$eval690.invokeStatic &amp;#40;transformers.clj:1&amp;#41;
    clojure.core.contracts.impl.transformers$eval690.invoke &amp;#40;transformers.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$require.invokeStatic &amp;#40;core.clj:6007&amp;#41;
    clojure.core$require.doInvoke &amp;#40;core.clj:6007&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    leinjacker.defconstrainedfn$eval684$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;685.invoke &amp;#40;defconstrainedfn.clj:1&amp;#41;
    leinjacker.defconstrainedfn$eval684.invokeStatic &amp;#40;defconstrainedfn.clj:1&amp;#41;
    leinjacker.defconstrainedfn$eval684.invoke &amp;#40;defconstrainedfn.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:669&amp;#41;
    clojure.core$use.invokeStatic &amp;#40;core.clj:6093&amp;#41;
    clojure.core$use.doInvoke &amp;#40;core.clj:6093&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    leinjacker.deps$eval676$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;677.invoke &amp;#40;deps.clj:1&amp;#41;
    leinjacker.deps$eval676.invokeStatic &amp;#40;deps.clj:1&amp;#41;
    leinjacker.deps$eval676.invoke &amp;#40;deps.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$require.invokeStatic &amp;#40;core.clj:6007&amp;#41;
    clojure.core$require.doInvoke &amp;#40;core.clj:6007&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:436&amp;#41;
    leiningen.ring.server$eval668$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;669.invoke &amp;#40;server.clj:1&amp;#41;
    leiningen.ring.server$eval668.invokeStatic &amp;#40;server.clj:1&amp;#41;
    leiningen.ring.server$eval668.invoke &amp;#40;server.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:669&amp;#41;
    clojure.core$use.invokeStatic &amp;#40;core.clj:6093&amp;#41;
    clojure.core$use.doInvoke &amp;#40;core.clj:6093&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:551&amp;#41;
    leiningen.ring$eval662$loading&amp;#95;&amp;#95;6706&amp;#95;&amp;#95;auto&amp;#95;&amp;#95;&amp;#95;&amp;#95;663.invoke &amp;#40;ring.clj:1&amp;#41;
    leiningen.ring$eval662.invokeStatic &amp;#40;ring.clj:1&amp;#41;
    leiningen.ring$eval662.invoke &amp;#40;ring.clj:1&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7176&amp;#41;
    clojure.lang.Compiler.eval &amp;#40;Compiler.java:7165&amp;#41;
    clojure.lang.Compiler.load &amp;#40;Compiler.java:7635&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:381&amp;#41;
    clojure.lang.RT.loadResourceScript &amp;#40;RT.java:372&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:463&amp;#41;
    clojure.lang.RT.load &amp;#40;RT.java:428&amp;#41;
    clojure.core$load$fn&amp;#95;&amp;#95;6824.invoke &amp;#40;core.clj:6126&amp;#41;
    clojure.core$load.invokeStatic &amp;#40;core.clj:6125&amp;#41;
    clojure.core$load.doInvoke &amp;#40;core.clj:6109&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    clojure.core$load&amp;#95;one.invokeStatic &amp;#40;core.clj:5908&amp;#41;
    clojure.core$load&amp;#95;one.invoke &amp;#40;core.clj:5903&amp;#41;
    clojure.core$load&amp;#95;lib$fn&amp;#95;&amp;#95;6765.invoke &amp;#40;core.clj:5948&amp;#41;
    clojure.core$load&amp;#95;lib.invokeStatic &amp;#40;core.clj:5947&amp;#41;
    clojure.core$load&amp;#95;lib.doInvoke &amp;#40;core.clj:5928&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:142&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$load&amp;#95;libs.invokeStatic &amp;#40;core.clj:5985&amp;#41;
    clojure.core$load&amp;#95;libs.doInvoke &amp;#40;core.clj:5969&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:667&amp;#41;
    clojure.core$require.invokeStatic &amp;#40;core.clj:6007&amp;#41;
    clojure.core$require.doInvoke &amp;#40;core.clj:6007&amp;#41;
    clojure.lang.RestFn.invoke &amp;#40;RestFn.java:408&amp;#41;
    leiningen.core.utils$require&amp;#95;resolve.invokeStatic &amp;#40;utils.clj:102&amp;#41;
    leiningen.core.utils$require&amp;#95;resolve.invoke &amp;#40;utils.clj:95&amp;#41;
    leiningen.core.utils$require&amp;#95;resolve.invokeStatic &amp;#40;utils.clj:105&amp;#41;
    leiningen.core.utils$require&amp;#95;resolve.invoke &amp;#40;utils.clj:95&amp;#41;
    leiningen.core.main$lookup&amp;#95;task&amp;#95;var.invokeStatic &amp;#40;main.clj:69&amp;#41;
    leiningen.core.main$lookup&amp;#95;task&amp;#95;var.invoke &amp;#40;main.clj:65&amp;#41;
    leiningen.core.main$pass&amp;#95;through&amp;#95;help&amp;#95;QMARK&amp;#95;.invokeStatic &amp;#40;main.clj:79&amp;#41;
    leiningen.core.main$pass&amp;#95;through&amp;#95;help&amp;#95;QMARK&amp;#95;.invoke &amp;#40;main.clj:73&amp;#41;
    leiningen.core.main$task&amp;#95;args.invokeStatic &amp;#40;main.clj:82&amp;#41;
    leiningen.core.main$task&amp;#95;args.invoke &amp;#40;main.clj:81&amp;#41;
    leiningen.core.main$resolve&amp;#95;and&amp;#95;apply.invokeStatic &amp;#40;main.clj:339&amp;#41;
    leiningen.core.main$resolve&amp;#95;and&amp;#95;apply.invoke &amp;#40;main.clj:336&amp;#41;
    leiningen.core.main$&amp;#95;main$fn&amp;#95;&amp;#95;6771.invoke &amp;#40;main.clj:449&amp;#41;
    leiningen.core.main$&amp;#95;main.invokeStatic &amp;#40;main.clj:439&amp;#41;
    leiningen.core.main$&amp;#95;main.doInvoke &amp;#40;main.clj:436&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.lang.Var.applyTo &amp;#40;Var.java:705&amp;#41;
    clojure.core$apply.invokeStatic &amp;#40;core.clj:665&amp;#41;
    clojure.main$main&amp;#95;opt.invokeStatic &amp;#40;main.clj:491&amp;#41;
    clojure.main$main&amp;#95;opt.invoke &amp;#40;main.clj:487&amp;#41;
    clojure.main$main.invokeStatic &amp;#40;main.clj:598&amp;#41;
    clojure.main$main.doInvoke &amp;#40;main.clj:561&amp;#41;
    clojure.lang.RestFn.applyTo &amp;#40;RestFn.java:137&amp;#41;
    clojure.lang.Var.applyTo &amp;#40;Var.java:705&amp;#41;
    clojure.main.main &amp;#40;main.java:37&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;lein ring server&lt;/code&gt;がエラーを吐くようになった。&lt;/p&gt;&lt;p&gt;&lt;code&gt;lein help&lt;/code&gt;で見てみてもringだけエラーが出てる&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;lein help
Leiningen is a tool for working with Clojure projects.

Several tasks are available:
change              Rewrite project.clj with f applied to the value at key-or-path.
check               Check syntax and warn on reflection.
classpath           Write the classpath of the current project to output-file.
clean               Removes all files from paths in clean-targets for a project
compile             Compile Clojure source into .class files.
deploy              Deploy jar and pom to remote repository.
deps                Show details about dependencies.
do                  Higher-order task to perform other tasks in succession.
help                Display a list of tasks or help for a given task or subtask.
install             Install jar and pom to the local repository; typically &amp;#126;/.m2.
jar                 Package up all the project's files into a jar file.
javac               Compile Java source files.
new                 Generate scaffolding for a new project based on a template.
plugin              DEPRECATED. Please use the :user profile instead.
pom                 Write a pom.xml file to disk for Maven interoperability.
release             Perform release tasks.
repl                Start a repl session either with the current project or standalone.
retest              Run only the test namespaces which failed last time around.
leiningen.ring  Problem loading: Syntax error macroexpanding clojure.core/fn at &amp;#40;clojure/core/unify.clj:83:18&amp;#41;.
run                 Run the project's -main function.
search              Search Central and Clojars for published artifacts.
show-profiles       List all available profiles or display one if given an argument.
test                Run the project's tests.
trampoline          Run a task without nesting the project's JVM inside Leiningen's.
uberjar             Package up the project files and all dependencies into a jar file.
update-in           Perform arbitrary transformations on your project map.
upgrade             Upgrade Leiningen to specified version or latest stable.
vcs                 Interact with the version control system.
version             Print version for Leiningen and the current JVM.
with-profile        Apply the given task with the profile&amp;#40;s&amp;#41; specified.

Run `lein help $TASK` for details.

Global Options:
  -o             Run a task offline.
  -U             Run a task after forcing update of snapshots.
  -h, --help     Print this help or help for a specific task.
  -v, --version  Print Leiningen's version.

These aliases are available:
downgrade, expands to upgrade

See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
mixed-source, templates, and copying.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この前後にPCのソフトウェア更新など諸々してたしJDK更新したからか？と云う気もしたが原因はわからず。&lt;/p&gt;&lt;p&gt;ブログを作るだけなら&lt;code&gt;lein run&lt;/code&gt;すりゃいいだけなのでなくてもよいのだが、見れたほうが良いので他のversionだとどうか試してみたところ、 0.12.5以上でならイケることがわかったので、cryogenの&lt;code&gt;project.clj&lt;/code&gt;に記述されてる&lt;code&gt;lein-ring&lt;/code&gt;のversionを上げることで障害を解消した。&lt;/p&gt;&lt;p&gt;ブログを書くための見えない部分の障害なので最も楽な解決方法でいったが、プロダクトでこれが起こってたらもっとエラーの原因を深掘りしたであろうな🤔&lt;/p&gt;
</description>
<pubDate>
Sun, 24 Feb 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-02-20-instead-of-ping
</guid>
<link>
http://krymtkts.github.io/posts/2019-02-20-instead-of-ping
</link>
<title>
`ping`の代わりに`Test-Connection`を使う
</title>
<description>
&lt;p&gt;PowerShellには&lt;code&gt;Test-Connection&lt;/code&gt;というやつがあるのを今更ながら知った。&lt;/p&gt;&lt;p&gt;今の仕事では、仮想マシン(dockerでない)を複数立ち上げて作業することが常になってるのだが、結構立ち上げ忘れてたりしてうっかりSSHしたときに繋げないのである😢&lt;/p&gt;&lt;p&gt;疎通確認と合わせてSSHするすべを探してたところ、これを知ったので以下のようなスクリプトを作ってCmderのTaskに登録して使っている。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;$waken = Test-Connection -TargetName $ip -Count 1 -Quiet
if &amp;#40;!$waken&amp;#41; {
    Write-Output &amp;quot;target not found. please start up $ip&amp;quot;
    $Host.UI.RawUI.ReadKey&amp;#40;&amp;#41; | Out-Null
    exit
}
ssh &amp;quot;admin@$ip&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://blog.shibata.tech/entry/2016/06/16/231239'&gt;Test-Connectionが遅い理由と対策方法について - しばたテックブログ&lt;/a&gt;&lt;/p&gt;&lt;p&gt;↑このような話もあるようなので目を通しておきたいところ🤔&lt;/p&gt;&lt;h3 id=&quot;おまけ&quot;&gt;おまけ&lt;/h3&gt;&lt;p&gt;&lt;a href='https://qiita.com/twinkfrag/items/f3ecf79b68ea09eadec2'&gt;PowerShellでPause - Qiita&lt;/a&gt;&lt;/p&gt;&lt;p&gt;最近のPowerShellには&lt;code&gt;Pause&lt;/code&gt;なるもんがデフォで入ってるが、古来からの方法でEnter以外のキーでも使えるようにしておくのが良いであらうか？&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Write-Output &amp;quot;type key to continue...&amp;quot;
$Host.UI.RawUI.ReadKey&amp;#40;&amp;#41; | Out-Null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;スクリプトの中でコレを呼んだら、なんかのキーを押すまで止まる。&lt;/p&gt;&lt;p&gt;戻り値が標準出力されないようにするために&lt;code&gt;Out-Null&lt;/code&gt;にパイプラインする。&lt;code&gt;$null&lt;/code&gt;に代入でもよいが。&lt;/p&gt;&lt;h3 id=&quot;余談&quot;&gt;余談&lt;/h3&gt;&lt;p&gt;この記事をしたためておるときに&lt;code&gt;lein ring server&lt;/code&gt;でエラーが出るようになってたのを解消したので、メモがてら次回に記す。&lt;/p&gt;
</description>
<pubDate>
Wed, 20 Feb 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-02-11-Register-ArgumentCompleter2
</guid>
<link>
http://krymtkts.github.io/posts/2019-02-11-Register-ArgumentCompleter2
</link>
<title>
Register-ArgumentCompleterのScriptBlockの引数
</title>
<description>
&lt;p&gt;&lt;a href='./2019-02-04-Register-ArgumentCompleter.md'&gt;前回&lt;/a&gt;の続き。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Register-ArgumentCompleter -Native -CommandName mvn -ScriptBlock {
    param&amp;#40;$wordToComplete, $commandAst, $cursorPosition&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;↑こんなんいるやん？&lt;/p&gt;&lt;p&gt;&lt;code&gt;wordToComplete&lt;/code&gt;には入力中の文字列が入ってくる。&lt;/p&gt;&lt;p&gt;&lt;code&gt;$commandAst&lt;/code&gt;にはコマンドラインが全部載ってくる。&lt;/p&gt;&lt;p&gt;でも実際詳しく知らんので、たとえば&lt;code&gt;maven clean install -pl :module1 -&lt;/code&gt;ってとこまで入力してCtrl+Spaceやったときにはどういうパラメータになるかわからんので調べた。&lt;/p&gt;&lt;p&gt;結論から言うと&lt;code&gt;$commandAst&lt;/code&gt;はASTが乗ってくる。&lt;code&gt;mvn clean install &amp;ndash;d&lt;/code&gt;でtabしたときのデバッガでの出力は以下の通り(デバッグ実行にはISEを利用した)。 &lt;a href='https://docs.microsoft.com/ja-jp/powershell/scripting/components/ise/exploring-the-windows-powershell-ise?view=powershell-6'&gt;Windows PowerShell ISE の操作 | Microsoft Docs&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;PS C:\Users\takatoshi\Desktop\maven&amp;gt; mvn clean install --d
ヒット 'C:\Users\takatoshi\dev\powershell\MavenAutoCompletion\MavenAutoCompletion.ps1:152' の行のブレークポイント
&amp;#91;DBG&amp;#93;: PS C:\Users\takatoshi\Desktop\maven&amp;gt;&amp;gt; $commandAst


CommandElements    : {mvn, clean, install, --d}
InvocationOperator : Unknown
DefiningKeyword    :
Redirections       : {}
Extent             : mvn clean install --d
Parent             : mvn clean install --d




&amp;#91;DBG&amp;#93;: PS C:\Users\takatoshi\Desktop\maven&amp;gt;&amp;gt; $wordToComplete
--d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;mvn clean install &amp;ndash;projects :&lt;/code&gt;でtabした場合↓&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;&amp;#91;DBG&amp;#93;: PS C:\Users\takatoshi\Desktop\maven&amp;gt;&amp;gt;
mvn clean install --projects :
ヒット 'C:\Users\takatoshi\dev\powershell\MavenAutoCompletion\MavenAutoCompletion.ps1:152' の行のブレークポイント
&amp;#91;DBG&amp;#93;: PS C:\Users\takatoshi\Desktop\maven&amp;gt;&amp;gt; $commandAst


CommandElements    : {mvn, clean, install, --projects...}
InvocationOperator : Unknown
DefiningKeyword    :
Redirections       : {}
Extent             : mvn clean install --projects :
Parent             : mvn clean install --projects :




&amp;#91;DBG&amp;#93;: PS C:\Users\takatoshi\Desktop\maven&amp;gt;&amp;gt; $commandAst.CommandElements


StringConstantType : BareWord
Value              : mvn
StaticType         : System.String
Extent             : mvn
Parent             : mvn clean install --projects :

StringConstantType : BareWord
Value              : clean
StaticType         : System.String
Extent             : clean
Parent             : mvn clean install --projects :

StringConstantType : BareWord
Value              : install
StaticType         : System.String
Extent             : install
Parent             : mvn clean install --projects :

StringConstantType : BareWord
Value              : --projects
StaticType         : System.String
Extent             : --projects
Parent             : mvn clean install --projects :

StringConstantType : BareWord
Value              : :
StaticType         : System.String
Extent             : :
Parent             : mvn clean install --projects :
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;wordToComplete&lt;/code&gt; こいつはまじでただの文字列。&lt;code&gt;commandAst.CommandElements&lt;/code&gt;の最後の要素の&lt;code&gt;value&lt;/code&gt;が出てる。&lt;/p&gt;&lt;p&gt;という感じだったので、MavenAutoCompletion的には&lt;code&gt;commandAst.CommandElements&lt;/code&gt;の最後から2要素を対象に正規表現してやれば、だいたい望みのことができるのがわかったのであった。&lt;/p&gt;&lt;h3 id=&quot;余談&quot;&gt;余談&lt;/h3&gt;&lt;p&gt;PowerShellで配列の任意の連続した要素を抜き出すのに、slice的なんがないんかと調べたところ、以下のようにするようだ。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;&amp;gt; $a = @&amp;#40;'mvn', 'clean', 'install', '-pl', ':'&amp;#41;
&amp;gt; $a&amp;#91;&amp;#40;$a.Length -2&amp;#41;..$a.Length&amp;#93;
-pl
:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;cool😉&lt;/p&gt;
</description>
<pubDate>
Mon, 11 Feb 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-02-04-Register-ArgumentCompleter
</guid>
<link>
http://krymtkts.github.io/posts/2019-02-04-Register-ArgumentCompleter
</link>
<title>
Register-ArgumentCompleter
</title>
<description>
&lt;p&gt;まだoutputが習慣化してなくて随分空いてしまった🤔&lt;/p&gt;&lt;h3 id=&quot;&lt;a href='https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/register-argumentcompleter?view=powershell-6'&gt;Register-ArgumentCompleter&lt;/a&gt;&quot;&gt;&lt;a href='https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/register-argumentcompleter?view=powershell-6'&gt;Register-ArgumentCompleter&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;PowerShell5から、従来の&lt;code&gt;TabExpansion&lt;/code&gt;に代わる&lt;code&gt;Register-ArgumentCompleter&lt;/code&gt;なるモノが現れたのは、PowerShellerなら知っているだろう(わたしは去年まで知らんかったのでPowerShellerではないのだ)。&lt;/p&gt;&lt;h3 id=&quot;サンプル書いてみた&quot;&gt;サンプル書いてみた&lt;/h3&gt;&lt;p&gt;Mavenのよく使うコマンドでお試し。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Register-ArgumentCompleter -Native -CommandName mvn -ScriptBlock {
    param&amp;#40;$wordToComplete, $commandAst, $cursorPosition&amp;#41;

    echo -- clean install eclipse:eclipse |
        Where-Object { $&amp;#95; -like &amp;quot;$wordToComplete&amp;#42;&amp;quot; } |
        Sort-Object |
        ForEach-Object {
            &amp;#91;System.Management.Automation.CompletionResult&amp;#93;::new&amp;#40;$&amp;#95;, $&amp;#95;, 'ParameterValue', $&amp;#95;&amp;#41;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;めちゃんこ簡単。&lt;/p&gt;&lt;h3 id=&quot;作ったもの&quot;&gt;作ったもの&lt;/h3&gt;&lt;p&gt;当時仕事で巨大なMavenプロジェクトを使っていて、コマンド打つのも億劫だったのでPowerShellで自動補完がほしいなと思っていたのだが、&lt;code&gt;TabExpantion&lt;/code&gt;はちょっと自分には使いこなせなかった。関数のオーバーライドをしたりのおまじないが必要だし。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Register-ArgumentCompleter&lt;/code&gt;なら簡単に作れたので、APIが進化してる感をひしと感じたのであった。以下成果物↓&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/krymtkts/MavenAutoCompletion'&gt;krymtkts/MavenAutoCompletion: MavenAutoCompletion provides a simple auto completion of Maven 3 to PowerShell.&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;既知のバグ&quot;&gt;既知のバグ&lt;/h3&gt;&lt;p&gt;PowerShell5だと&lt;code&gt;-Native&lt;/code&gt;オプションありの場合に&lt;code&gt;-&lt;/code&gt;を利用した補完ができないバグがあって、前述の自動補完がうまく使えなくて辛い...&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/PowerShell/PowerShell/issues/2912'&gt;Native ArgumentCompleter not invoked for inputs that begin with hyphen (-) · Issue #2912 · PowerShell/PowerShell&lt;/a&gt;&lt;/p&gt;&lt;p&gt;PowerShell5.xでも使えないものかと試してみたところ、Trickyな回避策として&lt;code&gt;&amp;#x60;&lt;/code&gt;で&lt;code&gt;-&lt;/code&gt;をエスケープしたらイケるというのを見つけたが...posh-gitもchocolateyもそれで従来からの&lt;code&gt;TabExpantion&lt;/code&gt;を使ってたのかーという気付きは得られた。&lt;/p&gt;&lt;p&gt;ちなみにわたしはPowerShell6を使ってるのでかんけーないのだ😜&lt;/p&gt;&lt;h3 id=&quot;残&quot;&gt;残&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Register-ArgumentCompleter&lt;/code&gt;のScriptBlockの引数をちまちま調べたのがあるけど、長いから別に書こう。&lt;/p&gt;
</description>
<pubDate>
Mon, 04 Feb 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-01-17-build-qmk-firmware-of-planck
</guid>
<link>
http://krymtkts.github.io/posts/2019-01-17-build-qmk-firmware-of-planck
</link>
<title>
Planckのキーマップをビルドする
</title>
<description>
&lt;blockquote&gt;&lt;p&gt; 当時使ってたPCではプログラミングしなくなったのと、改めてQMK firmwareのdocument見たらbuild toolsんとこの記事が変わってるので、今度環境構築がてら再確認してfirmwareのとこだけ新しく書こうと思う。 &lt;/p&gt;&lt;p&gt; わたしのkeymapのrepo(&lt;a href='https://github.com/krymtkts/qmk_firmware'&gt;krymtkts/qmk_firmware&lt;/a&gt;)は「デフォのキーマップをコピった」的なコミットを最後に止まってるので、旧PCに遺物が残されてそう...作り直したほうが早いわ😅 &lt;/p&gt;&lt;p&gt; 去年はWSLで書き込む方法が確か使えてたはずだけど今は非推奨になってて、MSYS2を使う方法が主流になった？？？謎い🤔 &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href='./2019-01-14-ortho-linear-keyboard-planck'&gt;前回&lt;/a&gt;のこの辺の続き。&lt;/p&gt;&lt;h3 id=&quot;ビルド環境をセットアップする&quot;&gt;ビルド環境をセットアップする&lt;/h3&gt;&lt;p&gt;ドキュメント&lt;a href='https://docs.qmk.fm/#/getting_started_build_tools'&gt;QMK Firmware - Installing Build Tools&lt;/a&gt;に記載のWSLの手順をそのままでOK。ちょっとWSLを使いたかったのでMSYS2でのやつではあえてやらなかった。&lt;/p&gt;&lt;p&gt;WSL用のセットアップは&lt;code&gt;util/wsl&amp;#95;install.sh&lt;/code&gt;で行う。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ cd ./c/qmk&amp;#95;firmware/
$ ./util/wsl&amp;#95;install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;途中ドライバを全部入れる？と聞かれて、それは流石に...と思ったのでConnectedという接続したドライバだけ入れるやつ&lt;code&gt;C&lt;/code&gt;にした。&lt;/p&gt;&lt;p&gt;Flip入れる？と聞かれたけどつかわないだろうし必要なときに、と思ったので&lt;code&gt;N&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;wsl&amp;#95;install.sh&lt;/code&gt;完了後にPlanckのrev4のdefaultキーマップを試しにコンパイルする。&lt;/p&gt;&lt;p&gt;bashを再起動してサンプルのコマンドを実行する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ make planck/rev4:default
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;でバイナリが吐き出されたのでOK。&lt;/p&gt;&lt;h3 id=&quot;planckのfirmwareをビルドする&quot;&gt;Planckのfirmwareをビルドする&lt;/h3&gt;&lt;p&gt;わたしのキーマップはこちら→&lt;a href='https://github.com/krymtkts/qmk_firmware/blob/master/keyboards/planck/keymaps/krymtkts/keymap.c'&gt;qmk&amp;#95;firmware/keymap.c at master · krymtkts/qmk_firmware&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2017年末頃にビルドしたころとは&lt;code&gt;keyboards/planck/&lt;/code&gt;配下のコードが結構変わってるようなので、作成済みのキーマップを削除して新しく&lt;code&gt;default&lt;/code&gt;キーマップを作成する。それ用のシェルがあるので使う。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./util/new&amp;#95;keymap.sh planck krymtkts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで一旦ビルドする。revisionはわからんけど時期的に5だと思う。[要出典?]&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ make planck/rev5:krymtkts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コマンドラインでfirmwareを書き込む。revision5では以下のコマンドが正しい。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ make planck/rev5:krymtkts:dfu
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;でもエラーになった。なんかエラーが無限に繰り返される。CTRL+Cで中断&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ make planck/rev5:krymtkts:dfu
QMK Firmware 0.6.228
Making planck/rev5 with keymap krymtkts and target dfu

avr-gcc &amp;#40;GCC&amp;#41; 4.9.2
Copyright &amp;#40;C&amp;#41; 2014 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Size before:
text    data     bss     dec     hex filename
    0   26614       0   26614    67f6 .build/planck&amp;#95;rev5&amp;#95;krymtkts.hex

Compiling: keyboards/planck/keymaps/krymtkts/keymap.c                                               &amp;#91;OK&amp;#93;
Linking: .build/planck&amp;#95;rev5&amp;#95;krymtkts.elf                                                            &amp;#91;OK&amp;#93;
Creating load file for flashing: .build/planck&amp;#95;rev5&amp;#95;krymtkts.hex                                    &amp;#91;OK&amp;#93;
Copying planck&amp;#95;rev5&amp;#95;krymtkts.hex to qmk&amp;#95;firmware folder                                             &amp;#91;OK&amp;#93;
Checking file size of planck&amp;#95;rev5&amp;#95;krymtkts.hex                                                      &amp;#91;OK&amp;#93;
&amp;#42; The firmware size is fine - 26614/28672 &amp;#40;2058 bytes free&amp;#41;
Error: Bootloader not found. Trying again in 5s.
Error: Bootloader not found. Trying again in 5s.
Error: Bootloader not found. Trying again in 5s.
Error: Bootloader not found. Trying again in 5s.
Error: Bootloader not found. Trying again in 5s.
&amp;#94;Ctmk&amp;#95;core/avr.mk:141: recipe for target 'dfu' failed
make&amp;#91;1&amp;#93;: &amp;#42;&amp;#42;&amp;#42; &amp;#91;dfu&amp;#93; Interrupt
Makefile:529: recipe for target 'planck/rev5:krymtkts:dfu' failed
make: &amp;#42;&amp;#42;&amp;#42; &amp;#91;planck/rev5:krymtkts:dfu&amp;#93; Interrupt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;エラーダイアログで「libusb0.dllがない」というような旨が表示される。WSLでやろうとしたからダメだったのか？&lt;/p&gt;&lt;p&gt;コマンドラインで焼くのを一旦諦めて、&lt;code&gt;qmk&amp;#95;tookbox.exe&lt;/code&gt;を使うことにしたら一発成功、Planckに自分のキーマップを焼くことに成功した。&lt;/p&gt;&lt;p&gt;でもコマンドラインで焼けないのは困るので、PlanckのMakefileの&lt;code&gt;rules.mk&lt;/code&gt;見てみたところ、&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;makefile&quot;&gt;ifeq &amp;#40;$&amp;#40;strip $&amp;#40;KEYBOARD&amp;#41;&amp;#41;, planck/rev4&amp;#41;
    BOOTLOADER = atmel-dfu
endif
ifeq &amp;#40;$&amp;#40;strip $&amp;#40;KEYBOARD&amp;#41;&amp;#41;, planck/rev5&amp;#41;
    BOOTLOADER = qmk-dfu
endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とあって、rev4と4rev5でbootloaderが変わってることから、あれ？わたしのPlanckもしかしてrev4じゃ？と思って試してみたところ...&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ make planck/rev4:krymtkts:dfu
QMK Firmware 0.6.228
Making planck/rev4 with keymap krymtkts and target dfu

avr-gcc &amp;#40;GCC&amp;#41; 4.9.2
Copyright &amp;#40;C&amp;#41; 2014 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Compiling: quantum/audio/muse.c                                                                     &amp;#91;OK&amp;#93;
Compiling: keyboards/planck/planck.c                                                                &amp;#91;OK&amp;#93;
Compiling: keyboards/planck/keymaps/krymtkts/keymap.c                                               &amp;#91;OK&amp;#93;
Compiling: quantum/quantum.c                                                                        &amp;#91;OK&amp;#93;
Compiling: quantum/keymap&amp;#95;common.c                                                                  &amp;#91;OK&amp;#93;
Compiling: quantum/keycode&amp;#95;config.c                                                                 &amp;#91;OK&amp;#93;
Compiling: quantum/matrix.c                                                                         &amp;#91;OK&amp;#93;
Compiling: quantum/process&amp;#95;keycode/process&amp;#95;audio.c                                                  &amp;#91;OK&amp;#93;
Compiling: quantum/process&amp;#95;keycode/process&amp;#95;clicky.c                                                 &amp;#91;OK&amp;#93;
Compiling: quantum/audio/audio.c                                                                    &amp;#91;OK&amp;#93;
Compiling: quantum/audio/voices.c                                                                   &amp;#91;OK&amp;#93;
Compiling: quantum/audio/luts.c                                                                     &amp;#91;OK&amp;#93;
Compiling: quantum/process&amp;#95;keycode/process&amp;#95;music.c                                                  &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/host.c                                                                   &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/keyboard.c                                                               &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/action.c                                                                 &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/action&amp;#95;tapping.c                                                         &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/action&amp;#95;macro.c                                                           &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/action&amp;#95;layer.c                                                           &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/action&amp;#95;util.c                                                            &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/print.c                                                                  &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/debug.c                                                                  &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/util.c                                                                   &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/eeconfig.c                                                               &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/report.c                                                                 &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/avr/suspend.c                                                            &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/avr/timer.c                                                              &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/avr/bootloader.c                                                         &amp;#91;OK&amp;#93;
Assembling: tmk&amp;#95;core/common/avr/xprintf.S                                                           &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/common/magic.c                                                                  &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/protocol/lufa/lufa.c                                                            &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/protocol/usb&amp;#95;descriptor.c                                                       &amp;#91;OK&amp;#93;
Compiling: tmk&amp;#95;core/protocol/lufa/outputselect.c                                                    &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Class/Common/HIDParser.c                                       &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/Device&amp;#95;AVR8.c                                        &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/EndpointStream&amp;#95;AVR8.c                                &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/Endpoint&amp;#95;AVR8.c                                      &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/Host&amp;#95;AVR8.c                                          &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/PipeStream&amp;#95;AVR8.c                                    &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/Pipe&amp;#95;AVR8.c                                          &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController&amp;#95;AVR8.c                                 &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBInterrupt&amp;#95;AVR8.c                                  &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/ConfigDescriptors.c                                       &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/DeviceStandardReq.c                                       &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/Events.c                                                  &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.c                                         &amp;#91;OK&amp;#93;
Compiling: lib/lufa/LUFA/Drivers/USB/Core/USBTask.c                                                 &amp;#91;OK&amp;#93;
Linking: .build/planck&amp;#95;rev4&amp;#95;krymtkts.elf                                                            &amp;#91;OK&amp;#93;
Creating load file for flashing: .build/planck&amp;#95;rev4&amp;#95;krymtkts.hex                                    &amp;#91;OK&amp;#93;
Copying planck&amp;#95;rev4&amp;#95;krymtkts.hex to qmk&amp;#95;firmware folder                                             &amp;#91;OK&amp;#93;
Checking file size of planck&amp;#95;rev4&amp;#95;krymtkts.hex                                                      &amp;#91;OK&amp;#93;
 &amp;#42; The firmware size is fine - 26614/28672 &amp;#40;2058 bytes free&amp;#41;
Bootloader Version: 0x00 &amp;#40;0&amp;#41;
Erasing flash...  Success
Checking memory from 0x0 to 0x6FFF...  Empty.
Checking memory from 0x0 to 0x67FF...  Empty.
0%                            100%  Programming 0x6800 bytes...
&amp;#91;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;#93;  Success
0%                            100%  Reading 0x7000 bytes...
&amp;#91;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;#93;  Success
Validating...  Success
0x6800 bytes written into 0x7000 bytes memory &amp;#40;92.86%&amp;#41;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成功した。時期的にrev5だと思ってたけどrev4だったとは😅まあうまくいってよかった。&lt;/p&gt;&lt;p&gt;キーマップはまだしっくり来ていないのでちまちま更新する予定。&lt;/p&gt;
</description>
<pubDate>
Thu, 17 Jan 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-01-14-ortho-linear-keyboard-planck
</guid>
<link>
http://krymtkts.github.io/posts/2019-01-14-ortho-linear-keyboard-planck
</link>
<title>
Ortho-Linear Keyboard &quot;Planck&quot;
</title>
<description>
&lt;p&gt;わたしが&lt;a href='https://olkb.com/planck/'&gt;Planck&lt;/a&gt;を手に入れたのは割と遅めのタイミング。&lt;/p&gt;&lt;p&gt;2017年の春に&lt;a href='https://www.massdrop.com/'&gt;Massdrop&lt;/a&gt;で買って、6月末に届く予定だったのだけど、手元に届いたのが秋頃だった。jackhumbertさん(OLKBの中の人)随分忙しかったようで遅れまくり。&lt;/p&gt;&lt;p&gt;普段の仕事では&lt;a href='https://ergodox-ez.com/'&gt;Ergodox EZ&lt;/a&gt;を使ってるんやが、持ち運びに便利なminimalなキーボードが欲しくて買った。&lt;/p&gt;&lt;p&gt;以下はその作業ログである。&lt;/p&gt;&lt;p&gt;&lt;hr/&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;date: 2017-10-07&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-01-14-planck/planck-case-keyswitches.jpg&quot; alt=&quot;者共&quot; /&gt;&lt;/p&gt;&lt;p&gt;ケース付き、キースイッチ付きでDIYキットを購入。キースイッチはCherry MX Clear。&lt;/p&gt;&lt;h3 id=&quot;はじめに&quot;&gt;はじめに&lt;/h3&gt;&lt;h4 id=&quot;手順の理解&quot;&gt;手順の理解&lt;/h4&gt;&lt;p&gt;Jack Humbert氏のYoutubeを見てイメージを掴む。&lt;/p&gt;&lt;p&gt;&lt;a href='https://www.youtube.com/watch?v=S2FApwzVxAQ'&gt;How to Actually Build a Planck (or Preonic or Atomic) from OLKB&lt;/a&gt;&lt;/p&gt;&lt;p&gt;説明動画を見てケッコー以外だったのが、key switchの端子の歪みを素手で直してた所。ピンセットとか使わないんや...&lt;/p&gt;&lt;h3 id=&quot;作業に入る&quot;&gt;作業に入る&lt;/h3&gt;&lt;h4 id=&quot;検品&quot;&gt;検品&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-01-14-planck/planck-picking.jpg&quot; alt=&quot;パーツ欠品確認&quot; /&gt;&lt;/p&gt;&lt;p&gt;パーツは全部揃っている。数も数えたしOK&lt;/p&gt;&lt;p&gt;一箇所Switch Plateに多分プレス時にズレかなんかあったであろう痕があってちょっと残念。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-01-14-planck/planck-unfortunate.jpg&quot; alt=&quot;プレスミス？&quot; /&gt;&lt;/p&gt;&lt;p&gt;PCBはUSBに接続して音がなればOKとのこと。ファンシーなnoiseが奏でられた&lt;/p&gt;&lt;p&gt;PlanckはLEDにも対応してるけど、今回はデフォ実装するためナシ。でも今後欲しい感じもする。&lt;/p&gt;&lt;h4 id=&quot;switchはめ込み&quot;&gt;Switchはめ込み&lt;/h4&gt;&lt;p&gt;Sitch PlateにKey Switchをはめる&lt;/p&gt;&lt;p&gt;48Keyで使う。ちょっと数が多いしはめ込むのは面倒だけど、黙々とやる。 KeySwitchの端子がひん曲がっているやつはピンで直しながらはめ込んでいきく。&lt;/p&gt;&lt;p&gt;真ん中の1 or 2 keyがえらべるところはPCBにはんだ付けするまでswitchがスライドするので注意。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-01-14-planck/planck-half.jpg&quot; alt=&quot;半分まではめ込んだ&quot; /&gt;&lt;/p&gt;&lt;p&gt;全部はめ込んだ痕でSwitch Plateの裏表があるっぽいことに気づく。裏側のほうがピカピカしてる。でも傷が多いので今のままで行こうと決定&lt;/p&gt;&lt;h4 id=&quot;soldering&quot;&gt;Soldering&lt;/h4&gt;&lt;p&gt;マスクを着用。&lt;/p&gt;&lt;p&gt;今回ハンダゴテを新調した。白光のいいやつで温度調節ができる。調べた感じだとkeyboardのPCBにはんだ付けする最適温度が350とのことなので、それがえらべるのが良い。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-01-14-planck/planck-solders.jpg&quot; alt=&quot;ハンダゴテ比較&quot; /&gt;&lt;/p&gt;&lt;p&gt;ギターの配線用に使ってた旧・ハンダゴテとは随分と違う...&lt;/p&gt;&lt;p&gt;黙々とはんだ付けする。格子状に並んでいるので非常に楽。いやハンダゴテが良いモノだからなのかも。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-01-14-planck/planck-soldering.jpg&quot; alt=&quot;作業中&quot; /&gt;&lt;/p&gt;&lt;p&gt;はんだ付け完了したのがこちら。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-01-14-planck/planck-soldered.jpg&quot; alt=&quot;はんだ付け完了&quot; /&gt;&lt;/p&gt;&lt;p&gt;ところどころ熱で弾けたであろうヤニが付いてるので、組込前に掃除にした。&lt;/p&gt;&lt;h4 id=&quot;keycapはめ込み&quot;&gt;keycapはめ込み&lt;/h4&gt;&lt;p&gt;今回keycapはセットで買えたXDAのやつにした。もちろん印字なんかは不要。&lt;/p&gt;&lt;p&gt;作業中の写真なし。無念の撮り忘れ😭&lt;/p&gt;&lt;p&gt;完成！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2019-01-14-planck/planck-complete.jpg&quot; alt=&quot;美しい完成品&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;hr/&gt;&lt;/p&gt;&lt;p&gt;...最後のfirmwareのビルドのところがログに残ってないのだけど、Ergodox EZのキーマップをビルドするDockerでできてたような気がする。firmwareも書き込み済み。&lt;/p&gt;&lt;p&gt;当時使ってたPCではプログラミングしなくなったのと、改めてQMK firmwareのdocument見たらbuild toolsんとこの記事が変わってるので、今度環境構築がてら再確認してfirmwareのとこだけ新しく書こうと思ってる(作業中)。&lt;/p&gt;&lt;p&gt;わたしのkeymapのrepo(&lt;a href='https://github.com/krymtkts/qmk_firmware'&gt;krymtkts/qmk_firmware&lt;/a&gt;)は「デフォのキーマップをコピった」的なコミットを最後に止まってるので、旧PCに遺物が残されてそう😅&lt;/p&gt;&lt;p&gt;去年はWSLで書き込む方法が確か使えてたはずだけど今は非推奨になってて、MSYS2を使う方法が主流になった？？？謎い🤔&lt;/p&gt;&lt;p&gt;にしてもや、この文章を認めるためにOLKBのページを久しぶりに見たが、今のPCBはrevision.6で、hot swappableなkey switch、接続はUSB Type-Cという進化っぷりに驚きを隠せない😰わたしのはrev.5かそれ以前(忘れた)&lt;/p&gt;
</description>
<pubDate>
Mon, 14 Jan 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-01-10-make-blog-with-clojure
</guid>
<link>
http://krymtkts.github.io/posts/2019-01-10-make-blog-with-clojure
</link>
<title>
Clojureでブログを作った
</title>
<description>
&lt;p&gt;このブログはClojure製の静的サイトジェネレータ&lt;a href='http://cryogenweb.org/'&gt;Cryogen&lt;/a&gt;で作った。&lt;/p&gt;&lt;h3 id=&quot;動機&quot;&gt;動機&lt;/h3&gt;&lt;p&gt;現在有給消化中のため暇である。プログラマ的暇潰しが必要だったのだが、ブログを作るのはそれなりに楽しめそうな気がした。&lt;/p&gt;&lt;p&gt;あと、過去にブログサービスを使ってたときブログが長続きしなかった理由に、わたしは物書きじゃあないので簡単にブログが書けるとかいう部分が琴線に触れない、というようなものが根底にあるような気もする🤔&lt;/p&gt;&lt;p&gt;自分で作るならその心配はない。&lt;/p&gt;&lt;p&gt;ついでに折角GitHubのアカウントも持ってるので、GitHub Pagesを使わない手はない。blogのコードをrepoに登録しておけば芝生も青々としてええな！的な。&lt;/p&gt;&lt;p&gt;また別の観点としてブログサービスを選ぶとなった場合、書く記事の内容が技術的なものだったり単なる趣味の話だったり内容がブレると思うので、利用規約に触れて垢バンされるようなサービスは選び辛い。ちょうど良い選択かも知れない。&lt;/p&gt;&lt;p&gt;そこで今回はブログ自体を自分で作ってしまおうと決めた。&lt;/p&gt;&lt;p&gt;因みにClojureを選んだのは個人的な好みである。&lt;/p&gt;&lt;h3 id=&quot;静的サイトジェネレータの選定&quot;&gt;静的サイトジェネレータの選定&lt;/h3&gt;&lt;p&gt;普通にググって調べようと思ってたけど、いまはこんなのクソ便利なんがあるのね...→&lt;a href='https://www.staticgen.com/'&gt;StaticGen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;LanguageをClojureにしたら3個hitしたのでそれぞれ見てみた。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/cryogen-project/cryogen'&gt;Cryogen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/liquidz/misaki'&gt;Misaki&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/hashobject/perun'&gt;Perun&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Misakiは永らくメンテされてないからなし。 CryogenもPerunも、検索したら日本語の情報にhitするのでやりがいに違いはなさそう。 単純に⭐が多いのとBootを使ったことがないというだけの理由で&lt;a href='https://github.com/cryogen-project/cryogen'&gt;Cryogen&lt;/a&gt;を使うことにした。&lt;/p&gt;&lt;p&gt;(後知恵だが、ここはもっと慎重に考えた方が良かった)&lt;/p&gt;&lt;h3 id=&quot;&lt;a href='https://github.com/cryogen-project/cryogen'&gt;Cryogen&lt;/a&gt;を使ってぶろぐを作ろうぜ&quot;&gt;&lt;a href='https://github.com/cryogen-project/cryogen'&gt;Cryogen&lt;/a&gt;を使ってぶろぐを作ろうぜ&lt;/h3&gt;&lt;p&gt;ドキュメントが充実してるので、書いたてることに従うだけで簡単にできた。&lt;/p&gt;&lt;p&gt;出来上がったコードはこちら→&lt;a href='https://github.com/krymtkts/blog-cryogen'&gt;My personal blog project&lt;/a&gt;&lt;/p&gt;&lt;p&gt;以降に記すコマンド例はPowerShellで実行したものである。筆者はWindows10ユーザなので。&lt;/p&gt;&lt;h4 id=&quot;手始めに&quot;&gt;手始めに&lt;/h4&gt;&lt;p&gt;Leiningenでテンプレートを作成する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;poershell&quot;&gt;lein new cryogen blog
Retrieving cryogen/lein-template/0.3.7/lein-template-0.3.7.pom from clojars
Retrieving leinjacker/leinjacker/0.4.2/leinjacker-0.4.2.pom from clojars
Retrieving org/clojure/core.contracts/0.0.1/core.contracts-0.0.1.pom from central
Retrieving org/clojure/pom.contrib/0.0.26/pom.contrib-0.0.26.pom from central
Retrieving org/clojure/core.unify/0.5.3/core.unify-0.5.3.pom from central
Retrieving cryogen/lein-template/0.3.7/lein-template-0.3.7.jar from clojars
Retrieving org/clojure/core.contracts/0.0.1/core.contracts-0.0.1.jar from central
Retrieving org/clojure/core.unify/0.5.3/core.unify-0.5.3.jar from central
Retrieving org/clojure/clojure/1.4.0/clojure-1.4.0.jar from central
Retrieving leinjacker/leinjacker/0.4.2/leinjacker-0.4.2.jar from clojars
Generating fresh 'lein new' Cryogen project.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ブログを動かしてみよう&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;poershell&quot;&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ブラウザに表示された。OK👍&lt;/p&gt;&lt;h4 id=&quot;コンテンツを整理する&quot;&gt;コンテンツを整理する&lt;/h4&gt;&lt;p&gt;わたしの場合はMarkdownで書くのでAsciiDocのディレクトリは消してしまう。サーバ起動中にこれをやると例外が発生する、止めてからやるのが良いだろう。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;Remove-Item -Recurse -Path ./resources/templates/ascii
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;あとsampleで置いてあるpostやaboutを自分用に書き換えるなど。&lt;/p&gt;&lt;h4 id=&quot;テーマを作る&quot;&gt;テーマを作る&lt;/h4&gt;&lt;p&gt;themeはデフォで&lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;blue&amp;#95;centered&lt;/code&gt;, &lt;code&gt;lotus&lt;/code&gt;, &lt;code&gt;nucleus&lt;/code&gt;の4種類置いてある。&lt;code&gt;lotus&lt;/code&gt;を使うとエラーになったけど、これを直すのが目的じゃないので無視した🙈&lt;/p&gt;&lt;p&gt;自分用のテーマとしては何が良いかな？と検討して、お気に入りのSolarizedにしようと決めた。terminalやeditorはSolarized darkを使っているが、ブログはlightでやろうと思う。syntax highlightingについてはいつも通りのdarkを採用することにした。&lt;/p&gt;&lt;p&gt;&lt;a href='https://ethanschoonover.com/solarized/'&gt;Solarized&lt;/a&gt;を参考に自分でthemeを作る。元にするのは&lt;code&gt;blue&amp;#95;centered&lt;/code&gt;にした。ブラウザの開発者ツールで見てみてもレスポンシブデザインになってたし、cssのコード量も少なくてシンプルなのがいい。&lt;/p&gt;&lt;p&gt;&lt;code&gt;resources/templates/themes&lt;/code&gt;にファイル名&lt;code&gt;solarized&amp;#95;light&lt;/code&gt;でコピって書き換える。&lt;/p&gt;&lt;p&gt;基本は書いたあるルールに沿うけど一部それとなく変える。カラーコードの編集はsassにしたら楽だろうけどコピった元はそうじゃないので、該当する箇所を書き換えるだけに留めた。&lt;/p&gt;&lt;p&gt;Cryogenのsyntax highlightingは&lt;code&gt;highlight.js&lt;/code&gt;が採用されている。 デフォの24種だと使わないやつもいるので削って、使いそうな言語を足したものを&lt;a href='https://highlightjs.org/download/'&gt;highlight.js&lt;/a&gt;で作ってダウンロードする。 これは手動でダウンロードして、デフォの&lt;code&gt;highlight.pack.js&lt;/code&gt;に上書きした。&lt;/p&gt;&lt;p&gt;スタイルは&lt;code&gt;base.html&lt;/code&gt;で&lt;code&gt;default&lt;/code&gt;が指定されているので&lt;code&gt;solarized&amp;#95;dark&lt;/code&gt;を選ぶ。ついでにhighlight.jsのversionも9.7から9.13.1へ上げちゃう。&lt;/p&gt;&lt;p&gt;404 Page not foundのときのページがどうやって表示されるのかわからなかったが、GitHub Pagesの機能で提供されるルールに従えば良い様子。&lt;/p&gt;&lt;p&gt;&lt;a href='https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/'&gt;Customizing GitHub Pages / Creating a custom 404 page for your GitHub Pages site&lt;/a&gt;&lt;/p&gt;&lt;p&gt;デフォの404ページのスタイルが他のページとぜんぜん違うので、スタイルに合わせておいた。&lt;/p&gt;&lt;p&gt;ページが縦に長くなって垂直スクロールバーが出るとコンテンツのズレが生じるのだけど、これ多分bootstrapに起因する問題か🤔悩ましいが一旦そのままに。&lt;/p&gt;&lt;p&gt;これでおおよそのデザイン面は完成した。&lt;/p&gt;&lt;p&gt;作業中のコードは一旦BitBucketのprivate repoにブチ込んでおいたのだけど、GitHubの無償アカウントでもprivate repoが使えるようになって分ける理由がなくなってしまった...まあよし。&lt;/p&gt;&lt;p&gt;あと、&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Bootstrap3から4に上げたい&lt;/li&gt;&lt;li&gt;Google Analytics&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;など残しているが、一旦はコンテンツの公開を優先して後回しにする予定。&lt;/p&gt;&lt;h4 id=&quot;github&amp;#95;pagesにうｐる&quot;&gt;GitHub Pagesにうｐる&lt;/h4&gt;&lt;p&gt;&lt;a href='https://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;の説明と&lt;a href='http://cryogenweb.org/docs/deploying-to-github-pages.html'&gt;Cryogen - GitHub Pages&lt;/a&gt;を見たらできる。&lt;/p&gt;&lt;p&gt;作るのはユーザーのpageなので、まず&lt;code&gt;krymtkts.github.io&lt;/code&gt;のrepoを作る。 中身は空で。Licenseの選択もなし。&lt;/p&gt;&lt;p&gt;Cryogenのドキュメントに従い、&lt;code&gt;config.edn&lt;/code&gt;の&lt;code&gt;blog-prefix&lt;/code&gt;キーの値は空にする。&lt;/p&gt;&lt;p&gt;あとはCryogenが出力した&lt;code&gt;resource/public&lt;/code&gt;を先程作ったrepoのmasterブランチにpushするのみ。&lt;/p&gt;&lt;p&gt;この出力先&lt;code&gt;resource/public&lt;/code&gt;を変更する方法がわからなかったので、&lt;code&gt;krymtkts.github.io&lt;/code&gt;という名前のシンボリックリンクを作って、あたかもそういう名前のフォルダをGitで管理してる感を醸し出して茶を濁した。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;poershell&quot;&gt;New-Item -Value '.\blog\resources\public\' -Path './' -Name 'krymtkts.github.io' -ItemType SymbolicLink
cd krymtkts.github.io
git init
echo &amp;quot;# krymtkts.github.io&amp;quot; &amp;gt;&amp;gt; README.md
git add README.md
git commit -m &amp;quot;First commit&amp;quot;
git add .
git commit -m 'Add contents'
git remote add origin git@github.com:krymtkts/krymtkts.github.io.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでわたしのブログがpublishされたのであった🎉&lt;/p&gt;&lt;p&gt;めでたしめでたし...&lt;/p&gt;&lt;h3 id=&quot;to&amp;#95;be&amp;#95;continued&quot;&gt;To be continued&lt;/h3&gt;&lt;p&gt;で終わらなかった。&lt;/p&gt;&lt;p&gt;これを作りきって、急激にCryogenに興味がなくなってしまった。&lt;/p&gt;&lt;p&gt;結局の所、テンプレートエンジンにSelmerを使ってることで、HTMLやスタイルの編集自体にClojure感の薄さがあってなんか楽しみがないのかなと。最初から予想できそうな結果やけどな🤔&lt;/p&gt;&lt;p&gt;コンテンツ自体はMarkdownで書くし可搬性があるので記事の更新はしつつ、次段階としてPerunで作り直してみようと思う。&lt;/p&gt;&lt;p&gt;破壊と創造こそが人類の本質ですね(違う&lt;/p&gt;
</description>
<pubDate>
Thu, 10 Jan 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://krymtkts.github.io/posts/2019-01-08-first-post
</guid>
<link>
http://krymtkts.github.io/posts/2019-01-08-first-post
</link>
<title>
ブログを始めた
</title>
<description>
&lt;p&gt;ブログを始めてみた。&lt;/p&gt;&lt;p&gt;自分のメモを取るのには永らくEvernoteを使ってるのだけど、そういったものをまとめてアウトプットできるものが欲しいなー、と常々思ってた。&lt;/p&gt;&lt;p&gt;ただ過去にブログサービスを使ってたときは大して続かなく、また中等半端にやめかねないなという気持ちもあったのだが、去年アラフォーになったことであるし、不惑ということで一歩踏み出してみたのである。&lt;/p&gt;&lt;p&gt;自己紹介は&lt;a href='../../pages/about'&gt;About Me&lt;/a&gt;を参照いただきたく🙇&lt;/p&gt;&lt;p&gt;当面は自分の作業ログを清書したものを書いていくつもりやけど、もし誰かの目に留まって、何かの役に立ったなら幸いである。&lt;/p&gt;
</description>
<pubDate>
Tue, 08 Jan 2019 00:00:00 +0900
</pubDate>
</item>
</channel>
</rss>
